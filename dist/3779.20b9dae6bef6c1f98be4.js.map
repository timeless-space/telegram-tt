{"version":3,"file":"3779.20b9dae6bef6c1f98be4.js","mappings":"60DA+MA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXX,EACTO,EAAIK,IAAMZ,EACDA,aAAkBa,iBAC3BN,EAAIK,IAAMZ,EAAOc,OAEjBP,EAAIK,IAAMZ,EAAOY,IAGnBV,EAAMa,YAAYR,GAEdN,IAAWe,EAAAA,GAAAA,eAAmCf,IAAWe,EAAAA,GAAAA,eAAkC,CAC7Fd,EAAMG,UAAUC,IAAI,eAChBL,IAAWe,EAAAA,GAAAA,gBACbd,EAAMG,UAAUC,IAAI,QAEtB,MAAMW,EAAcd,SAASe,cAC3BjB,IAAWe,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFf,EAAMa,YAAYE,EAAYE,WAAU,GAE5C,CAEA,OAAOjB,CACT,CAwBA,SAASkB,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBpB,SAASe,cAA8B,2CAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,YAC/F,CAYA,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,EAC/B,CAEA,SAASI,EAASrC,EAA2BsC,GAC3C,IAAIC,EACAC,EAEJ,OAAQxC,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,yDAAuDE,EAAAA,EAAAA,IAAiBH,EAASZ,MACtGc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,2DACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,gEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,mEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACHwB,EAAqB,6CAA2CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC1Fc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,6CAA2CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC1Fc,EAAiB,GAAEE,EAAAA,mBAAwCA,EAAAA,kCAG/D,MAAMtB,EAAYlB,SAASe,cAA2BsB,GAChDI,EAAWvB,GAAaA,EAAUwB,iBAAsDJ,GAE9F,MAAO,CACLpB,YACAyB,QAASF,IAAW,GAExB,CAEA,SAASG,EAAW7C,EAAuBD,GACzC,OAAQA,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFd,EAAM8C,WAA2BX,MAAMY,UAAY,QACpD,MAEF,KAAKjC,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,UAChBL,IAAWe,EAAAA,GAAAA,iBACbd,EAAMG,UAAUC,IAAI,qBAI5B,C,+ECtWA,MAAM4C,GAASC,EAAAA,EAAAA,KAAa,GACtBC,EAAwBF,EAAO,GA8ErC,SAASG,EAAuBC,GAE9B,GAAIA,EAAMC,gCAA6E,mBAApCD,EAAME,0BAEvD,OAAOF,EAAME,0BAA0BC,KAAKH,EAGhD,CAeO,SAASI,IACd,GAAIvD,SAASwD,wBACX,IACExD,SAASyD,sBAMX,CALE,MAAOC,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,C,0FCvHA,MAIMI,EAAQ,IAAIC,IC6BX,MAAMC,EAAgBC,IAMR,IANS,QAC5B7B,EAAO,QACP8B,EAAU,EAAC,YACXC,EAAW,OACXrE,EAAM,MACNsE,GACcH,EACd,MAAMI,EAAQjC,GAAUkC,EAAAA,EAAAA,IAAgBlC,QAAWmC,EAC7CC,EAAcpC,GAAUqC,EAAAA,EAAAA,IAAsBrC,QAAWmC,EACzDpB,EAAQf,GAAUsC,EAAAA,EAAAA,IAAgBtC,QAAWmC,EAC7CI,EAAevC,GAAUwC,EAAAA,EAAAA,IAAuBxC,QAAWmC,EAC3DM,EAAezC,GAAU0C,EAAAA,EAAAA,IAAuB1C,QAAWmC,EAC3DQ,IAAkB3C,IAAU4C,EAAAA,EAAAA,IAAuB5C,GACnD6C,IAAkB7C,IAAU8C,EAAAA,EAAAA,IAAuB9C,GACnD+C,EAAY/C,GAAUgD,EAAAA,EAAAA,IAAmBhD,QAAWmC,EACpDc,EAAclB,GAAamB,SAASpB,GACpCqB,EAAgBC,QAAQH,GAAaI,SAAWjB,GAAaiB,SAC7DA,EAAUD,QAAQrC,GAAS0B,GAAgBI,GAC3CS,EAAUF,SAASC,IAAYpB,GAASM,GAAgBI,GAAmBP,KAC3E,MAAEmB,GAAUxC,GAAS0B,GAAgB,CAAC,EACtCe,EAAoB9F,IAAWe,EAAAA,GAAAA,YAC/BgF,EAAe/F,IAAWe,EAAAA,GAAAA,aAE1BiF,GAAeC,EAAAA,EAAAA,KAAQ,IAAOC,GAC9B7B,EACEkB,EACEA,EAAYI,SAAWO,GAClBC,EAAAA,EAAAA,IAAwBZ,GACV,IAAZnB,GAEFgC,EAAAA,EAAAA,IAAkB/B,EAAa6B,EAAS,MAAQ,UAE/C,QAAOX,EAAY7D,aAGtB0E,EAAAA,EAAAA,IAAkB/B,EAAa6B,EAAS,MAAQ,UAGvDxB,GAAee,GAAiBS,EAC1B,cAAaxB,EAAYhD,YAE5BY,IAAW+D,EAAAA,EAAAA,IAAoB/D,EAAS4D,EAAS,OAAS,YAChE,CAAC7B,EAAaK,EAAae,EAAenD,EAASiD,EAAanB,IAE7DkC,GAAmBC,EAAAA,EAAAA,GACvBjE,IAEIwD,GAAqBC,GAAgBd,GAAmBE,KACzDkB,EAAAA,EAAAA,IAAoB/D,EAAS,kBAChCmC,EACA+B,EAAAA,GAAAA,aACA/B,EACAH,GAEImC,EAAmBT,IACnBU,GAAiBH,EAAAA,EAAAA,GACrBE,OACAhC,EACA+B,EAAAA,GAAAA,aACA/B,EACAH,IAGAqC,UAAWC,EAAgB,aAC3BC,IACEC,EAAAA,EAAAA,GACFd,GAAa,QACbvB,EACAnC,IAAWyE,EAAAA,EAAAA,IAAsBzE,EAAS,aAC1CmC,EACAH,GAGI0C,EAAgBzC,GAASlB,GAAUkB,GAASlB,GAAQ4D,aAAUxC,EACpE,IAAIyC,GAAkBvB,IAAYqB,GAAgBJ,IAAsBF,GAAkBJ,EAC1F,MAAMa,ECxGO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,IAAc,KAMZ,GAJAD,GAAY,EAEZF,EAAWI,aAAUhD,GAEhB2C,EACH,OAGF,MAAM9G,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMyG,GACL9G,EAAIoH,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYtH,IAC3BuH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBlD,EACI,GA0BfV,EAAWI,QAAUE,EAAOK,WAAW,GACtC,CAACZ,IAIJ,MAAMa,EF3BO,SAAiBb,GAAsD,IAApCc,EAAUC,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GAAU7D,EAAc6D,UAAAC,OAAA,EAAAD,UAAA,QAAA1D,EAClF,MAAM4C,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUpD,EAAMqE,IAAIjB,QAAW3C,GACvE6D,GAAahB,EAAAA,EAAAA,MACbiB,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWb,SAAWS,IACxBO,aAAaH,EAAWb,SACxBa,EAAWb,aAAUhD,IAGvBiE,EAAAA,EAAAA,KAAU,KACR,IAAKtB,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAM5H,EAAM,IAAIC,MAEhBD,EAAIqI,OAAS,KACX,MAAMhB,GAASC,EAAAA,EAAAA,IAAYtH,IAC3BuH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBpD,EACI,GAyBb,MAAMa,EAAiBjB,EAAOK,YAE9BX,EAAWI,QAAUmB,EACrBL,IAEIvE,EAAM6E,MA7BO,KA8Bf7E,EAAM8E,QAER9E,EAAM+E,IAAI3B,EAASwB,EAAe,EAGhCtE,EACFgE,EAAWb,QAAUuB,OAAOC,YAAW,KACrC3I,EAAIK,IAAMyG,CAAO,GAChB9C,GAEHhE,EAAIK,IAAMyG,CACZ,GACC,CAACA,EAAS9C,EAAOiE,EAAaL,IAE1Bb,EAAWI,OACpB,CEduByB,CAAQ9B,QAAW3C,EAAWiB,QAAQ2B,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAW3C,CAC1E,CDwEuB0E,EAAajC,GAAiB5E,IAAW8G,EAAAA,EAAAA,IAA4B9G,IACrF4E,GAAiBlH,IAAWe,EAAAA,GAAAA,eAC/BmG,EAAgBC,GAEd1B,GAAiBiB,IACnBQ,EAAgBR,GAElB,MAAM2C,EAAWrC,GAAgBJ,IAC9BjB,OAAgElB,EAAtDiC,GAAkBJ,GAAoBY,GAE7CoC,EAAU5D,QAAQsB,GAClBuC,EAAWjH,GACbkH,EAAAA,EAAAA,IAAmBlH,GACnB+B,EACG,SAAQA,EAAa3C,MAAM2C,GAAaoF,eAAiB,MAAQ,aAClEhF,EAEAiF,GAAazD,EAAAA,EAAAA,KAAQ,IACrB3D,EACE2C,GAAmBE,GACdwE,EAAAA,EAAAA,IAAmBrH,GAAUsH,UAC3BrF,GAASM,GAAgBH,GAC3BmF,EAAAA,EAAAA,IAAwBtF,GAASM,GAAgBH,GAC/CrB,GAAS0B,GACX+E,EAAAA,EAAAA,IAAoBzG,GAAS0B,QAD/B,EAIAU,EAAgBsE,EAAAA,GAA+BC,EAAAA,IAGvD,CACD/E,EACAE,EACAM,EACAnD,EACAiC,EACAlB,EACAqB,EACAG,EACAE,IAGF,MAAO,CACLiB,eACAzB,QACAlB,QACAwB,eACAH,cACAK,eACAY,UACAC,UACAC,QACAZ,kBACAE,kBACAoE,WACArC,gBACAmC,WACAK,aACA5D,oBACAmE,YAAa1E,EACbE,gBACA6D,UACAzC,eACAxB,YACD,E,8EE/KH,MAAO6E,EAAeC,IAAiBjH,EAAAA,EAAAA,IAAa,GAErC,SAASkH,IAOtB,OANA1B,EAAAA,EAAAA,KAAU,IACD,KACLyB,EAAc,EAAE,GAEjB,IAEI,CAACD,EAAeC,EACzB,C,gEC6BA,MA2EA,IAAeE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAA0C,IAAxC,QAAElI,EAAO,WAAEmI,GAAYD,EAC9B,MAAM,SAAEE,IAAaC,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,GACpD,gBAAEK,GAAqBF,IAAYG,EAAAA,EAAAA,IAA4BN,EAAQjI,EAASoI,IAAc,CAAC,EAC/FI,GAAOC,EAAAA,EAAAA,IAAWR,EAAQjI,EAAQ0I,QAQxC,MAAO,CACLJ,iBAAkBH,GAAcG,EAChCK,YATkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKpJ,KACtCyJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWb,GAAQc,EAAAA,EAAAA,IAAqBP,UAC/DrG,EAQF6G,6BANmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAOtEY,iBANuBV,IAAQW,EAAAA,EAAAA,IAAiBX,GAOjD,GAjBeR,EA3EkCnG,IAWhD,IAXiD,OACrDuH,EAAM,WACNjB,EAAU,QACVnI,EAAO,MACPqJ,EAAK,gBACLf,EAAe,YACfK,EAAW,6BACXK,EAA4B,iBAC5BE,EAAgB,UAChBI,EAAS,QACTC,GACD1H,EACC,MAAM,eACJ2H,EAAc,wBACdC,IACEC,EAAAA,EAAAA,MAEEC,GAA4BC,EAAAA,EAAAA,KAAY,KAC5CN,MACA,MAAMO,EAAaR,GAAOS,SACtBT,EAAMS,SAASC,KAAIC,IAAA,IAAC,GAAE5K,GAAI4K,EAAA,OAAK5K,CAAE,IACjC,CAACY,EAAQZ,IACboK,EAAe,CAAEK,aAAYI,oBAAoB,IACjDV,GAAS,GACR,CAACD,EAAWD,EAAOrJ,EAAQZ,GAAIoK,EAAgBD,IAE5CW,GAA6BN,EAAAA,EAAAA,KAAY,KAC7CN,MACA,MAAMO,EAAaR,GAAOS,SACtBT,EAAMS,SAASC,KAAII,IAAA,IAAC,GAAE/K,GAAI+K,EAAA,OAAK/K,CAAE,IACjC,CAACY,EAAQZ,IACT+I,EACFsB,EAAwB,CAAEI,eAE1BL,EAAe,CACbK,aACAI,oBAAoB,IAGxBV,GAAS,GACR,CAACD,EAAWD,EAAOrJ,EAAQZ,GAAI+I,EAAYoB,EAASE,EAAyBD,IAE1EY,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTiB,QAASpB,IAAWd,EAAkB4B,OAA6B/H,EACnEsI,UAAU,SACVC,MAAON,EAAK,8BAEZE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,kCACRpB,GACCsB,EAAAA,GAAAA,cAAA,SAAIF,EAAK,8BAA+B,EAAG,MAE5ClB,GACCoB,EAAAA,GAAAA,cAAA,SAAIF,EAAK,+BAAgC,EAAG,MAE9CE,EAAAA,GAAAA,cAAA,OAAKG,UAAWnC,EAAkB,wBAA0B,kBACzDA,GACCgC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASnB,GACtEhB,IAAeoC,EAAAA,GAAAA,GAAWX,EAAK,iCAAkCzB,KAChEA,GAAeyB,EAAK,2CAG1BE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASZ,GACtEE,EAAK9B,EAAkB,gCAAkC,WAE5DgC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,KCjDZ,IAAerC,EAAAA,EAAAA,KA7C+BlG,IAMxC,IANyC,OAC7CuH,EAAM,MACNnH,EAAK,UACL+I,EAAS,QACTzB,EAAO,UACPD,GACDzH,EACC,MAAM,mBACJoJ,EAAkB,gBAClBC,IACExB,EAAAA,EAAAA,MAEEyB,GAAoBvB,EAAAA,EAAAA,KAAY,KACpCN,OACIV,EAAAA,EAAAA,IAASoC,GACXC,EAAmB,CAAEhJ,UAErBiJ,EAAgB,CACdjJ,QACAyG,OAAQsC,IAGZzB,GAAS,GACR,CAACD,EAAW0B,EAAWzB,EAAS0B,EAAoBhJ,EAAOiJ,IAExDd,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTiB,QAASW,EACTV,UAAU,+BACVC,MAAON,EAAK,eAEZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASK,GACtEf,EAAK,wBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,IC+SZ,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAEW,IAFT,QACPlI,EAAO,eAAEoL,EAAc,YAAEzD,EAAW,YAAE5F,GACvCmG,EACC,MAAMmD,GAAqBhD,EAAAA,EAAAA,IAAyBJ,IAC9C,SAAEG,IAAaC,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EACpDqD,IAAgBtL,IAAUuL,EAAAA,EAAAA,IAAoBtD,EAAQjI,GACtDwL,GAAcC,EAAAA,EAAAA,IAAyBxD,EAAQjI,GAC/C0L,EAAkB1L,IAAW2L,EAAAA,EAAAA,IAAsB1D,EAAQjI,GAAS0I,SAClEkD,UAAWC,GAAsBzD,GACpCpI,IAAWuI,EAAAA,EAAAA,IAA4BN,EAAQjI,EAASoI,IAAc,CAAC,EACtE0D,EAAkBnE,GAAgBA,EAAYvI,KAAO2C,GAAagK,WAElEH,EAAYC,GADMT,KAAoBzD,EAEtCqE,EAAYZ,KAAoBzD,IAAgBmE,EAChDG,EAAkBZ,GAAoBa,KAE5C,MAAO,CACLZ,gBACAE,cACAE,kBACAE,YACAI,YACAC,kBACAE,cAAepK,GAAa3C,GAC7B,GAzBe4I,EA1SkCnG,IAmBhD,IAnBiD,UACrDwC,EAAS,QACThB,EAAO,QACPrD,EAAO,YACP2H,EAAW,cACXwE,EAAa,SACblF,EAAQ,gBACRyE,EAAe,cACfJ,EAAa,YACbE,EAAW,UACXY,EAAS,UACTR,EAAS,UACTI,EAAS,gBACTC,EAAe,YACfI,EAAW,SACXC,EAAQ,mBACRC,EAAkB,eAClBC,EAAc,UACdC,GACD5K,EACC,MAAO6K,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,IAAQ,IAChEjF,EAAeC,GAAiBC,KACjC,SAAEgF,IAAaC,EAAAA,EAAAA,OAEf,qBACJC,EAAoB,2BACpBC,EAA0B,mBAC1BC,EAAkB,gBAClBC,IACEzD,EAAAA,EAAAA,OAEInF,aAAc6I,IAAqB5I,EAAAA,EAAAA,GACzCxE,IAAW+D,EAAAA,EAAAA,IAAoB/D,EAAS,aACvCsL,EACDtL,IAAWyE,EAAAA,EAAAA,IAAsBzE,EAAS,aAGtCqN,GAAsBzD,EAAAA,EAAAA,KAAY,KAClC0B,EACF2B,EAA2B,CAAEjN,QAASA,IAEtCgN,EAAqB,CAAEhN,QAASA,GAClC,GACC,CAACiN,EAA4BD,EAAsB1B,EAAetL,IAE/DsN,GAAgB1D,EAAAA,EAAAA,KAAY,KAChC,MAAM2D,EAAa3F,IAEnBC,GADe0F,EAAa,EAAIA,EAAa,GACtB,EAAE,GACxB,CAAC3F,EAAeC,IAEb2F,GAAe5D,EAAAA,EAAAA,KAAY,KAC/B,MAAM2D,EAAa3F,IAEnBC,GADe0F,EAAa,EAAIA,EAAa,GACtB,EAAE,GACxB,CAAC3F,EAAeC,IAEb4F,GAAe7D,EAAAA,EAAAA,KAAY,KAC1BjC,GAAgBwE,KACjBvD,EAAAA,EAAAA,IAASuD,GACXe,EAAmB,CAAEjL,MAAO0F,IAE5BwF,EAAgB,CAAEzE,OAAQyD,EAAelK,MAAO0F,IAElD0E,EAAY,GAAE,GACb,CAAC1E,EAAawE,EAAeE,EAAaa,EAAoBC,IAE3D/C,GAAOC,EAAAA,EAAAA,KAEPqD,GAA8D/J,EAAAA,EAAAA,KAAQ,IACnEqG,IAAA,IAAC,UAAE2D,EAAS,OAAEvE,GAAQY,EAAA,OAC3BM,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNH,UAAWrB,EAAS,cAAWjH,EAC/B2I,QAAS6C,EACTE,UAAU,gBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,IAEH,SAASqD,IACP,OAAO9N,EAEHsK,EAAAA,GAAAA,cAACyD,GAAkB,CACjB3E,OAAQsD,EACRvE,WAAgC,cAApB8D,EACZ1C,QAASqD,EACTtD,UAAWkD,EACXxM,QAASA,IAGVmM,GAAiBxE,EAClB2C,EAAAA,GAAAA,cAAC0D,GAAuB,CACtB5E,OAAQsD,EACRnD,QAASqD,EACTtD,UAAWkD,EACXxB,UAAWmB,EACXlK,MAAO0F,SAEPxF,CACR,CAmCA,GAAI2K,EAAU,CACZ,MAAMmB,EAA6B,GAiDnC,GAhDKjO,GAASkO,qBAAwBxC,GACpCuC,EAAUE,KAAK,CACbC,KAAM,UACNtD,QAAS2B,EACT4B,SAAUjE,EAAK,aAGdoB,IACCnI,EACF4K,EAAUE,KAAK,CACbC,KAAM9C,EAAgB,SAAW,WACjCR,QAASuC,EACTgB,SAAU/C,EAAiB,GAAEgD,KAAKV,MAAyB,IAAnBR,qBAA4C,aAGtFa,EAAUE,KAAK,CACbC,KAAM,WACNG,KAAMlK,EACNmK,SAAUvH,EACVoH,SAAUjE,EAAK,wBAKjBgC,GACF6B,EAAUE,KAAK,CACbC,KAAM,SACNtD,QAASwB,EACT+B,SAAUjE,EAAK,uBAIf4B,GACFiC,EAAUE,KAAK,CACbC,KAAM,aACNtD,QAAS2C,EACTY,SAAUjE,EAAK,+BAIfwB,GACFqC,EAAUE,KAAK,CACbC,KAAM,SACNtD,QAAS6B,EACT0B,SAAUjE,EAAK,YAIM,IAArB6D,EAAUnI,OACZ,OAGF,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BACbH,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXC,QAAShB,EACTiB,UAAU,SAETV,EAAUlE,KAAII,IAAA,IAAC,KACdiE,EAAI,QAAEtD,EAAO,KAAEyD,EAAI,SAAEC,EAAQ,SAAEH,GAChClE,EAAA,OACCG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPC,IAAKT,EACLA,KAAMA,EACNG,KAAMA,EACNC,SAAUA,EACV1D,QAASA,GAERuD,EACQ,KAGd/C,GAAiBhB,EAAAA,GAAAA,cAACwE,GAAAA,EAAe,CAACC,SAAU3B,EAAkB7G,KAAK,IAAIyI,SAAO,IAC9EpD,GAAakC,IAGpB,CAEA,OACExD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACZzK,GAASkO,sBAAwBxC,GAChCpB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,WAChBU,QAAS2B,GAETnC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBA3HrB,WACE,IAAIe,EAIJ,OAAOnI,EACLiH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,qBAChBU,QAASuC,GAER/B,EACChB,EAAAA,GAAAA,cAACwE,GAAAA,EAAe,CAACC,SAAU3B,EAAkB7G,KAAK,IAAIuE,QAASuC,IAE/D/C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wBAIjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACL4D,KAAMlK,EACNmK,SAAUvH,EACV2G,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,sBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBAGnB,CA+FKwE,GACD3E,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,gBAChBU,QAASwC,GAEThD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wBAEfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,eAChBU,QAAS0C,GAETlD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBAEd2B,GACC9B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK/G,EAAU,8BAAgC,+BAC1DyH,QAASwB,GAEThC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAGhBuB,GACC1B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,6BAChBU,QAAS2C,GAETnD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAGhBmB,GACCtB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,UAChBU,QAAS6B,GAETrC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAGjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,EAAK,SAChBU,QAASyB,GAETjC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEdmB,GAAakC,IACV,K,8JChWH,SAASoB,GAAgBC,GAC9B,MAAMC,GAAMpK,EAAAA,EAAAA,IAAUmK,KAQtB,OANAE,EAAAA,GAAAA,IAAc,IACLF,EAASG,WAAU,KACxBF,EAAIjK,QAAUgK,GAAU,MAIrBC,CACT,C,gBCdA,MAAOG,GAAoBC,KAAsB5O,EAAAA,EAAAA,KAAa,IACvD6O,GAAaC,KAAe9O,EAAAA,EAAAA,KAAa,GAEjC,SAAS+O,KAOtB,MAAO,EANYC,EAAAA,GAAAA,IACjB,IAAML,OAAyBE,MAE/B,CAACF,GAAoBE,KAGHD,GAAoBE,GAC1C,C,gBCCA,MAgEA,GAtDwC7N,IAElC,IAFmC,KACvCgO,EAAO,GAAE,WAAEC,EAAU,QAAEhF,EAAO,YAAEU,EAAW,qBAAEuE,GAC9ClO,EACC,MAAOmO,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IACzC,SAAEpD,IAAaC,EAAAA,EAAAA,OACdoD,GAAgBR,KACjBS,GAAWC,EAAAA,GAAAA,IAAgB,MAAOC,EAAAA,KAAgBH,KAAyB,CAACA,KAElF/J,EAAAA,EAAAA,KAAU,KACR,MAAMmK,EAAgB3S,SAASe,cAAc,kCAEvC6R,EAAmBA,KACvB,MAAM/K,EAAS8K,EAAgBA,EAAcE,aAAe,EAE5DR,EAAexK,EAAe,EAANiL,EAAAA,GAAQ,EAIlCF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EA9BP,KA8B6C,GAIpE,OAFA9J,OAAOmK,iBAAiB,SAAUF,GAAc,GAEzC,KACLjK,OAAOoK,oBAAoB,SAAUH,GAAc,EAAM,CAC1D,GACA,IAQH,MAAMI,GAAaC,EAAAA,GAAAA,GACjB,oBACAlB,GAAc,eACdM,GAAY,YACZ5E,GAAe,eACfuE,GAAwB,UAG1B,OACEzF,EAAAA,GAAAA,cAAA,OAAKG,UAAWsG,EAAYjG,QAf9B,SAAmBmG,GACbpB,GACFoB,EAAEC,iBAEN,GAYK9N,QAAQyM,IACPvF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BAA8BK,QAAUgC,OAAqB3K,EAAV2I,GAChER,EAAAA,GAAAA,cAAA,KAAGG,UAAY,6BAA2BuF,EAAc,YAAc,IAAMmB,IAAI,QAAQtB,IAGxF,E,wCCxEH,MAAOuB,GAAgBC,KAAkBzQ,EAAAA,EAAAA,IAAa,GAE9C,SAAS0Q,KAMtB,OALAlL,EAAAA,EAAAA,KAAU,IACD,KACLiL,GAAe,EAAE,GAElB,IACI,CAACD,GAAgBC,GAC1B,C,0dCLA,MAAME,GAAYC,EAAAA,IAAcC,EAAAA,GAC1BC,GAAsBF,EAAAA,IAAcC,EAAAA,GAAU,GAAM,IACpDE,GAAaC,EAAAA,KAA4BL,GAAY,GAAK,GAC1DM,GAAmB,IAEnBC,IAAcC,EAAAA,GAAAA,KAEpB,IAAIC,GAEG,MAAMC,GAOXC,YAAYC,EAAa9M,GAA2B+M,GAAA,cANjB,IAAIzQ,KAAKyQ,GAAA,mBAE9B,GAACA,GAAA,sBAKbC,KAAKhN,OAASA,EACdyM,GAAYQ,SAAQ,CAAAzQ,EAAgB0Q,KAAU,IAAzB,UAAEC,GAAW3Q,EAC3B2Q,EAAUC,QAAQ,CACrBC,KAAM,qBACNC,KAAM,CACJR,EACAR,GACAY,EACAK,GAAAA,EACAP,KAAKQ,QAAQ3R,KAAKmR,QAEpB,GAEN,CAEQQ,QAAQC,EAAcC,GAC5BV,KAAKW,OAAOvM,IAAIqM,EAAMC,GAClBD,IAAST,KAAKY,aAChBZ,KAAKa,OAAOJ,EAEhB,CAEQK,aACNd,KAAKW,OAAOV,SAASS,IACnBA,EAAMK,OAAO,IAEff,KAAKW,OAAOxM,OACd,CAEA0M,OAAOJ,GACLT,KAAKY,YAAcH,EACnB,MAAMC,EAAQV,KAAKW,OAAOjN,IAAI+M,GAC9B,QAAKC,KACLM,EAAAA,EAAAA,KAAgB,KACdhB,KAAKhN,OAAOD,MAAQ2N,EAAM3N,MAC1BiN,KAAKhN,OAAOI,OAASsN,EAAMtN,OACf4M,KAAKhN,OAAOG,WAAW,MAC/B8N,UAAUP,EAAO,EAAG,EAAGV,KAAKhN,OAAOD,MAAOiN,KAAKhN,OAAOI,OAAO,KAE5D,EACT,CAEA8N,UACElB,KAAKc,aACLrB,GAAYQ,SAAQtI,IAAmB,IAAlB,UAAEwI,GAAWxI,EAC3BwI,EAAUC,QAAQ,CACrBC,KAAM,wBACNC,KAAM,IACN,GAEN,EAkBFb,GAAYQ,SAAQnI,IAAgB,IAAf,OAAEqJ,GAAQrJ,EAC7BqJ,EAAO3C,iBAAiB,WAAW4C,UACjC,MAAM,KAAEvH,EAAI,UAAEwH,EAAS,OAAEC,GAAW1C,EAAE2C,KAMtC,GAAa,gBAAT1H,EACF,OAGF,MAAM2H,QAAeC,EAAAA,GAAAA,IAAQ,gBAAiB,CAAEC,YAAa7P,EAAAA,GAAAA,eAA+ByP,IAC5F,IAAKE,EACH,OAGF,MAAM,YAAEG,GAAgBH,EAExBL,EAAOS,YAAY,CACjB/H,KAAM,eACNwH,YACAG,OAAQG,GACP,CAACA,GAAc,GAClB,ICnHJ,SAAiN,uBCuOjN,IAAejM,EAAAA,EAAAA,KAtMsBlG,IAU/B,IAVgC,SACpCqS,EAAQ,eACRC,EAAc,QACdC,EAAO,WACPC,EAAU,IACVlC,EAAG,SACHmC,EAAQ,kBACRC,EAAiB,OACjBC,EAAM,YACNC,GACD5S,EAEC,MAAM6S,GAAY1P,EAAAA,EAAAA,IAAuB,OAClCoM,GAAkBE,MAClBqD,EAAiBC,IAAmBC,EAAAA,GAAAA,GAAUzD,MAC9C0D,EAAkBC,IAAoBF,EAAAA,GAAAA,GAAU,IAChDG,EAAgBC,IAAkBJ,EAAAA,GAAAA,GAAU,GAC7CK,GAAclQ,EAAAA,EAAAA,KAAgB,IAC7BmQ,EAAkBC,IAAqBlF,EAAAA,EAAAA,KAAS,IAChDmF,EAAWC,IAAgBpF,EAAAA,EAAAA,KAAS,GAErCqF,GAAmBvQ,EAAAA,EAAAA,IAA0B,MAE7CwQ,GAAaxQ,EAAAA,EAAAA,IAAuB,MAEpCyQ,GAAczQ,EAAAA,EAAAA,IAAuB,MAErC0Q,GAAiB1Q,EAAAA,EAAAA,IAAuB,MAExC2Q,GAAchS,EAAAA,EAAAA,KAAQ,IFcvB,SAA8ByB,EAAeK,GAGlD,MAAMmQ,GAFNxQ,EAAQkJ,KAAKV,MAAMxI,EAAQsM,MAC3BjM,EAAS6I,KAAKV,MAAMnI,EAASiM,KAU7B,OARItM,EAAQyM,KACVzM,EAAQyM,GACRpM,EAAS6I,KAAKV,MAAMxI,EAAQwQ,IAE1BnQ,EAASoM,KACXpM,EAASoM,GACTzM,EAAQkJ,KAAKV,MAAMnI,EAASmQ,IAEvB,CAAExQ,QAAOK,SAClB,CE1BWoQ,CAAqBxB,GAAYjP,OAAS,EAAGiP,GAAY5O,QAAU,IACzE,CAAC4O,IAEEyB,GAAalM,EAAAA,EAAAA,KAAakJ,IAC9BA,EAAOxE,KAAKyH,MAAMjD,GAClBmC,EAAenC,GF0DZ,SAA4BA,GAC5Bd,IACEA,GAAakB,OAAOJ,EAC7B,CE5DIkD,CAAmBlD,EAAK,GACvB,CAACmC,IA2HJ,OAzHA7O,EAAAA,EAAAA,KAAU,KACR,IAAImO,GAAsBpC,GAAQiC,EAClC,OF4CG,SAA6BjC,EAAa9M,GAK/C,OAJI2M,IACFA,GAAauB,UAEfvB,GAAe,IAAIC,GAAaE,EAAK9M,GAC9B,IAAM2M,IAAcuB,SAC7B,CElDW0C,CAAoB9D,EAAKoD,EAAiBpQ,QAAS,GACzD,CAACgN,EAAKiC,EAASG,KAElBnO,EAAAA,EAAAA,KAAU,KACRgP,GAAkB,EAAM,GACvB,CAACd,KAEJlO,EAAAA,EAAAA,KAAU,KACH8O,EAAY/P,SAAYkQ,GAC3BT,EAAgBxD,IAClB,GACC,CAACA,EAAgBiE,EAAWT,KAE/BsB,EAAAA,EAAAA,KAAgB,KACd,IAAKT,EAAYtQ,QAAS,OAC1B,MAAM4J,GAAWnB,EAAAA,GAAAA,IAAO+G,IAAoBT,EAAY,IAAK,GAC7DuB,EAAYtQ,QAAQrF,MAAMsF,MAAS,GAAE2J,IAAW,GAC/C,CAAC4F,EAAiBT,KAErBgC,EAAAA,EAAAA,KAAgB,KACTV,EAAWrQ,UAChBqQ,EAAWrQ,QAAQrF,MAAMqW,KAAQ,GAAErB,QAAsB,GACxD,CAACA,KAEJoB,EAAAA,EAAAA,KAAgB,KACTR,EAAevQ,UACpBuQ,EAAevQ,QAAQiR,WAAYC,EAAAA,GAAAA,IAAoBrB,KAAiB,GACvE,CAACA,KAEJ5O,EAAAA,EAAAA,KAAU,KACR,IAAKsO,EAAUvP,UAAYmP,EAAU,OACrC,MAAMgC,EAAS5B,EAAUvP,QACzB,IAAIoR,EAAaD,EAAOE,wBAEpB1D,EAAO,EACP2D,EAAS,EAEb,MAAMC,EAAmBzF,IACvB,MAAM0F,EAAQ1F,aAAa2F,WAAa3F,EAAE0F,MAAQ1F,EAAE4F,QAAQ,GAAGF,MACzDG,GAAIC,EAAAA,GAAAA,IAAM7C,IAAayC,EAAQJ,EAAWJ,MAAQI,EAAWnR,OAAQ,EAAG8O,GAC9E,GAAIK,EAAmB,MAAO,CAACuC,EAAG,GAC7BP,EAAWnR,QAAOmR,EAAaD,EAAOE,yBAC3C,MAAMQ,EAAUxB,EAAWrQ,QAI3B,MAAO,CAAC2R,GAHEC,EAAAA,GAAAA,IACRJ,EAAQJ,EAAWJ,KAAOa,EAAQC,YAAc,GAAI,EAAGV,EAAWnR,MAAQ4R,EAAQC,YAAc,GAErF,EAiBTC,EAAiBA,KACrBhC,EAAY/P,SAAU,EACtBiQ,GAAkB,GAClBE,GAAa,GACbV,EAAgB9B,GAChB0B,EAAO1B,GAEPnM,YAAW,KACTuO,EAAY/P,SAAU,CAAK,GAC1B,IAAI,EAGHgS,GAAUC,EAAAA,GAAAA,IAAcd,EAAQ,CACpCe,UAnBsBC,KACtBlC,GAAkB,GAClBE,GAAa,GACbb,GAAa,EAiBb8C,UAAWL,EACXpM,QAASoM,EACTM,OA9BkBvG,IAClBmE,GAAkB,IAChBtC,EAAM2D,GAAUC,EAAgBzF,GAC7B6E,EAAWhD,GAChBiC,EAAiB0B,GACjB7B,EAAgB9B,EAAK,IA4BvB,GAAIxC,EAAAA,IAAgBiE,EAClB,OAAO4C,EAGT,MAAMM,EAAuBxG,IAC3BmE,GAAkB,IAChBtC,EAAM2D,GAAUC,EAAgBzF,GAClC8D,EAAiB0B,GACZX,EAAWhD,EAAK,EAGjB4E,EAAuBA,KAC3BtC,GAAkB,EAAM,EAO1B,OAJAkB,EAAOzF,iBAAiB,YAAa4G,GACrCnB,EAAOzF,iBAAiB,aAAc4G,GACtCnB,EAAOzF,iBAAiB,aAAc6G,GAE/B,KACLP,IACAb,EAAOxF,oBAAoB,YAAa2G,GACxCnB,EAAOxF,oBAAoB,aAAc2G,GACzCnB,EAAOxF,oBAAoB,aAAc4G,EAAqB,CAC/D,GACA,CACDxD,EACA4B,EACAxB,EACAE,EACAC,EACAM,EACAH,EACAU,EACAf,IAIAjK,EAAAA,GAAAA,cAAA,OAAKG,UDlMmB,uBCkMU2E,IAAKsF,IACnCH,GACAjK,EAAAA,GAAAA,cAACqN,EAAAA,EAAc,CACbvO,QAAM,EACNgH,UAAW+E,EACX1K,UDvMmD,uBCwMnD3K,MAAQ,UAAS6V,EAAYvQ,oBAAoBuQ,EAAYlQ,WAC7D2J,IAAKoG,GAELlL,EAAAA,GAAAA,cAAA,UAAQG,UD3MkF,uBC2MjD2E,IAAKmG,IAC9CjL,EAAAA,GAAAA,cAAA,OAAKG,UD5M0H,wBC6M7HH,EAAAA,GAAAA,cAAA,QAAMG,UD7MgK,uBC6M7H2E,IAAKsG,MAIpDpL,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACbwU,EAAepK,KAAIC,IAAA,IAAC,MACnB4N,EAAK,IACLC,GACD7N,EAAA,OACCM,EAAAA,GAAAA,cAAA,OACEuE,IAAM,GAAE+I,KAASC,IACjBpN,UDxNuO,uBCyNvO3K,MAAQ,SAAgB,IAAR8X,cAAwB,IAAY,IAANC,MAC9C,KAGNvN,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAAA,OACE8E,IAAKqG,EACLhL,WAAWuG,EAAAA,GAAAA,GDhO8P,uBCgOhOqE,GDhOiQ,2BCmO1S,I,4BC5KV,MAAMjX,GAAa6S,IACjBA,EAAEC,iBAAiB,EAGf4G,GAAiB,CACrB,GACA,EACA,IACA,GA2MF,IAAe/P,EAAAA,EAAAA,KAtM2BlG,IAyBpC,IAzBqC,IACzCsQ,EAAG,eACHgC,EAAc,iBACd4D,EAAgB,SAChB7D,EAAQ,QACRE,EAAO,SACP4D,EAAQ,qBACRjI,EAAoB,UACpBkI,EAAS,sBACTC,EAAqB,aACrBC,EAAY,WACZC,EAAU,kBACV7D,EAAiB,OACjB8D,EAAM,QACNC,EAAO,aACPC,EAAY,WACZlE,EAAU,mBACVmE,EAAkB,cAClBC,EAAa,eACbC,EAAc,qBACdC,EAAoB,4BACpBC,EAA2B,yBAC3BC,EAAwB,YACxBC,EAAW,OACXtE,GACD3S,EACC,MAAOkX,EAAoBC,EAAkBC,IAAqBpM,EAAAA,EAAAA,MAC3DuE,GAAkBE,KACnB2B,GAAc5C,EAAAA,GAAAA,IAAgB,IAAM/B,KAAK4K,MAAM9H,MAAmB,CAACA,KAClE+H,EAAc7D,IAAgBT,EAAAA,GAAAA,IAAU,IAEzC,SAAE/H,IAAaC,EAAAA,EAAAA,OACdoD,EAAciJ,GAAiBzJ,KAChC0J,GAAYhJ,EAAAA,GAAAA,GAAgBF,IAElC/J,EAAAA,EAAAA,KAAU,KACR,IAAKkK,EAAAA,KAAiBP,EAAsB,OAC5C,IAAIuJ,EACJ,GAAKD,GAAcpB,IAAac,IAAsBI,IAOtD,OAHAG,EAAU5S,OAAOC,YAAW,KAC1ByS,GAAc,EAAM,GA7CO,KA+CtB,KACDE,GAAS5S,OAAOP,aAAamT,EAAQ,EAPrCA,GAAS5S,OAAOP,aAAamT,EAQlC,GACA,CAACrB,EAAWoB,EAAWD,EAAeL,EAAoBI,EAAcpJ,KAE3EmG,EAAAA,EAAAA,KAAgB,KACVmD,EACFzb,SAAS2b,KAAKzb,UAAUC,IAAI,0BAE5BH,SAAS2b,KAAKzb,UAAU0b,OAAO,0BAE1B,KACL5b,SAAS2b,KAAKzb,UAAU0b,OAAO,yBAAyB,IAEzD,CAACH,KAEJjT,EAAAA,EAAAA,KAAU,KACHiT,GACHJ,GACF,GACC,CAACA,EAAmBI,IAEvB,MAAMjP,GAAOC,EAAAA,EAAAA,KAEPoP,GAAa7P,EAAAA,EAAAA,KAAa8P,IAC9BpE,GAAa,GACbd,EAAOkF,EAAS,GACf,CAAClF,EAAQc,IAENqE,GAAkB/P,EAAAA,EAAAA,KAAY,KAClC0L,GAAa,EAAK,GACjB,CAACA,IAEEsE,GAAajW,EAAAA,EAAAA,KAAQ,IACV,IAAX0U,GAAgBC,EAAgB,aAChCD,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQC,IAEZ,OACEhO,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAe,sBAAuBjB,GAAwB,SAAUsJ,GAAa,UAChGvO,QAAS1M,IAETkM,EAAAA,GAAAA,cAACuP,GAAQ,CACP1H,IAAKA,EACL+B,SAAUA,EACVE,QAASA,EACTG,kBAAmBA,EACnBF,WAAYA,EACZF,eAAgBA,EAChBK,OAAQiF,EACRhF,YAAakF,EACbrF,SAAU+E,IAEZ/O,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAWzD,EAAK,iBAChB7D,KAAK,OACLuT,QAAShN,EACTlC,MAAM,oBACNH,UAAU,OACVmD,OAAK,EACL9C,QAASgO,GAETxO,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQiH,EAAY,aAAe,gBAElE3N,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAU,SACVtH,KAAK,OACLqE,MAAM,oBACNH,UAAU,SACVmD,OAAK,EACL9C,QAAS2N,GAETnO,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ4I,OAErCnI,EAAAA,IACAnH,EAAAA,GAAAA,cAACyP,GAAAA,EAAW,CAACC,MAAI,EAACvP,UAAU,gBAAgBwP,MAAO3B,EAAU,EAAa,IAATD,EAAc6B,SAAUxB,IAmEnG,SAAoBzF,EAAqBiB,GACvC,OACE5J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACX,IAAE4L,EAAAA,GAAAA,IAAoBpD,SAAkBoD,EAAAA,GAAAA,IAAoBnC,KAGpE,CAvESiG,CAAWlH,EAAaiB,IACvBkE,GACA9N,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACX,IAAE2P,EAAAA,GAAAA,IAAehQ,EAAM4N,EAAWD,SAAuBqC,EAAAA,GAAAA,IAAehQ,EAAM4N,MAGpF1N,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAU,gBACVtH,KAAK,OACLqE,MAAM,oBACNH,UAAU,gBACVmD,OAAK,EACL9C,QAASkO,GAEP,GAAET,MAELK,GACCtO,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAU,qBACVtH,KAAK,OACLqE,MAAM,oBACNH,UAAU,aACVmD,OAAK,EACL9C,QAAS+N,GAETvO,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAGhByN,GACC5N,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAU,aACVtH,KAAK,OACLqE,MAAM,oBACNH,UAAU,aACVmD,OAAK,EACL9C,QAAS0N,GAETlO,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,QAASmH,EAAe,mBAAqB,uBAIhF7N,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQ2P,EACRtO,WAAWuG,EAAAA,GAAAA,GACT,sBACCkH,GAAyB,iBACzBU,GAA+B,UAElCjK,UAAU,QACV2L,UAAU,SACVC,WAAS,EACThR,QAAS0P,GAERnB,GAAe/N,KAAKyQ,GAEnBlQ,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAAC6L,SAAUlC,IAAiBiC,EAAM1P,QAASA,IAAM6N,EAAqB6B,IAC3E,GAAEA,SAIN,I,uOChNV,MAmTA,IAAezS,EAAAA,EAAAA,KA/SmBlG,IAkB5B,IAlB6B,IACjCsQ,EAAG,MACH5O,EAAK,WACLmX,EAAU,WACVrG,EAAU,aACV9P,EAAY,SACZyT,EAAQ,kBACR2C,EAAiB,OACjBC,EAAM,OACNvC,EAAM,QACNC,EAAO,aACPC,EAAY,QACZhP,EAAO,qBACPwG,EAAoB,mBACpB8K,EAAkB,YAClBrP,EAAW,gBACXsP,EAAe,kBACfvG,GACD1S,EACC,MAAM,qBACJkZ,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,qBAC1BC,IACExR,EAAAA,EAAAA,MAEEyR,GAAWnW,EAAAA,EAAAA,IAAyB,OACnCiT,EAAWmD,IAAgBlL,EAAAA,EAAAA,KAAUI,EAAAA,KAAiBmB,EAAAA,KACtD0G,EAAckD,EAAeC,IAAkBC,EAAAA,GAAAA,IAAcJ,EAAUC,IACxE,SAAEtO,IAAaC,EAAAA,EAAAA,MACfmH,EAAWiH,EAAShW,SAAS+O,UAAY,EACzCsH,EAAWjY,GAAS2Q,GAnCF,GAqClBuH,GAAwB7R,EAAAA,EAAAA,KAAY,KAEpC8R,EAAAA,IACJR,EAAqB,CAAE9K,UAAU,GAAO,GACvC,CAAC8K,IAEES,GAAwB/R,EAAAA,EAAAA,KAAY,KACpC8R,EAAAA,IACJR,EAAqB,CAAE9K,UAAU,GAAQ,GACxC,CAAC8K,KAGFtC,EACAgD,EACAC,GhB/EW,SACbC,EACAtR,EACAuR,GAEA,MAAOC,EAAaC,IAAkB/L,EAAAA,EAAAA,KAAS,IACxCoE,EAAU4H,IAAehM,EAAAA,EAAAA,KAAS,IAEzCgG,EAAAA,EAAAA,KAAgB,KAEd,GAAKzE,EAAAA,IAAU0K,EAAAA,KAAYL,EAAM3W,QAAS,OAC1C,MAAMpE,EAAQ+a,EAAM3W,QACdiX,EAAUtb,EAAuBC,GAGvC,KAFmBnD,SAASye,yBAA4BP,EAAM3W,SAASmX,+BACtDna,IAAZia,EACW,OAEhBrb,EAAMwb,sBAAuB,EAC7BN,GAAe,GACf,MAAMO,EAAkBA,KACtBhS,IACA0R,GAAY,GACZrb,GAAsB,EAAK,EAEvB4b,EAAkBA,KACtB5b,GAAsB,GACtBqb,GAAY,GACZH,GAAS,EAIX,OAFAhb,EAAM8P,iBAAiB,wBAAyB2L,GAChDzb,EAAM8P,iBAAiB,wBAAyB4L,GACzC,KACL1b,EAAM+P,oBAAoB,wBAAyB0L,GACnDzb,EAAM+P,oBAAoB,wBAAyB2L,EAAgB,CACpE,GACA,CAACX,EAAOtR,EAASuR,IAEpB,MAAM1a,GAAuBuI,EAAAA,EAAAA,KAAY,KACvC,IAAKkS,EAAM3W,QAAS,OACpB,MACMiX,EAAUtb,EADFgb,EAAM3W,SAEhBiX,EACFA,EAAQ,UAERjb,GACF,GACC,CAAC2a,IAEEF,GAAwBhS,EAAAA,EAAAA,KAAY,KACxC,IAAKkS,EAAM3W,QAAS,OACpB9D,IACA,MAAMN,EAAQ+a,EAAM3W,QACd8S,GAAYyE,EAAAA,EAAAA,GAAkB3b,GAC9Bqb,EAAUtb,EAAuBC,GACnCqb,EACFA,EAAQ,sBA0Bd,SAAiCrb,GAC/B,GAAIA,EAAM4b,wBACR,IACE5b,EAAM4b,yBAMR,CALE,MAAOrb,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,CAnCMqb,CAAwB5b,GAGtBkX,IACF2E,EAAAA,EAAAA,GAAS7b,EACX,GACC,CAAC+a,EAAOza,IAEX,OAAK2a,EAIE,CAACA,EAAaJ,EAAuBtH,GAHnC,EAAC,EAIZ,CgBUMuI,CAAoB1B,EAAUM,EAAuBE,IAElD,CAAEmB,EAAgBC,GAAgBpN,KAEnCqN,GAAkBpT,EAAAA,EAAAA,KAAY,KAClCkT,GAAe,EAAK,GACnB,CAACA,IAEEG,GAAmBrT,EAAAA,EAAAA,KAAaqH,IACpC,MAAMiM,EAAS/B,EAAShW,SAASqR,wBAC5B0G,IACDjM,EAAEkM,QAAUD,EAAO/G,MAAQlF,EAAEkM,QAAUD,EAAOE,OAASnM,EAAEoM,QAAUH,EAAOI,KAAOrM,EAAEoM,QAAUH,EAAOK,SACtGT,GAAe,EACjB,GACC,CAACA,KAEE,QACJ1I,EAAO,WAAEgE,EAAU,eAAEjE,EAAc,kBAAEqJ,GAAiB,iBAAEzF,KACtD0F,EAAAA,GAAAA,MAGFC,aAAcC,GACdC,qBAAsBC,KACpBC,EAAAA,GAAAA,IAAmB1F,OAAYjW,OAAWA,EAAW,SAEvDub,aAAcK,GACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GAAkBrM,EAAAA,KAAWwG,IAAc0F,QAAqBxb,OAAWA,EAAW,SAE1FiE,EAAAA,EAAAA,KAAU,KACR2W,EAAaY,GAAoB,GAChC,CAACZ,EAAcY,MAElBvX,EAAAA,EAAAA,KAAU,KACJwU,IAAWD,EACbQ,EAAShW,QAAS8Y,QACT9L,IAAQ7B,EAAAA,KAIjBsM,EAAAA,EAAAA,GAASzB,EAAShW,QACpB,GACC,CAACyV,EAAQD,EAAmBxI,EAAK6I,KAEpC5U,EAAAA,EAAAA,KAAU,KACR+U,EAAShW,QAASkT,OAASA,CAAM,GAChC,CAACA,KAEJjS,EAAAA,EAAAA,KAAU,KACR+U,EAAShW,QAASoT,aAAeA,CAAY,GAC5C,CAACA,IAEJ,MAAM2F,IAAkBtU,EAAAA,EAAAA,KAAaqH,IACnCA,EAAEC,kBACE+G,GACFkD,EAAShW,QAAS8Y,QAClB7C,GAAa,MAEbwB,EAAAA,EAAAA,GAASzB,EAAShW,SAClBiW,GAAa,GACf,GACC,CAACnD,IAEEkG,IAAcvU,EAAAA,EAAAA,KAAaqH,IAC3B6J,IAGAD,EACFtR,EAAQ0H,GAERiN,GAAgBjN,GAClB,GACC,CAAC1H,EAASsR,EAAoBqD,GAAiBpD,KAElDsD,EAAAA,GAAAA,GAAgBjD,EAAU,IAC1B,MAAO,CAAE9J,IAAkBC,KAErB+M,IAAmBzU,EAAAA,EAAAA,KAAaqH,IACpC,MAAMlQ,EAAQkQ,EAAEqN,cACZvd,EAAMwd,YAlIU,GAmIlBlN,GAAetQ,EAAMkS,aAElBuI,GAAYza,EAAMkS,cAAgBlS,EAAMmT,WAC3C7C,GAAe,GACf+J,GAAa,GACf,GACC,CAACI,EAAUnK,KAERmN,IAAc5U,EAAAA,EAAAA,KAAY,KAC1B4R,IACJnK,GAAe,GACf+J,GAAa,GACb0B,GAAe,GAAK,GACnB,CAACtB,EAAUnK,GAAgByL,IAExB2B,IAAyB7U,EAAAA,EAAAA,KAAY,KACrCuO,GAAgBmD,EAClBA,KACUnD,GAAgBkD,GAC1BA,GACF,GACC,CAACC,EAAgBnD,EAAckD,IAE5B5B,IAAa7P,EAAAA,EAAAA,KAAa8P,IAC9ByB,EAAShW,QAAS8N,YAAcyG,CAAQ,GACvC,IAEGgF,IAAqB9U,EAAAA,EAAAA,KAAa+U,IACtC5D,EAAqB,CAAE1C,OAAQsG,EAAY,KAAM,GAChD,CAAC5D,IAEE6D,IAAoBhV,EAAAA,EAAAA,KAAY,KAEpCuR,EAAShW,QAAS0Z,OAAS1D,EAAShW,QAAS0Z,MAC7C7D,EAAoB,CAAE1C,SAAUA,GAAU,GACzC,CAACA,EAAS0C,IAEP8D,IAA2BlV,EAAAA,EAAAA,KAAamV,IAC5C9D,EAA2B,CAAE1C,aAAcwG,GAAkB,GAC5D,CAAC9D,KAEJ7U,EAAAA,EAAAA,KAAU,KACR,IAAKuU,EAAmB,OACxB,MAAMqE,EAAU7N,IACd,IAAKgH,EAAc,OACnB,MAAMpX,EAAQoa,EAAShW,QACjB8Z,GAAUlI,EAAAA,GAAAA,IAAMhW,EAAMkS,YAhLd,EAgL4B9B,EAAmB,EAAGpQ,EAAMmT,UAClEgL,OAAOC,SAASF,KAClBle,EAAMkS,YAAcgM,EACtB,EAEIG,EAAiBnO,IACrB,IAAI4K,EACJ,OAAQ5K,EAAEpC,KACR,IAAK,IACL,IAAK,QACHoC,EAAEoO,iBACFnB,GAAgBjN,GAChB,MACF,IAAK,OACL,IAAK,YACHA,EAAEoO,iBACFL,GAAQ,GACR,MACF,IAAK,QACL,IAAK,aACH/N,EAAEoO,iBACFL,EAAO,GACD,EAMZ,OAFAphB,SAASiT,iBAAiB,UAAWuO,GAAe,GAE7C,KACLxhB,SAASkT,oBAAoB,UAAWsO,GAAe,EAAM,CAC9D,GACA,CAAClB,GAAiBvD,EAAmBxC,EAAc0D,IAEtD,MAAMyD,GAAejL,GAAe,UAASA,EAAWjP,oBAAoBiP,EAAW5O,WACjF8Z,GAAc,yBAAwB7E,KACtC8E,IAAwBlP,EAAAA,KAAiBP,EAE/C,OAEEzF,EAAAA,GAAAA,cAAA,OACEG,UAAU,cACVgV,YAAaD,GAAuBxC,OAAkB7a,EACtDud,WAAYF,GAAuBvC,OAAmB9a,GAEtDmI,EAAAA,GAAAA,cAAA,OACExK,MAAOwf,IAGN9T,GACClB,EAAAA,GAAAA,cAAA,OACEqV,cAAevhB,EAAAA,EACfwhB,cAAgBtP,EAAAA,QAAwCnO,EAAzBsc,GAC/B3T,QAAUgC,OAA6B3K,EAAlB+b,GACrBzT,UAAU,cAGdH,EAAAA,GAAAA,cAAA,QAAAuV,GAAA,CACEzQ,IAAK+L,EACL2E,SAAUxP,EAAAA,GACVyP,aAAa,aACbC,aAAW,EACXC,KAAMzE,EAENqD,MAAOtb,GAAS+U,EAChBlZ,GAAG,qBACHU,MAAOyf,GACPW,OAAQA,IAAM9E,GAAa,GAC3B+E,QAAS3B,GACT1T,QAAUgC,GAAaqL,OAA6BhW,EAAdgc,GACtCyB,cAAgBtP,EAAAA,QAAwCnO,EAAzBsc,IAE3BjB,GAAiB,CACrB4C,QAAUnP,IACRmK,GAAa,GACboC,GAAkB4C,QAAQnP,EAAE,EAE9BoP,aAAchC,KAEblM,GAAO7H,EAAAA,GAAAA,cAAA,UAAQjM,IAAK8T,MAGxB4L,IACCzT,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAACnD,UAAY,eAAcuT,KAAwBlT,QAASoT,IACvE5T,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAGhBkT,IACCrT,EAAAA,GAAAA,cAAA,OAAKG,UAAW,CAAC,oBAAqBoT,IAAmByC,KAAK,OAC1DlI,GAAc9N,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAY,gBAC3CH,EAAAA,GAAAA,cAACwE,GAAAA,EAAe,CACdvI,KAAK,KACLwI,SAAUqJ,EAAa,EAAI7T,EAC3Bgc,QAAM,EACNzV,QAASvB,MAIbhG,GACA+G,EAAAA,GAAAA,cAACkW,GAAmB,CAClBrO,IAAKA,EACL8F,UAAWA,EACX9D,eAAgBA,EAChB4D,iBAAkBA,GAClBK,WAAYA,EACZF,sBAAuB9U,QAAQiY,GAC/BzC,4BAA6BA,EAC7BT,aAAcA,EACd5D,kBAAmBA,EACnByD,SAAUA,EACV9D,SAAUA,EACVE,QAASA,EACTC,WAAYA,EACZtE,qBAAsBA,EACtByE,OAAQiF,GACRjB,mBAAoBiG,GACpB5F,yBAA0B+C,EAC1B9C,YAAaoF,GACb7F,OAAQA,EACRE,aAAcA,EACdD,QAASA,EACTG,cAAemG,GACflG,eAAgBgG,GAChB/F,qBAAsBmG,KAGtB,ICnSJ2B,IAAuBhP,EAAAA,IAAUD,EAAAA,MAAgBI,EAAAA,GAmJvD,IAAe7J,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAQyY,KACP,MAAM,OACJhY,EAAM,SACNN,EAAQ,QACRtG,EAAO,cACPqK,EAAa,OACbzO,GACEgjB,GAEE,OACJrI,EAAM,QACNC,EAAO,aACPC,EAAY,SACZnI,IACEuQ,EAAAA,EAAAA,IAAe1Y,GAAQ2Y,YAE3B,GAAIljB,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAMiK,IAAU5G,EACd,MAAO,CAAEuW,SAAQC,UAASC,gBAG5B,MAAMvY,GAAU6gB,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQ5G,GAClD,OAAK9B,EAIE,CACL0I,SACA5G,UACAgf,SAAU9gB,EAAQ8gB,SAClBpjB,SACAsC,UACAwL,aAAaC,EAAAA,EAAAA,IAAyBxD,EAAQjI,GAC9CqY,SACAC,UACAlI,WACAmI,gBAbO,CAAEF,SAAQC,UAASC,eAe9B,CAEA,GAAIpM,EAGF,MAAO,CACLrK,UACAgf,SAAU3U,EACVpK,aALa+G,EAAAA,EAAAA,IAAWb,EAAQkE,KAAkB1D,EAAAA,EAAAA,IAAWR,EAAQkE,GAMrEzO,SACA2a,SACAC,UACAlI,WACAmI,gBAIJ,KAAM7P,GAAUN,GAAYtG,GAC1B,MAAO,CAAEuW,SAAQC,UAASC,gBAG5B,IAAIvY,EAOJ,OALEA,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFqjB,EAAAA,EAAAA,IAAuB9Y,EAAQS,EAAQ5G,IAEvC+e,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQ5G,GAGzC9B,EAIE,CACL0I,SACAN,WACAtG,UACAgf,SAAU9gB,EAAQ8gB,SAClBpjB,SACAsC,UACAwL,aAAaC,EAAAA,EAAAA,IAAyBxD,EAAQjI,GAC9CqY,SACAC,UACAlI,WACAmI,gBAdO,CAAEF,SAAQC,UAASC,eAe3B,GAnFevQ,EAjJmCgZ,IACrD,MAAM,QACJlf,EAAO,SACPwS,EAAQ,YACRvS,EAAW,OACX2G,EAAM,QACN1I,EAAO,OACPtC,EAAM,cACNujB,EAAa,YACbzV,EAAW,OACX6M,EAAM,aACNE,EAAY,QACZD,EAAO,SACPlI,EAAQ,QACR7G,EAAO,cACP2X,EAAa,SACbC,GACEH,EAEE5W,GAAOC,EAAAA,EAAAA,MAEP,QACJhH,EAAO,QACPC,EAAO,YACPlB,EAAW,cACXwC,EAAa,SACbmC,EAAQ,WACRK,EAAU,MACV7D,EAAK,QACLyD,EAAO,cACP7D,EAAa,UACbJ,EAAS,aACTwB,GACE3C,EAAc,CAChB5B,UAAS+B,cAAaD,UAASpE,SAAQsE,QAAOif,GAtCvB,OAyClB,CAAEnE,GAAkBnN,KAErBvG,EAAShG,QAAQrB,GAAeD,IAChC,SAAEgL,IAAaC,EAAAA,EAAAA,MAEfqU,GAAuBxX,EAAAA,EAAAA,KAAY,KACvCkT,GAAe,EAAK,GACnB,CAACA,IAEJ,GAAI/a,GAAeK,EACjB,OAAKe,EAaDmH,EAAAA,GAAAA,cAAA,OAAKuE,IAAKnG,EAAQ+B,UAAU,sBAC1BH,EAAAA,GAAAA,cAAC+W,GAAW,CACVxS,IAAK/M,EACLqQ,IAAKpL,EACLxD,OAAK,EACLmX,WAAY9V,EACZyP,YAAYiN,EAAAA,EAAAA,IAA+Bla,GAAa,GAAO,GAC/D7C,aAAcA,EACdyT,SAAUjV,EACV4X,kBAAmBvR,GAAUkL,EAC7B9I,YAAaA,EACb+I,kBAAmBkM,IAAuBzZ,EAC1C4T,QAAStG,EACT/K,QAASA,EACT+O,SAAO,EACPuC,oBAAkB,EAClBxC,OAAQ,EACRyC,gBAAiBqG,EACjB5I,aAAc,KA7BlBjO,EAAAA,GAAAA,cAAA,OAAKuE,IAAKnG,EAAQ+B,UAAU,sBACzB8W,GACCxa,GACAua,EAAAA,EAAAA,IAA+Bla,GAAa,IAC3C0F,IAAatB,EACdA,IA+BV,IAAKxL,EAAS,OACd,MAAMwhB,EAA6C,wBAAjCxhB,EAAQyhB,QAAQC,QAAQxV,KACtC9B,EAAK,qCACLuX,EAAAA,EAAAA,GAAkB3hB,GAEhB4hB,EAAYxe,QAAQoe,GACpBnN,EAAarU,IAAWshB,EAAAA,EAAAA,IAA+Bla,EAAawa,EAAWve,GAC/E0M,EAAuBjD,GAmM/B,SAAkCuH,GAChC,QAAKA,GACEA,EAAWjP,MApSiB,GAqSrC,CAtM2Cyc,CAAyBxN,GAElE,OACE/J,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAe,qBAAsB4Q,GAAa,cAC7DnC,YAAa1P,IAAyBO,EAAAA,GAAe8Q,OAAuBjf,GAE3EmB,GAAWie,GACVxa,EACAsN,GACCvH,IAAatB,EACdA,GAEDnI,IAAaiR,EAMZhK,EAAAA,GAAAA,cAAC+W,GAAW,CACVxS,IAAK/M,EACLqQ,IAAKpL,EACLxD,MAAOA,EACPmX,WAAY9V,EACZyP,WAAYA,EACZ9P,aAAcA,EACdyT,SAAUjV,EACV4X,kBAAmBvR,GAAUkL,EAC7BsG,QAAStG,EACTC,kBAAmBkM,IAAuBzZ,EAC1CuC,QAASA,EACT+O,QAASA,EACTlI,SAAUA,EACVL,qBAAsBA,EACtBvE,YAAaA,EACb6M,OAAQA,EACRyC,gBAAiBqG,EACjB5I,aAAcA,IA+HxB,SAA4B5T,EAAkBmd,EAA2BC,EAAmBvW,GAC1F,MAAM8T,EAAewC,GAAc,UAASA,EAAU1c,oBAAoB0c,EAAUrc,WAC9E8Z,EAAc,yBAAwB5a,KAC5C,OAAOA,EAEH2F,EAAAA,GAAAA,cAAA,OACEG,UAAU,eAETe,GAAelB,EAAAA,GAAAA,cAAA,OAAKqV,cAAevhB,EAAAA,EAAWqM,UAAU,cACzDH,EAAAA,GAAAA,cAAA,OACExK,MAAOwf,GAGPhV,EAAAA,GAAAA,cAAA,SACExK,MAAOyf,EACP9U,WAAWuG,EAAAA,GAAAA,GAAexF,GAAe,gBACzCtN,UAAWkF,QAAQ2e,OAMzBzX,EAAAA,GAAAA,cAAA,OACEG,UAAU,kBACV3K,MAAOgiB,EAAa,UAASA,EAAU1c,UAAY,IAEnDkF,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAGvB,CApL+BoL,CACvBpR,EACAyP,GACCvH,IAAatB,EACdA,IAuBDgW,GACClX,EAAAA,GAAAA,cAAC2X,GAAiB,CAChBpS,KAAM2R,EACN1W,QAASoW,EACT1V,YAAaA,EACbuE,qBAAsBA,EACtBD,WAAYzM,IAAYE,IAGxB,KA2FV,SAASge,GAAY5c,EAAkBmd,EAA2BC,EAAmBvW,GACnF,OAAO7G,EAEH2F,EAAAA,GAAAA,cAAA,OAAKxK,MAAM,uBACR0L,GAAelB,EAAAA,GAAAA,cAAA,OAAKqV,cAAevhB,EAAAA,EAAWqM,UAAU,cACzDH,EAAAA,GAAAA,cAAA,OACEjM,IAAKsG,EACLud,IAAI,GACJzX,WAAWuG,EAAAA,GAAAA,GAAexF,GAAe,gBACzC1L,MAAOgiB,EAAa,UAASA,EAAU1c,UAAY,GACnDlH,UAAWkF,QAAQ2e,MAKvBzX,EAAAA,GAAAA,cAAA,OACEG,UAAU,kBACV3K,MAAOgiB,EAAa,UAASA,EAAU1c,UAAY,IAEnDkF,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAGvB,C,uOC7RA,MAAM,aAAEuX,GAAY,aAAEC,IAAiBC,GAAAA,GAuBjCC,GAAahS,EAAAA,GAAe,GAAK,EACjCiS,GAAqB,IAS3B,IAAIC,GACAC,GAA0C,IAQzCC,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAKnB,MA+qBA,IAAe3a,EAAAA,EAAAA,KA/qByBlG,IAYlC,IAZmC,QACvCC,EAAO,WACP6gB,EAAU,YACVtW,EAAW,QACXhJ,EAAO,MACPE,EAAK,QACLD,EAAO,OACP8F,EAAM,UACNwY,EAAS,cACTX,EAAa,SACb7Q,KACGwS,GACJ/gB,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtC8d,GAAiB9d,EAAAA,EAAAA,IAAuB,MAExC+d,GAAe/d,EAAAA,EAAAA,IAAuB,MAEtCge,GAAgBhe,EAAAA,EAAAA,IAAuB,MACvCie,GAAmBje,EAAAA,EAAAA,IAAkB,CAAEke,EAAG,EAAGC,EAAG,EAAGC,MAAO,IAC1DC,GAAoBre,EAAAA,EAAAA,SAAmC7C,GACvDmhB,GAAwBte,EAAAA,EAAAA,SAA4B7C,GACpDohB,GAAgBve,EAAAA,EAAAA,KAAO,IACtBsP,EAAU4H,IAAehM,EAAAA,EAAAA,KAAS,IAClCtI,GAAiBE,IAClB0b,GAAoBxe,EAAAA,EAAAA,IAAO4C,KAC3BuQ,GAAesL,EAAAA,GAAAA,OACdC,EAAaC,IAAkBzT,EAAAA,EAAAA,KAAS,IACxC0T,EAAcC,IAAgBhP,EAAAA,GAAAA,GAAqB,CAAEqO,EAAG,EAAGC,EAAG,EAAGC,MAAO,IACzEU,EAAe5U,GAAa0U,IAC3BG,EAAkBC,IAAoBnP,EAAAA,GAAAA,GAA8B/S,GACrEmiB,EAAmB/U,GAAa6U,GAChCG,GAAW7T,EAAAA,GAAAA,IAAgB,IAA+B,IAAzBuT,IAAeR,OAAa,CAACQ,IAC9DO,GAAgB9T,EAAAA,GAAAA,GAAgB0T,IAC9Bte,OAAQ2e,EAAchf,MAAOif,EAAW,WAAEC,IAAeC,EAAAA,GAAAA,MAC1DhV,EAAoBC,EAAoBuN,GAAgBpN,MACzD,QAAEpG,GAAYqZ,EAEdxY,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,SAAUlL,EACVqb,OAAQlb,EACRmb,kBAAkB,IAGpB,MAAMC,GAAuBC,EAAAA,GAAAA,GAAqBvY,EAAa,CAACA,GAtEpC,KAsEyE,GAC/FwY,GAA+BD,EAAAA,GAAAA,IAAqB,KACxDvB,EAAkBle,aAAUhD,CAAS,GACpC,GAxEkB,KAwEE,GAEjB2iB,GAAuBF,EAAAA,GAAAA,IAAsB3K,GAAUiC,EAAYjC,IAAQ,GAzE3D,KAyEgF,GAEhG8K,EAAqB3hB,QAAQG,IAAUkO,EAAAA,IACvCuT,EAAkB1U,EAAAA,GAAe,GAAK+T,EAAc,GAEpDY,GAA2Brb,EAAAA,EAAAA,KAAaqH,IAC5C,IAAKX,EAAAA,GAAc,OACnB,MAAM4U,EAAWd,EAAenT,EAAEkU,MA9EZ,IA+EjBD,GAAYjU,EAAE0F,MAAQqO,IACtBE,GAAYjU,EAAE0F,MAAQ0N,EAAcW,GACzCxV,GAAoBD,IAAqB,GACxC,CAACyV,EAAiBzV,EAAoBC,EAAoB4U,EAAcC,IAyiB3E,IAviBAe,EAAAA,GAAAA,IAAW,IAAM5V,GAAmB,IAAO+S,KAE3Cnc,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEgd,EAAK,EAAEF,EAAC,EAAEC,GAAMW,EAAa3e,QAE3B,IAAN+d,GAAiB,IAANC,GAAqB,IAAVC,GACxBY,EAAiBliB,EACnB,GACC,CAACA,EAASkiB,EAAkBF,KAE/B5N,EAAAA,EAAAA,KAAgB,KACd,MAAM,EAAEgN,EAAC,EAAEC,EAAC,MAAEC,GAAUQ,IACxB7G,EAAuB,IAAVqG,GACTL,EAAa5d,UACf4d,EAAa5d,QAAQrF,MAAMulB,UAAYC,IAAmBjB,EAAcnB,EAAIZ,KAE1EQ,EAAe3d,UACjB2d,EAAe3d,QAAQrF,MAAMulB,UAAYC,GAAkBpC,EAAGC,EAAGC,IAE/DJ,EAAc7d,UAChB6d,EAAc7d,QAAQrF,MAAMulB,UAAYC,GAAkBjB,EAAcnB,EAAIZ,IAC9E,GACC,CAACsB,EAAc7G,EAAcsH,KAEhCje,EAAAA,EAAAA,KAAU,KACR,IAAKyc,EAAa1d,cAAwChD,IAA7B8hB,EAAiB9e,SAAyBiL,GAAY+H,EACjF,OAEF,IAAIoN,EAAgBtC,EAAiB9d,QACrC,MAAMqgB,EAAiB,CACrBtC,EAAG,EACHC,EAAG,GAECsC,EAAiB,CACrBvC,EAAG,EACHC,EAAG,GAECuC,EAAW,CACfxC,EAAG,EACHC,EAAG,GAEL,IACI1B,EADAkE,EAAkBC,KAAKC,MAE3B,MAAMC,GAAqBC,EAAAA,GAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,KAAK,GAC3B,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAMvD,EAAWsB,EAAiB9e,QAAS8gB,GACjD,QAAY9jB,IAAR+jB,EAAmB,CACrB,MAAMzP,GAAU4N,EAAc/B,IAAc2D,EAEtC/C,EADYY,EAAa3e,QACX+d,EAAIzM,EAMxB,OALAyF,GAAY,GACZ8H,EAAiBkC,GACjBvB,EAAqBuB,GACrBpB,GAAqB,GACrBS,EAAgB,CAAErC,EAAG,EAAGC,EAAG,EAAGC,MAAO,GAChCnC,GAILuB,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMlD,EACNmD,GAAI,EACJnS,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,GAAU4J,EAAa,CAChCV,EAAG,EACHD,EAAGjJ,EACHmJ,MAAO,OAGJ,IAdLS,EAAa0B,IACN,EAcX,CACA,OAAO,CAAK,EAGRiB,EAAsBvV,IAC1B,MAAM,MAAEmS,GAAUU,EAAa3e,QAC/B,GAAc,IAAVie,EAAa,MAAO,EAAC,GAAO,GAChC,GAAKnS,EAAEwV,OAAuBtnB,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAI8mB,EAAY,EAChB,OAAI7B,EAAenT,EAAEkU,MAzKD,GA0KX,EAAC,GAAO,IAEblU,EAAE0F,MAAQqO,EACZiB,GAAa,EACJhV,EAAE0F,MAAQ0N,EAAcW,IACjCiB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,IAEG,EAGhC7G,EAAiBnO,IACrB,MAAM,MAAEmS,GAAUU,EAAa3e,QAC/B,GAAc,IAAVie,EACJ,OAAQnS,EAAEpC,KACR,IAAK,OACL,IAAK,YACHmX,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,GACN,EAINU,EAA4B,SAAA1c,GAGE,IAFlC,EAAEkZ,EAAC,EAAEC,EAAC,MAAEC,GAAkBpZ,EAC1B9K,EAAS2G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,EAEZ,MAAM8gB,EAAqBrD,EAAsBne,QACjD,IAAKwhB,EAAoB,MAAO,CAAC,CAAEzD,IAAGC,IAAGC,UAAS,GAAM,GAExD,IAAIwD,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAWzC,EAAcA,EAAcjB,GAAS,EAChD2D,GAAW3C,EAAeA,EAAehB,GAAS,EAIlD4D,EAAa1Y,KAAK2Y,KAAKN,EAAmBxQ,KAAOiN,EAAO0D,GACxDI,EAAa7C,EAAcsC,EAAmBvJ,MAAQgG,EAC5DwD,GAAYO,EAAAA,GAAAA,IAAUjE,EAAGgE,EAAYF,GACrC9D,GAAInM,EAAAA,GAAAA,IAAMmM,EAAGgE,EAAYF,GAEzB,MAAMI,EAAa9Y,KAAK2Y,KAAKN,EAAmBrJ,IAAM8F,EAAQlkB,EAAW6nB,GACnEM,EAAajD,EAAeuC,EAAmBpJ,OAAS6F,EAI9D,OAHAyD,GAAYM,EAAAA,GAAAA,IAAUhE,EAAGkE,EAAYD,GACrCjE,GAAIpM,EAAAA,GAAAA,IAAMoM,EAAGkE,EAAYD,GAElB,CAAC,CAAElE,IAAGC,IAAGC,SAASwD,EAAWC,EACtC,EAEMtP,EAAatG,IAGjB,GAAIsS,EAAcpe,QAEhB,YADAoe,EAAcpe,SAAU,GAGX,YAAX8L,EAAE/E,MACJyX,GAAe,GAEjB,MAAM0B,EAAYvB,EAAa3e,SACzB,EAAEge,EAAC,MAAEC,GAAUiC,EACrB,IAAInC,EAAImC,EAAUnC,EAClB,MAAMoE,EAAOhZ,KAAKiZ,IAAIrE,GAChBsE,EAAOlZ,KAAKiZ,IAAIpE,GAMtB,GAJA0B,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAmC,EAAgB,CAAErC,EAAG,EAAGC,EAAG,EAAGC,MAAO,QACrCZ,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAAClD,EAAGC,EAAGC,GACbiD,GAAI,CAAC,EAAG,EAAG,GACXnS,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,GAAU4J,EAAa,CAChCX,EAAGjJ,EAAM,GACTkJ,EAAGlJ,EAAM,GACTmJ,MAAOnJ,EAAM,QAKnB,GAAImJ,EAAQ,EAAG,CAEb,MAAMqE,EAAKnZ,KAAKoZ,IAAItE,EArQX,GAsQHuE,EAAcF,EAAKrE,EAIzB,IAAIwE,EAAK1E,EAAIyE,GAAelC,EAAevC,EAAIyE,EAAclC,EAAevC,GACxE2E,EAAK1E,EAAIwE,GAAelC,EAAetC,EAAIwE,EAAclC,EAAetC,GAG5E,MAAM2E,EAAI,IAGV,GAAe,UAAX7W,EAAE/E,MAAoBqZ,EAAcnC,QAAUA,EAAO,CAEvD,MAAM2E,EAAKzZ,KAAKiZ,IAAI/B,EAAetC,IAAM0C,KAAKC,MAAQF,GAChDqC,EAAK1Z,KAAKiZ,IAAI/B,EAAerC,IAAMyC,KAAKC,MAAQF,GAGtDiC,GAAMtZ,KAAKiZ,IAAI/B,EAAetC,GAAK6E,EAAKD,EAAIpC,EAASxC,EACrD2E,GAAMvZ,KAAKiZ,IAAI/B,EAAerC,GAAK6E,EAAKF,EAAIpC,EAASvC,CACvD,CAcA,OAZCoC,GAAiBmB,EAA0B,CAAExD,EAAG0E,EAAIzE,EAAG0E,EAAIzE,MAAOqE,GA5RrD,SA6RdjF,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAAClD,EAAGC,EAAGC,GACbiD,GAAI,CAACd,EAAcrC,EAAGqC,EAAcpC,EAAGoC,EAAcnC,OACrDlP,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,GAAU4J,EAAa,CAChCX,EAAGjJ,EAAM,GACTkJ,EAAGlJ,EAAM,GACTmJ,MAAOnJ,EAAM,OAInB,CAMA,GALAsL,EAAgB,CACdrC,IACAC,IACAC,SAEEoE,GAvTgB,GAyTlB,YADAje,IAIF,GAAIie,EAAO,EAYT,YAXAhF,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMjD,EACNkD,GAAI,EACJnS,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,GAAU4J,EAAa,CAChCX,EAAG,EACHC,EAAGlJ,EACHmJ,aAMN,MAAM6C,EAAY/C,EAAI,EAAI,GAAK,EACzBgD,EAAMvD,EAAWsB,EAAiB9e,QAAS+d,EAAI,EAAI,GAAK,GAKxD+E,EAAOvC,EAASxC,EAAI,GAAK,EAAI,OACvB/gB,IAAR+jB,GAAqBoB,GAnVL,IAmVkCrB,IAAcgC,IAIlE/E,IAHgBmB,EAAc/B,IAAc2D,EAI5CjC,EAAiBkC,GACjBvB,EAAqBuB,IAGvB1D,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMlD,EACNmD,GAAI,EACJnS,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,GAAU4J,EAAa,CAChCV,EAAG,EACHD,EAAGjJ,EACHmJ,MAAOA,QAAAA,EAAS,KAElB,EAGEjM,GAAUC,EAAAA,GAAAA,IAAcyL,EAAa1d,QAAS,CAClD+iB,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,0DACzBC,QAlWW,EAmWXC,QApWW,EAqWXC,cAxWkB,EAyWlBlR,UAAYpG,IACV,GAAIuX,GAAqBvX,GAAI,OAC7B,MAAM,EAAEiS,EAAC,EAAEC,EAAC,MAAEC,GAAUU,EAAa3e,QACrC,GAAe,cAAX8L,EAAE/E,OACJyX,GAAe,GACD,IAAVP,IAMN,GADAuC,EAAkBC,KAAKC,MACb,IAAN3C,GAAiB,IAANC,GAAqB,IAAVC,EAAa,CACrC,IAAKN,EAAe3d,QAAS,OAE7B,GADAsc,EAAUqB,EAAe3d,QAAQxG,cAAc,eAC1C8iB,EAAS,OAEd6B,EAAsBne,QAAUsc,EAAQjL,uBAC1C,OAXIvF,EAAEoO,gBAWN,EAEF7H,OAAQA,CAACiR,EAAOC,EAAYve,EAGzBwe,KAAe,IAHY,YAC5BC,EAAW,YACXC,GACD1e,EACC,GAAIoZ,EAAcpe,SAAWqjB,GAAqBC,GAAQ,OAE1D,GAAIhX,EAAAA,IAAgC,eAAtBiX,EAAaxc,KAAuB,CAChD,MAAM,MAAEyK,GAAW+R,EAAgC7R,QAAQ,GAC3D,GAAIF,GAASmS,GAAAA,IAA6BnS,GAAS0N,EAAcyE,GAAAA,GAC/D,MAEJ,CACItG,KACFA,KACAA,QAAkBrgB,GAEpBujB,EAASxC,EAAIsC,EAAetC,EAAI0F,EAChClD,EAASvC,EAAIqC,EAAerC,EAAI0F,EAChCrD,EAAetC,EAAI0F,EACnBpD,EAAerC,EAAI0F,EACnB,MAAME,EAAaza,KAAKiZ,IAAIqB,GACtBI,EAAa1a,KAAKiZ,IAAIsB,IACtB,EAAE3F,EAAC,EAAEC,EAAC,MAAEC,GAAUU,EAAa3e,QASrC,GAHA2gB,IAGc,IAAV1C,GAkBJ,GAAmB,cAAfqF,EAAMvc,KAAV,CACA,GAAImX,EAAkBle,UAAYud,GAAeuG,WAG3C5F,EAAkBle,UAAYud,GAAewG,YAC5C5a,KAAKiZ,IAAIrE,GA/BE,IA+BgB6F,EAAaC,EA9B7B,KA8BqD,CACnE3F,EAAkBle,QAAUud,GAAewG,WAC3ChN,GAAY,GACZ,MAAMiN,EAAQ9E,EAAc/B,GACtBsF,GAAK7Q,EAAAA,GAAAA,IAAM6R,GAAcO,EAAOA,GAatC,OAZAtF,EAAa,CACXX,EAAG0E,EACHzE,EAAG,EACHC,eAKiB,UAAfqF,EAAMvc,MAAoBoC,KAAKiZ,IAAIK,GAAMwB,MAC3C7R,EAAUkR,GACVlF,EAAcpe,SAAU,GAG5B,CAGF,GAAIke,EAAkBle,UAAYud,GAAeuG,UAC5C3a,KAAKiZ,IAAIpE,GArDI,IAqDc6F,EAAaD,EApD3B,IAoDmD,CACnE1F,EAAkBle,QAAUud,GAAeuG,SAC3C,MAAME,EAAQ/E,EACRyD,GAAK9Q,EAAAA,GAAAA,IAAM8R,GAAcM,EAAOA,GACtCtF,EAAa,CACXX,EAAG,EACHC,EAAG0E,EACHzE,UAEiB,UAAfqF,EAAMvc,MAAoBoC,KAAKiZ,IAAIM,GAAMwB,MAC3C9R,EAAUkR,GACVlF,EAAcpe,SAAU,EAE5B,CAxCsC,MAlBtC,CACE,MAAMyiB,EAAKrC,EAAcrC,EAAI0F,EACvBf,EAAKtC,EAAcpC,EAAI0F,EAC7B,GAAI,CAAC,QAAS,aAAaxpB,SAASopB,EAAMvc,MAAO,CAC/C,MAAOmZ,EAAWuB,EAAWC,GAAaH,EAA0B,CAAExD,EAAG0E,EAAIzE,EAAG0E,EAAIzE,SA7Z1E,IAgaV,OAFIuF,GAAYA,GAAY/B,GAAYC,QACxChD,EAAawB,EAEf,CACI,YAAaoD,GAAkC,IAAzBA,EAAM5R,QAAQ/Q,QACtC+d,EAAa,CACXX,EAAG0E,EACHzE,EAAG0E,EACHzE,SAIN,CAyCA,EAEFkG,OAAQA,CAACrY,EAAC/I,KASJ,IATM,KACVqhB,EAAI,WACJC,EAAU,eACVC,EAAc,eACdC,EAAc,YACdd,EAAW,YACXC,EAAW,eACXc,EAAc,eACdC,GACD1hB,EACKsa,IAAiBA,KACrBiH,EAAiBA,GAAkBpF,EAAc,EACjDqF,EAAiBA,GAAkBtF,EAAe,EAClDuF,EAAiBA,GAAkBtF,EAAc,EACjDuF,EAAiBA,GAAkBxF,EAAe,EAGlD,MAAMhB,EAAQmG,QAAAA,GAAQxS,EAAAA,GAAAA,IAAMwO,EAAcnC,MAAQoG,EAAaK,GAAgBC,IACzEnC,EAAcvE,EAAQmC,EAAcnC,MACpC2G,EAAUzb,KAAKiZ,IAAIjZ,KAAKoZ,IAAInC,EAAcrC,EAAG,IAC7C8G,EAAU1b,KAAKiZ,IAAIjZ,KAAKoZ,IAAInC,EAAcpC,EAAG,IAGnDsC,EAAevC,EAAIyG,EACnBlE,EAAetC,EAAIyG,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgBtC,EAAcsC,EAC9CG,EAAgBF,EAAgBvC,EAAcuC,GAE7C7E,GAAaqB,EAA0B,CAC5CxD,EAAGqC,EAAcrC,EAAIiH,EAAevB,EACpCzF,EAAGoC,EAAcpC,EAAIiH,EAAevB,EACpCzF,UAGFS,EAAawB,EAAU,EAEzBva,QAAQmG,GACN0S,GAAe,GACf,MAAO0G,EAAeC,GAAgB9D,EAAmBvV,GACzD,GAAIoZ,EAAJ,CAGE,GAFApZ,EAAEoO,iBACFpO,EAAEC,kBACEZ,EAAAA,GAAc,OACbga,GAAc/gB,GAErB,MAC4B,IAAxBgc,EAAcnC,OAAe9S,EAAAA,KAC7ByU,GAAuBwF,GAAsBtZ,EAAEwV,OAAuB,iBACxEld,GAEJ,EACAqW,cAAc3O,EAACuZ,GAGZ,IAHc,QACf1D,EAAO,QACPC,GACDyD,EACC,MAAOH,GAAiB7D,EAAmBvV,GAC3C,GAAIoZ,EAGF,OAFApZ,EAAEoO,sBACFpO,EAAEC,kBAGJ,IAAKZ,EAAAA,IAA2B,UAAXW,EAAE/E,KAAkB,OACzC,MAAM,EAAEgX,EAAC,EAAEC,EAAC,MAAEC,GAAUU,EAAa3e,QAIrC,GAAc,IAAVie,EAAa,CACf,GAAU,IAANF,GAAiB,IAANC,EAAS,OACxBoC,EAAgBmB,EAA0B,CACxCxD,EALkB4D,EA7hBN,EA6hBkCA,EAM9C3D,EALkB4D,EA9hBN,EA8hBkCA,EAM9C3D,MApiBY,IAqiBX,EACL,MACEmC,EAAgB,CACdrC,EAAG,EACHC,EAAG,EACHC,MAAO,GAGXZ,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAAClD,EAAGC,EAAGC,GACbiD,GAAI,CAACd,EAAcrC,EAAGqC,EAAcpC,EAAGoC,EAAcnC,OACrDlP,SAAUqO,GACV+D,OAAQnE,GACRoE,SAAWtM,IACT,MAAMoL,EAAY,CAChBnC,EAAGjJ,EAAM,GACTkJ,EAAGlJ,EAAM,GACTmJ,MAAOnJ,EAAM,IAEf4J,EAAawB,EAAU,GAG7B,EACA9N,cAGF,OADA3Z,SAASiT,iBAAiB,UAAWuO,GAAe,GAC7C,KACLjI,IACAvZ,SAASkT,oBAAoB,UAAWsO,GAAe,EAAM,CAC9D,GAEH,CACE7V,EACAsa,EACAlB,EACA0B,EACAD,EACAY,EACAD,EACAJ,EACAG,EACAD,EACA5D,EACA0C,EACAzH,EACA9L,EACA+H,EACA2L,EACAE,EACAC,KAGF7d,EAAAA,EAAAA,KAAU,KACR,MAAMmH,EAAa3F,IACb6iB,OAA+CtoB,IAA9BqhB,EAAkBre,SACpCqe,EAAkBre,UAAYoI,EACnC,IAAKsV,EAAa1d,UAAYslB,GAAkBra,GAAY+H,EAAc,OAC1EqL,EAAkBre,QAAUoI,EAC5B,MAAM,MAAE6V,GAAUU,EAAa3e,QACzBgM,EAAM5D,EAAa,GAAK,EAAI,EAGlC,IAAImd,EAAQ,IACRC,EAAY,EACZvH,GAJYyG,IAIQ1Y,EAAM,GAC1BiS,GAJY0G,IAIQ3Y,EAAM,IAChB,IAAViS,GAAejS,EAAM,IAAGuZ,EAAQ,IAChCjI,IAAqBA,KACzBA,IAAsB0D,EAAAA,GAAAA,IAAc,CAClCC,KAAMjV,EACNkV,GAAIlV,EAAMuZ,EACVxW,SAAUqO,GACV+D,OAAQlE,GACRmE,SAAWtM,IACT,IAAK4I,EAAa1d,QAAS,OAC3B,MAAMylB,GAAQhd,EAAAA,GAAAA,IAAMqM,EAAQ0Q,EAAW,GACvCA,EAAY1Q,EAEZ,MAAM4Q,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEXnI,EAAa1d,QAAQ8lB,cAAcJ,EAAW,IAEhD,GACD,CAACjjB,EAAewI,EAAU+H,EAAc2L,SAErB3hB,IAAlBgiB,EAA6B,OAEjC,MAAM+G,EAAcvI,EAAWwB,EAAe,GACxCgH,GAAcxI,EAAWwB,GAAgB,GACzCiH,QAA0BjpB,IAAhBgpB,GACVE,QAA0BlpB,IAAhB+oB,EACV/J,GAAWuC,GAAeQ,EAEhC,OACE5Z,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoB2E,IAAKyT,GACtCvY,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmB2E,IAAK2T,GACpCqI,KAAYlH,IAAaI,GACxBha,EAAAA,GAAAA,cAACghB,GACCzL,GAAA,GACI+C,EAAI,CACR3B,cAAeA,EACfE,SAAUA,GACVrf,QAASqpB,OAIf7gB,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,mBACA,2BACAmQ,IAAY,4BAEdrW,QAASma,EACT7V,IAAK0T,GAELxY,EAAAA,GAAAA,cAACghB,GACCzL,GAAA,GACI+C,EAAI,CACR9gB,QAASqiB,EACTlD,cAAeA,EACf3M,SAAUA,EACV6M,SAAUA,OAGd7W,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmB2E,IAAK4T,GACpCqI,KAAYnH,IAAaI,GACxBha,EAAAA,GAAAA,cAACghB,GACCzL,GAAA,GACI+C,EAAI,CACR3B,cAAeA,EACfE,SAAUA,GACVrf,QAASopB,MAIdE,KAAYlH,IAAa5T,EAAAA,IACxBhG,EAAAA,GAAAA,cAAA,UACE4B,KAAK,SACLzB,UAAY,mBAAkBpH,IAAYE,GAAS,WACnD,aAAY6G,EAAK,oBACjB+G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IAG7BkpB,KAAYnH,IAAa5T,EAAAA,IACxBhG,EAAAA,GAAAA,cAAA,UACE4B,KAAK,SACLzB,UAAY,mBAAkBpH,IAAYE,GAAS,WACnD,aAAY6G,EAAK,QACjB+G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IAG1B,IAMV,SAASmjB,KAA2C,IAAzBpC,EAACrd,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,EAAGsd,EAACtd,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,EAAGud,EAAKvd,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,EAC/C,MAAQ,eAAcqd,EAAEsI,QAAQ,SAASrI,EAAEqI,QAAQ,oBAAoBpI,EAAMoI,QAAQ,KACvF,CAEA,SAASjB,GAAsB7qB,EAAsB+rB,GACnD,QAAK/rB,MACDA,EAAQgsB,QAAQD,IACbroB,QAAQ1D,EAAQP,QAAQssB,IACjC,CAEA,SAASjD,GAAqBvX,GAC5B,MAAMwV,EAASxV,EAAEwV,OACjB,QAAI8D,GAAsB9D,EAAQ,0BAC5B8D,GACF9D,EACA,gGAIFxV,EAAEoO,kBAFO,EAMb,C,gBCpvBA,MA8DA,IAAerX,EAAAA,EAAAA,KACb,CAACC,EAAM+B,KAAkD,IAAhD,OAAEtB,EAAM,UAAEgL,EAAS,SAAEiY,GAAU3hB,EACtC,GAAI2hB,GAAYjjB,EACd,MAAO,CACLkjB,QAAQhjB,EAAAA,EAAAA,IAASF,IAAUI,EAAAA,EAAAA,IAAWb,EAAQS,IAAUD,EAAAA,EAAAA,IAAWR,EAAQS,IAI/E,IAAKgL,IAAchL,EACjB,MAAO,CAAC,EAGV,MAAM1I,GAAU6gB,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQgL,GAElD,MAAO,CACL1T,UACA4rB,OAAQ5rB,IAAW6rB,EAAAA,EAAAA,IAAa5jB,EAAQjI,GACzC,GAjBL,EA5D8C6B,IAOxC,IAPyC,OAC7C6G,EAAM,UACNgL,EAAS,OACTkY,EAAM,iBACNE,EAAgB,SAChBH,EAAQ,QACR3rB,GACD6B,EACC,MAAM,iBACJkqB,EAAgB,aAChBC,EAAY,eACZC,IACEviB,EAAAA,EAAAA,OAEE,SAAEoD,IAAaC,EAAAA,EAAAA,MAEfmf,GAAqBtiB,EAAAA,EAAAA,KAAY,KACrCmiB,IAEKrjB,GAAWgL,IAEZ5G,EACFnG,YAAW,KACTslB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAEtjB,SAAQgL,aAAY,GA1BhB,KA6BrBsY,EAAa,CAAEtjB,SAAQgL,cACzB,GACC,CAAChL,EAAQoE,EAAUkf,EAAcC,EAAgBvY,EAAWqY,IAEzD3hB,GAAOC,EAAAA,EAAAA,KAEb,IAAKuhB,IAAY5rB,IAAY2rB,EAC3B,OAGF,MAAMU,GAAcC,EAAAA,EAAAA,IAAeliB,EAAMwhB,GAEzC,OACEthB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAaK,QAASohB,IAClCtjB,EAAAA,EAAAA,IAASgjB,EAAOxsB,IACfkL,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAC1d,IAAK+c,EAAOxsB,GAAImH,KAAK,SAASimB,KAAMZ,IAE5CthB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAC1d,IAAK+c,EAAOxsB,GAAImH,KAAK,SAASiC,KAAMojB,IAE9CthB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QAAQ0G,IAAI,QACxBkb,IAAethB,EAAAA,GAAAA,GAAWshB,IAE7B/hB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,OAAO0G,IAAI,QACvBwa,EACGvhB,EAAK0hB,EAAmB,qCAAuC,gCAC/DW,EAAAA,GAAAA,IAAoBriB,EAAsB,IAAhBpK,EAAS0sB,MAAa,KAGpD,ICjBJnK,GAAqB,IA8T3B,IAAexa,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,YAAE2Y,EAAW,4BAAE+L,IAAgChM,EAAAA,EAAAA,IAAe1Y,IAC9D,OACJS,EAAM,SACNN,EAAQ,QACRtG,EAAO,cACPqK,EAAa,OACbzO,EAAM,SACN0S,GACEwQ,EACEK,GAAgB2L,EAAAA,EAAAA,IAA+B3kB,EAAQ,0BAEvD,cAAE4kB,GAAkB5kB,EAC1B,IAuDIjI,EAWA8sB,EAOAC,EAzEAC,IAAmBtkB,IAAUukB,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAE9D,GAAIhL,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAMiK,IAAU5G,EACd,MAAO,CAAEmf,gBAAe0L,+BAG1B,MAAM3sB,GAAU6gB,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQ5G,GAClD,OAAK9B,EAIE,CACL0I,SACA5G,UACAgf,SAAU9gB,EAAQ8gB,SAClBkM,iBACAtvB,SACAsC,UACAihB,gBACA7Q,WACAuc,+BAZO,CAAE1L,gBAAe0L,8BAc5B,CAEA,GAAIxgB,EAAe,CACjB,MAAMqgB,GAAO1jB,EAAAA,EAAAA,IAAWb,EAAQkE,GAC1B3D,GAAOC,EAAAA,EAAAA,IAAWR,EAAQkE,GAChC,IAAIf,GAAiB,EASrB,OARIohB,EACFphB,EAAiBe,IAAkB0gB,EAC1BrkB,IACT4C,GAAiB8hB,EAAAA,EAAAA,IAAY1kB,IAG/BwkB,GAAiBC,EAAAA,EAAAA,IAAqBhlB,EAAQkE,GAEvC,CACLrK,UACAgf,SAAU3U,EACVpK,YAAayqB,GAAQhkB,EACrB2kB,yBAA0BX,GAAOY,EAAAA,EAAAA,IAAmBnlB,EAAQkE,IAAgBkhB,mBAAgBlrB,EAC5F6qB,iBACA5hB,iBACA6V,gBACAvjB,SACAivB,8BACAvc,WAEJ,CAEA,KAAM1H,GAAUN,GAAYtG,GAC1B,MAAO,CAAEmf,gBAAe0L,+BAU1B,GALE3sB,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjFqjB,EAAAA,EAAAA,IAAuB9Y,EAAQS,EAAQ5G,IAEvC+e,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQ5G,IAGzC9B,EACH,MAAO,CAAEihB,gBAAe0L,+BAY1B,GANEG,EADEpvB,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IAC5E4vB,EAAAA,EAAAA,IAA4BrlB,EAAQS,IAEpC6kB,EAAAA,EAAAA,IAAmBtlB,EAAQS,GAIxChL,IAAWe,EAAAA,GAAAA,QACVf,IAAWe,EAAAA,GAAAA,MACdsuB,GAAgBS,EAAAA,EAAAA,IAA8BvlB,EAAQS,EAAQN,EAAUpI,EAAQZ,MAC3EquB,EAAAA,EAAAA,IAAgBxlB,EAAQS,EAAQN,QAChC,GAAI1K,IAAWe,EAAAA,GAAAA,YAA+B,CACnD,MAAMivB,GAAgBC,EAAAA,EAAAA,IAAyB1lB,IACzC,SAAE2lB,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,CAAC,EAC7Gf,EAAgBa,CAClB,CAEA,MAAO,CACLllB,SACAN,WACAtG,UACAgf,SAAU9gB,EAAQ8gB,SAClBkM,iBACAtvB,SACAsC,UACA8sB,eACAC,gBACA9L,gBACA7Q,WACAuc,8BACD,GAhHe3kB,EA5TgBnG,IAgB9B,IAhB+B,OACnC6G,EAAM,SACNN,EAAQ,QACRtG,EAAO,SACPgf,EAAQ,eACRkM,EAAc,eACd5hB,EAAc,OACd1N,EAAM,YACNqE,EAAW,yBACXorB,EAAwB,QACxBntB,EAAO,aACP8sB,EAAY,cACZC,EAAa,cACb9L,EAAa,SACb7Q,EAAQ,4BACRuc,GACD9qB,EACC,MAAM,gBACJksB,EAAe,iBACfhC,EAAgB,gBAChBiC,EAAe,aACfhC,GAAY,eACZC,KACEviB,EAAAA,EAAAA,MAEEN,GAAShG,QAAQrB,GAAeD,IAChC,SAAEgL,KAAaC,EAAAA,EAAAA,MAGfkhB,IAAejpB,EAAAA,EAAAA,MACfkpB,IAAeC,EAAAA,EAAAA,GAAgCrN,GAC/CsN,GAAkBnN,EAAgB,YAAc,OAChDoN,GAAmBjrB,QAAQ6d,IAAkB0L,IAG5C2B,GAAmBC,GAAiBC,KAAoB3hB,EAAAA,EAAAA,MAEzD,aACJtK,GAAY,aACZE,GAAY,QACZY,GAAO,YACPjB,GAAW,QACXkB,GAAO,cACPsB,GAAa,SACbmC,GAAQ,WACRK,GAAU,MACV7D,GAAK,kBACLC,GAAiB,YACjBmE,GAAW,SACXV,IACErF,EAAc,CAChB5B,UAAS+B,cAAaD,UAASpE,SAAQsE,MAAOqsB,IAAoB9L,KAG9DnW,KAAczE,KAAgBqlB,EAC9B3T,IAAajJ,GAAYhH,GAGzBqlB,GAAgBlsB,IAAgBE,IAAgBL,GAAcN,OAAUK,EAExEusB,IAAW/qB,EAAAA,EAAAA,KAAQ,IACnB8qB,GACK,CAACA,IACC1sB,EACFA,EAAYmB,QAAQ6G,KAAI,CAAC4kB,EAAGC,IAAMA,KAAM,IAExCC,EAAAA,EAAAA,IAAuB/B,GAAgB,CAAC,EAAGC,GAAiB,GAAIvpB,KAExE,CAACirB,GAAe1sB,EAAa+qB,EAAcC,EAAevpB,KAEvDsrB,GAAqBhtB,EAAU4sB,GAASK,QAAQjtB,IAAY,GAE9DsH,IAAY8kB,IAAgBA,KAAiBpN,GAAamN,GAAa9oB,UACzE8oB,GAAa9oB,QAAU2pB,IAGzB,MAAOE,IpBxIAruB,GoB0IPyF,EAAAA,EAAAA,KAAU,KACR,IAAKgD,IAAU4lB,KACb,QAGFC,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,KACLD,KACAE,EAAAA,EAAAA,KAAuB,CACxB,GACA,CAAChmB,GAAQ4lB,MAEZ5oB,EAAAA,EAAAA,KAAU,KACJiT,IACFlY,GACF,GACC,CAACkY,MAEJjT,EAAAA,EAAAA,KAAU,KACJ0G,IACFlP,SAAS2b,KAAKzb,UAAUuxB,OAAO,uBAAwBjmB,IAGrDkH,EAAAA,IACF1S,SAAS2b,KAAKzb,UAAUuxB,OAAO,eAAgBjmB,GACjD,GACC,CAAC0D,GAAU1D,KAGd,MAAMkmB,IAAYtqB,EAAAA,EAAAA,IAAuB,OACzCuqB,EAAAA,EAAAA,GAAgBD,IAEhB,MAAMrpB,IAAcC,EAAAA,EAAAA,MACpBE,EAAAA,EAAAA,KAAU,KACR,MAAMopB,EAAM9oB,OAAO+oB,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAI3e,iBACb2e,EAAI3e,iBAAiB,SAAU5K,IACK,mBAApBupB,EAAIG,aACpBH,EAAIG,YAAY1pB,IAGX,KACkC,mBAA5BupB,EAAI1e,oBACb0e,EAAI1e,oBAAoB,SAAU7K,IACK,mBAAvBupB,EAAII,gBACpBJ,EAAII,eAAe3pB,GACrB,CACD,GACA,CAACA,KAEJ,MAAM4pB,IAAc1B,EAAAA,EAAAA,GAAoCnuB,GAClD8vB,IAAe3B,EAAAA,EAAAA,GAAiC/d,GAChD2f,IAAa5B,EAAAA,EAAAA,GAAYzwB,GACzBytB,IAAcgD,EAAAA,EAAAA,GAAYrsB,GAC1BkuB,IAAkB7B,EAAAA,EAAAA,GAA2CpsB,GAC7DkuB,IAAoB9B,EAAAA,EAAAA,GAAYvpB,IAChC4c,GAAYxhB,GAAU2hB,EAAAA,EAAAA,GAAkB3hB,QAAWmC,EACnDyf,GAAYxe,QAAQoe,IACpB0O,GAAuBJ,IAAgB3E,KAAgBrpB,GAE7DsE,EAAAA,EAAAA,KAAU,MACJioB,KAAoBjlB,IAAYymB,KAAeK,IAA0BF,MAC3EG,EAAAA,EAAAA,IAA4B5N,GAAqB6N,EAAAA,KrBvMhD,SACLxO,EACAlkB,EACAkH,EACAwC,EACA/D,EACArD,GAEA,MAAQO,QAAS8vB,GAActwB,EAASrC,EAAQsC,GAChD,IAAKqwB,EACH,OAGF,MAAQjrB,MAAOif,GAAgBiM,EAAAA,EAAAA,OAE7BlrB,MAAOmrB,EAAgB9qB,OAAQ+qB,IAC7BC,EAAAA,EAAAA,IAAkC7O,EAAWve,IACzC+B,MAAOsrB,EAASjrB,OAAQkrB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiBppB,EAAWhC,MAAOgC,EAAW3B,QAE1DorB,GAAUxM,EAAcqM,GAAW,EACnCI,EA2OR,SAAsBlP,GACpB,MAAM4N,EAAM9oB,OAAO+oB,WAAWC,EAAAA,IAC9B,IAAIqB,EAAe,MAKnB,OAJInP,IAActR,EAAAA,KAChBygB,GAAgBvB,EAAI9D,QAAU,KAAQ,OAGjCqF,EAAergB,EAAAA,EACxB,CAnPgBsgB,CAAapP,IAAc4O,EAAkBG,GAAY,EAEvE,IACErT,IAAK2T,EAAS9a,KAAM+a,EAAU9rB,MAAO+rB,EAAW1rB,OAAQ2rB,GACtDf,EAAU7Z,wBAEd,GAAI,CACF/X,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,GAAS,CAClB,MAAM2zB,EA8LV,SAAiBC,EAAmBC,EAAoBjU,EAAanH,EAAc/Q,EAAeK,GAChG,GAAI6rB,IAAcC,EAAY,CAC5B,MAAMhrB,EAAO+H,KAAK2Y,IAAI7hB,EAAOK,IAAW6rB,EAAYC,GACpDpb,IAAS5P,EAAOnB,GAAS,EACzBkY,IAAQ/W,EAAOd,GAAU,EACzBL,EAAQmB,EACRd,EAASc,CACX,MAAO,GAAI+qB,EAAYC,EAAY,CACjC,MAAMC,EAAWpsB,EAEjB+Q,KADA/Q,EAAQK,GAAU6rB,EAAYC,IACbC,GAAY,CAC/B,MAAO,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYhsB,EAElB6X,KADA7X,EAASL,GAASmsB,EAAaD,IACdG,GAAa,CAChC,CAEA,MAAO,CACLnU,MAAKnH,OAAM/Q,QAAOK,SAEtB,CAlNsBisB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAU/T,IACpB4T,EAAWG,EAAUlb,KACrBgb,EAAYE,EAAUjsB,MACtBgsB,EAAaC,EAAU5rB,MACzB,CAEA,MAAMksB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhCtd,EAAAA,EAAAA,KAAgB,KACd,MAAM1V,EAAQH,EAAYoH,GAAiByrB,GAC3C5wB,EAAY9B,EAAO,CACjB2f,IAAM,GAAEwT,MACR3a,KAAO,GAAE0a,MACTzrB,MAAQ,GAAEsrB,MACVjrB,OAAS,GAAEkrB,MACXtL,UAAY,eAAcsM,QAAqBC,iBAA8BC,MAAeC,OAE9FtxB,EAAW7C,EAAOD,GAElBE,SAAS2b,KAAK/a,YAAYb,GAC1BC,SAAS2b,KAAKzb,UAAUC,IAAI,oBAE5BsV,EAAAA,EAAAA,KAAgB,KACd1V,EAAMmC,MAAMulB,UAAY,GAqS9B,SAAoB1nB,GACjBA,EAAM8C,WAA2BX,MAAMY,UAAY,UACpD/C,EAAMG,UAAU0b,OAAO,kBAAmB,SAC5C,CAvSMuY,CAAWp0B,GAEXgJ,YAAW,MACT0M,EAAAA,EAAAA,KAAgB,KACVzV,SAAS2b,KAAKyY,SAASr0B,IACzBC,SAAS2b,KAAK0Y,YAAYt0B,GAE5BC,SAAS2b,KAAKzb,UAAU0b,OAAO,kBAAkB,GACjD,GAvEiB,IAwEG4W,EAAAA,IAAoB,GAC5C,GAEN,CqB+HM8B,CAAetQ,GAAWlkB,EAASkH,GAAgBwC,GAAa/D,GAASrD,IAGvEquB,KAAqBjlB,KAAWymB,IAAeG,OACjDG,EAAAA,EAAAA,IAA4B5N,GAAqB6N,EAAAA,KrBjIhD,SAAwB1yB,EAA2BkH,EAAuB5E,GAC/E,MAAM,UAAElB,EAAWyB,QAAS4xB,GAAYpyB,EAASrC,EAAQsC,GACzD,IAAKmyB,EACH,OAGF,MAAM9B,EAAYzyB,SAASw0B,eAAe,eAAgBzzB,cACxD,kEAEF,IAAK0xB,IAAc8B,EACjB,OAGF,MACE7U,IAAK2T,EAAS9a,KAAM+a,EAAU9rB,MAAO+rB,EAAW1rB,OAAQ2rB,GACtDf,EAAU7Z,yBAEZ8G,IAAK+U,EAAWlc,KAAM0a,EAAQzrB,MAAOsrB,EAASjrB,OAAQkrB,GACpDwB,EAAQ3b,wBAEZ,IAAIsa,EAAQuB,EACZ,KAAKC,EAAAA,EAAAA,GAAoBxzB,GAAY,CACnC,MAAQ2G,OAAQ2e,GAAiBkM,EAAAA,EAAAA,MACjCQ,EAAQuB,EAAYpB,GAAWN,EAAWvM,CAC5C,CAEA,MAAMuN,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM4B,EACJ,CAAC9zB,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAAS3B,KACnEmB,EAA2BC,EAAWqzB,IAE1C,CAAC1zB,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAAS3B,KACjEmB,EAA2BC,EAAWqzB,GAGxC,CACF1zB,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,KACLm0B,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMW,EAAgB50B,SAAS60B,uBAAuB,SAAS,GACzD90B,EAAQ60B,GAAiBh1B,EAAYoH,GAAiButB,EAASz0B,GAErE,IAAIiC,EACJ,GAAI6yB,EAAe,CACjB,MAAM,IACJlV,EAAG,KAAEnH,EAAI,MAAE/Q,EAAK,OAAEK,GAChB+sB,EAAchc,wBAIlB7W,EAAS,CACP+yB,WAAY,OACZpV,IAAM,GAAEwT,MACR3a,KAAO,GAAE0a,MACT8B,gBAAiB,WACjBtN,UAAY,eAAclP,EAAO0a,QAAavT,EAAMwT,iBARvC1rB,EAAQsrB,MACRjrB,EAASkrB,KAQtBvrB,MAAQ,GAAEsrB,MACVjrB,OAAS,GAAEkrB,MAEf,MACEhxB,EAAS,CACP2d,IAAM,GAAEwT,MACR3a,KAAO,GAAE0a,MACTzrB,MAAQ,GAAEsrB,MACVjrB,OAAS,GAAEkrB,MACXtL,UAAY,eAAcsM,QAAqBC,iBAA8BC,MAAeC,OAIhGze,EAAAA,EAAAA,KAAgB,KACd5T,EAAY9B,EAAOgC,GACd6yB,GAAe50B,SAAS2b,KAAK/a,YAAYb,GAC9CC,SAAS2b,KAAKzb,UAAUC,IAAI,oBAE5BsV,EAAAA,EAAAA,KAAgB,KACVmf,IACFA,EAAc1yB,MAAM4yB,WAAa,IAGnC/0B,EAAMmC,MAAMulB,UAAY,GAEpBkN,IACF50B,EAAMmC,MAAM8yB,QAAU,KAGxBpyB,EAAW7C,EAAOD,GAElBiJ,YAAW,MACT0M,EAAAA,EAAAA,KAAgB,KACVzV,SAAS2b,KAAKyY,SAASr0B,IACzBC,SAAS2b,KAAK0Y,YAAYt0B,GAE5BC,SAAS2b,KAAKzb,UAAU0b,OAAO,kBAAkB,GACjD,GAvLiB,IAwLG4W,EAAAA,IAAoB,GAC5C,GAEN,CqBoBMyC,CAAe9C,GAAaE,GAAoBJ,SAAe1tB,GACjE,GACC,CACDksB,GAAkBjlB,GAAQ8mB,GAAsBxyB,EAAQqyB,GAAY/vB,EAAS6vB,GAAaG,GAC1FprB,GAAeqrB,GAAmB7oB,GAAY/D,GAASue,KAGzD,MAAMkR,IAAclpB,EAAAA,EAAAA,KAAY,IAAMmiB,KAAoB,CAACA,IAErDgH,IAAaC,EAAAA,EAAAA,GAAYlxB,GACzBmxB,IAAoBrpB,EAAAA,EAAAA,KAAY,KACpCkpB,KAEA,MAAMI,EAAiBH,GAAW5tB,QAE7BuD,GAAWwqB,IAEZpmB,GACFnG,YAAW,KACTslB,GAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,GAAa,CAAEtjB,SAAQN,WAAUsL,UAAWwf,GAAiB,GAC5D3Q,IAEHyJ,GAAa,CAAEtjB,SAAQN,WAAUsL,UAAWwf,IAC9C,GACC,CAACJ,GAAaC,GAAYrqB,EAAQoE,GAAU1E,IAEzC+qB,IAAgBvpB,EAAAA,EAAAA,KAAY,KAChCokB,EAAgB,CACdoF,WAAY1qB,EACZmB,WAAY,CAAC/H,IACb,GACD,CAACksB,EAAiBtlB,EAAQ5G,IAEvBuK,IAAczC,EAAAA,EAAAA,KAAaxK,IAC/B2uB,EAAgB,CACdrlB,SACAN,WACAtG,QAAS1C,EACT+M,cAAepK,GAAa3C,GAC5B1B,OAAQA,GACP,CACD21B,uBAAuB,GACvB,GACD,CAACtxB,GAAa3C,GAAIsJ,EAAQqlB,EAAiBrwB,EAAQ0K,KAEtDhC,EAAAA,EAAAA,KAAU,IAAOgD,IAASkqB,EAAAA,EAAAA,IAAsB,KAC9CR,IAAa,SACV3wB,GAAY,CAAC2wB,GAAa1pB,MAE/BhD,EAAAA,EAAAA,KAAU,KACJ/C,KAAYE,KACdgwB,EAAAA,EAAAA,KACF,GACC,CAAChwB,GAAOF,KAEX,MAAMmwB,IAAcR,EAAAA,EAAAA,GAAYtE,IAE1B/L,IAAa/Y,EAAAA,EAAAA,KAAY,CAAC6pB,EAAiBxN,KAC/C,QAAe9jB,IAAXsxB,EAAsB,OAC1B,MAAMC,EAAOF,GAAYruB,QACnBoN,EAAQmhB,EAAK3E,QAAQ0E,GAC3B,OAAoB,IAAfxN,GAAoB1T,EAAQ,GAAqB,IAAd0T,GAAmB1T,EAAQmhB,EAAK5tB,OAAS,EACxE4tB,EAAKnhB,EAAQ0T,QADtB,CAGgB,GACf,CAACuN,KAEEG,IAAqB/pB,EAAAA,EAAAA,KAAY,KACrC,GAAI8kB,GAAS5oB,QAAU,EAErB,YADAgtB,KAGF,IAAIvgB,EAAQzQ,EAAU4sB,GAASK,QAAQjtB,IAAY,EAEnDyQ,EAAQA,EAAQ,EAAIA,EAAQ,EAAI,EAChClG,GAAYqiB,GAASnc,GAAO,GAC3B,CAACugB,GAAahxB,EAAS4sB,GAAUriB,KAE9BjC,IAAOC,EAAAA,EAAAA,KAoBb,OACEC,EAAAA,GAAAA,cAACqN,EAAAA,EAAc,CACbvY,GAAG,cACHgK,OAAQA,GACRgH,SAAUA,EACVwjB,0BAAwB,EACxBC,kBAAmBlH,GAEnBriB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoB0G,IAAK/G,GAAKmhB,MAAQ,WAAQppB,EAAWiN,IAAKkgB,IAC1ExiB,IACCxC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,qBACVmD,OAAK,EACLrH,KAAK,UACLqE,MAAM,oBACNiD,UAAWzD,GAAK,SAChBU,QAASgoB,IAETxoB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CAACC,UAAW9F,GAAa9oB,QAAUuN,KAAM0b,IAtCjDrsB,EACLuI,EAAAA,GAAAA,cAAC0pB,GAAU,CACTnlB,IAAK/M,EACL4G,OAAQ3G,EAAY3C,GACpBusB,UAAQ,EACRG,kBAAkBljB,EAAAA,EAAAA,IAAS7G,EAAY3C,KACjC2C,EAAwBmB,SAASpB,GAAU1C,KAAO+tB,GAA0B/tB,KAGpFkL,EAAAA,GAAAA,cAAC0pB,GAAU,CACTnlB,IAAK/M,EACL4G,OAAQA,EACRgL,UAAW5R,KA6BXwI,EAAAA,GAAAA,cAAC2pB,GAAkB,CACjB5vB,UAAW0C,GACX1D,QAASA,GACTrD,QAASA,EACToL,eAAgBA,EAChBzD,YAAaA,GACb5F,YAAaA,EACbkF,SAAUA,GACVmF,UAAWA,GACXC,YAAaA,GACbG,eAAgBmnB,GAChBrnB,SAAUiiB,GACVhiB,mBAAoBumB,GACpBrmB,UAAW0mB,KAEb7oB,EAAAA,GAAAA,cAAC4pB,EAAAA,EAAW,CACV9qB,OAAQklB,GACR/kB,QAASilB,GACT2F,QAAQ,QACRlyB,MAAO0F,GACPe,OAAQ3G,GAAa3C,MAGzBkL,EAAAA,GAAAA,cAAC8pB,GAAiB,CAChBtyB,QAASA,EACT6gB,WAAYA,GACZja,OAAQA,EACRpF,QAASA,GACTC,MAAOA,GACP6E,SAAUA,EACV+D,cAAepK,GAAa3C,GAC5B1B,OAAQA,EACR0L,OAAQA,GACRwY,UAAWA,GACXve,QAASA,GACT4d,cAAeA,EACf1X,QAASupB,GACTzmB,YAAaA,GACb+D,SAAUA,EACV8Q,cAAe+R,KAEF,K,sICzVrB,MAEMoB,GAAkB,KAAO3jB,EAAAA,GAuO/B,IAAe3I,EAAAA,EAAAA,KArOwBlG,IAYjC,IAZkC,OACtCuH,EAAM,cACNyjB,EAAa,cACbyH,EAAa,UACbC,EAAS,OACTC,EAAM,kBACNC,EAAiB,SACjBC,EAAQ,eACRC,EAAc,mBACdC,EAAkB,QAClBrrB,EAAO,oBACPsrB,GACDhzB,EACC,MAAM,WAAEizB,IAAeprB,EAAAA,EAAAA,MAEjBU,GAAOC,EAAAA,EAAAA,KAEPwY,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtC+vB,GAAoB/vB,EAAAA,EAAAA,IAAuB,MAE3CgwB,GAAYhwB,EAAAA,EAAAA,IAAyB,MAErCiwB,GAAiBjwB,EAAAA,EAAAA,IAAyB,OACzCkwB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBV,EAAUJ,EAAelxB,QAAQoxB,KAC3Ea,EAASC,IAAcplB,EAAAA,EAAAA,SAA6B/N,IACpDozB,EAAaC,IAAkBtlB,EAAAA,EAAAA,IAAiB,IACjD6jB,EAAYsB,EA9BK,EADD,EAgChBI,EAAiBnB,EAAevF,QAAQmG,EAAa,IAErDQ,GAAc9rB,EAAAA,EAAAA,KAAY,KAC9B+qB,EAAe,GAAG,GACjB,CAACA,KACJgB,EAAAA,GAAAA,GAAoBX,EAAW5rB,GArCT,IAqCmB2qB,EAA+B2B,IACxEC,EAAAA,GAAAA,GAAoBV,EAAgB7rB,GArCb,IAqCuB2qB,GAE9C,MAAO6B,EAAUC,IAAUlyB,EAAAA,EAAAA,KAAQ,KACjC,MAAMmyB,EAAeT,EAAUd,IAAYc,GAASQ,YAAS1zB,EAC7D,IAAK2zB,EACH,MAAO,MAAC3zB,OAAWA,GAGrB,MAAM4zB,EAAcR,EAAYS,cAE1BniB,EAASiiB,EACXl2B,OAAOq2B,OAAOH,GAAcI,QAAO,CAACC,EAAKC,OAEvCC,EAAAA,EAAAA,IAAiB9B,EAAWc,GAAWe,EAAMh3B,KACxC22B,IAAeK,EAAM1rB,MAAMsrB,cAAc32B,SAAS02B,KAEvDI,EAAIC,EAAMh3B,IAAMg3B,GAGXD,IACN,CAAC,GACFL,EAEJ,MAAO,CAACl2B,OAAO02B,KAAKziB,GAAQ9J,IAAImV,QAASrL,EAAO,GAC/C,CAAC0gB,EAAWc,EAASE,IAElBgB,GAAwB3sB,EAAAA,EAAAA,KAAY,KACxC0rB,OAAWnzB,GACXqzB,EAAe,GAAG,GACjB,IAEGgB,GAAqB5sB,EAAAA,EAAAA,KAAaqH,IACtC0jB,EAAe1jB,EAAEqN,cAAcrE,MAAM,GACpC,CAAC0a,IAEE8B,GAA0B7sB,EAAAA,EAAAA,KAAaqH,IAC3CukB,EAAevkB,EAAEqN,cAAcrE,MAAM,GACpC,IAEGmF,GAAgBsX,EAAAA,GAAAA,GAA0B7T,EAAczZ,GAASmJ,IACrE,GAAI2iB,GAAeA,EAAYpvB,OAAS,EAAG,CACzC,MAAM4C,EAASwsB,GAAuB,IAAX3iB,EAAe,EAAIA,GACxC/J,EAAO+rB,IAAY7rB,GACrBF,GAAMmuB,SACHnuB,EAAKqtB,QAAQf,EAAW,CAAEpsB,WAC/B4sB,EAAW5sB,IAEXksB,EAAmBlsB,EAEvB,IACC,oBAAoB,GAEjBkuB,GAAqBF,EAAAA,GAAAA,GAA0B3B,EAAmB3rB,GAASmJ,IAC3EqjB,GAAU9vB,QACZ8uB,EAAmBS,EAAUO,GAAoB,IAAXrjB,EAAe,EAAIA,GAC3D,GACC,oBAAoB,GAEjB4L,GAAcvU,EAAAA,EAAAA,KAAY,CAACqH,EAAqBvI,KACpD,MAAMF,EAAO+rB,IAAY7rB,GACrBF,GAAMmuB,SACHnuB,EAAKqtB,QAAQf,EAAW,CAAEpsB,WAC/B4sB,EAAW5sB,GACXgtB,KAEAd,EAAmBlsB,EACrB,GACC,CAAC6rB,EAAWO,EAAYF,EAAoBc,IAEzCmB,GAAmBjtB,EAAAA,EAAAA,KAAY,CAACqH,EAAqB6lB,KACzDlC,EAAmBS,EAAUyB,EAAQ,GACpC,CAACzB,EAAST,IA4Gb,OACEtqB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRqB,UAAU,mBACVlB,QAASA,EACTsrB,oBAAqBA,GAErBvqB,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CAACC,UAAWA,EAAWrhB,KAAK,cACpC,IAhOgB,IAiORqhB,EAjHXzpB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACtDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAWzD,EAAK,QAASU,QAASyrB,GACjFjsB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEfH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAK6lB,EACLhb,MAAOsb,EACPrb,SAAUuc,EACVO,UAAWJ,EACXK,YAAaxC,KAGjBnqB,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACb9nB,IAAK2lB,EACLtqB,UAAU,4BACV0sB,MAAOvB,EACPwB,yBAAuB,EACvBC,UAAYzB,EAAeA,EAAS9vB,OAASwxB,EAAAA,IAAtB,EACvBN,UAAWJ,GAEVhB,EACGA,EAAS7rB,KAAI,CAAC+sB,EAASlI,IACvBtkB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAM,GAAEwmB,KAAWyB,IACnBrsB,UAAU,kEACV3K,MAAQ,QAAO8uB,EAAI0I,EAAAA,SACnBxsB,QAAS+rB,EACTW,SAAUV,GAEVxsB,EAAAA,GAAAA,cAACmtB,GAAAA,EAAS,CACRlxB,KAAM8tB,GACN+B,MAAOP,EAAOiB,GACdrsB,UAAU,aACVitB,gBAAgB,sBAElBptB,EAAAA,GAAAA,cAAA,OAAK6G,IAAI,OAAO1G,UAAU,aAAYM,EAAAA,GAAAA,GAAW8qB,EAAOiB,GAASpsB,WAGnEJ,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,QAQhBrtB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACtDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLhD,MAAM,cACNrE,KAAK,UACLsH,UAAWzD,EAAK,SAChBU,QAASvB,GAETe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAK4lB,EACL/a,MAAOua,EACPta,SAAUsc,EACVQ,UAAW5X,EACX6X,YAAaxC,KAGhBS,GAAapvB,OACZwE,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACb9nB,IAAKyT,EACLpY,UAAU,4BACV0sB,MAAOjC,EACP0C,WAAYzC,EACZiC,yBAAuB,EACvBC,UAAW/C,EAAexuB,OAASwxB,EAAAA,IACnCN,UAAW5X,GAEV8V,EAAYnrB,KAAI,CAAC3K,EAAIwvB,IACpBtkB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,uDACV3K,MAAQ,WAAUw3B,EAAAA,gBAA2B7B,EAAiB7G,GAAK0I,EAAAA,SACnExsB,QAASqT,EACTqZ,SAAUp4B,IAETwJ,EAAAA,EAAAA,IAASxJ,GACRkL,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdC,OAAQ14B,IAAOytB,EAAgBziB,EAAK,0BAAuBjI,EAC3D41B,OAAQ34B,IAGVkL,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAACtvB,OAAQtJ,QAK7B81B,IAAgBA,EAAYpvB,OAC9BwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAK,+BAEhCE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,SAkBN,I,gBCvOZ,MAkEA,IAAe5vB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEgwB,OACEC,KAAM3D,EAAS,QACf4D,EAAO,iBACPC,GACD,cACDvL,GACE5kB,EAEJ,MAAO,CACLssB,YACA8D,cAAeF,EAAQG,OACvBC,gBAAiBJ,EAAQK,SACzBC,UAAWL,EAAiBE,OAC5BI,WAAYzwB,EAAO0wB,aAAaC,QAChC/L,gBACD,GAlBe7kB,EAlE+BnG,IAc7C,IAd8C,OAClDuH,EAAM,cACNyjB,EAAa,UACb0H,EAAS,cACT8D,EAAa,gBACbE,EAAe,UACfE,EAAS,WACTC,EAAU,OACVG,EAASC,EAAAA,IAAc,kBACvBrE,EAAiB,SACjBC,EAAQ,kBACRqE,EAAiB,QACjBxvB,EAAO,oBACPsrB,GACDhzB,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MACNmqB,EAAQwE,IAAa9oB,EAAAA,EAAAA,IAAS,IAC/B+oB,GAAMt1B,EAAAA,EAAAA,KAAQ,KAClB,IAAKyF,EAAQ,OAEb,IAAI8vB,EAAcT,GAAa,GAC3B5L,IACFqM,GAAcC,EAAAA,GAAAA,IAAO,CAACtM,KAAkBqM,KAI1C,MAAMjxB,GAASmxB,EAAAA,EAAAA,MACTC,EAAYpxB,EAAOqxB,MAAMpB,KAEzBqB,EAAU,IACVlB,GAAiB,MAChB7D,GAAU+D,GAAoB,IACnCM,QAAQz5B,IACR,MAAMoJ,EAAO+rB,EAAUn1B,GACjBotB,EAAO6M,EAAUj6B,GACvB,QAAIotB,KAAQgN,EAAAA,EAAAA,IAAchN,KAEnBhkB,IAAQ6tB,EAAAA,EAAAA,IAAiB7tB,EAAMixB,EAAAA,GAAe,IAGjDC,GAASC,EAAAA,EAAAA,KAAYR,EAAAA,GAAAA,IAAO,KAC7BS,EAAAA,EAAAA,IAAkBxvB,EAAMmvB,EAAShF,EAAWC,EAAQ3H,MACnD6L,GAAcG,EAAOx5B,SAAS,UAAWw6B,EAAAA,EAAAA,IAAkBnB,EAAYW,EAAW7E,GAAU,KAC9FD,OAAWpyB,EAAW+2B,GAE1B,OAAOY,EAAAA,EAAAA,IAAoB7xB,EAAQyxB,EAAQb,EAAO,GACjD,CAACJ,EAAW5L,EAAewL,EAAe7D,EAAQ+D,EAAiBnuB,EAAMmqB,EAAWmE,EAAYG,EAAQzvB,IAErG2wB,GAAeC,EAAAA,GAAAA,GAAiBf,GAAK,GAE3C,OACE3uB,EAAAA,GAAAA,cAAC2vB,GAAgB,CACf7wB,OAAQA,EACRkrB,cAAeyF,EACfxF,UAAWA,EACXE,kBAAmBA,EACnBD,OAAQA,EACRG,eAAgBqE,EAChBtE,SAAUA,EACVE,mBAAoBmE,EACpBxvB,QAASA,EACTsrB,oBAAqBA,GACrB,KC9BN,IAAe9sB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACL4kB,cAAe5kB,EAAO4kB,cACtBqN,iBAAiBvZ,EAAAA,EAAAA,IAAe1Y,GAAQkyB,gBAAgBtwB,YAAY/D,QAAU,GAAK,KAHnEkC,EArDsCnG,IAIpD,IAJqD,OACzDuH,EAAM,cACNyjB,EAAa,eACbqN,GACDr4B,EACC,MAAM,sBACJu4B,EAAqB,gBACrBC,EAAe,uBACfC,EAAsB,iBACtBC,IACE7wB,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAENmwB,EAASC,EAAaC,IAAiB7tB,EAAAA,EAAAA,MAC9CzG,EAAAA,EAAAA,KAAU,KACJgD,GACFqxB,GACF,GACC,CAACrxB,EAAQqxB,IAEZ,MAAME,GAAwB/wB,EAAAA,EAAAA,KAAY,CAACgxB,EAAqBxyB,KAC1DwyB,IAAgB/N,GAClByN,IACAC,EAAiB,CACfv6B,QAASoK,EAAK8vB,EACV,iDACA,oDAGNE,EAAsB,CAAE1xB,OAAQkyB,EAAa9D,QAAS1uB,GACxD,GACC,CAACykB,EAAeyN,EAAwBJ,EAAgB9vB,EAAMgwB,EAAuBG,IAElFzH,GAAclpB,EAAAA,EAAAA,KAAY,KAC9BywB,GAAiB,GAChB,CAACA,IAEJ,GAAKjxB,GAAWoxB,EAIhB,OACElwB,EAAAA,GAAAA,cAACuwB,GAAe,CACdzxB,OAAQA,EACRqrB,kBAAmBrqB,EAAK,aACxB2uB,kBAAmB4B,EACnBpxB,QAASupB,EACT+B,oBAAqB6F,GACrB,KCNN,IAAe3yB,EAAAA,EAAAA,KA/C4BlG,IAErC,IAFsC,eAC1Ci5B,GACDj5B,EACC,MAAMuH,EAAShG,QAAQ03B,IAAmBA,EAAepyB,SACnD,kBACJqyB,EAAiB,uBACjBC,IACEtxB,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAENmwB,EAASC,EAAaC,IAAiB7tB,EAAAA,EAAAA,MAC9CzG,EAAAA,EAAAA,KAAU,KACJgD,GACFqxB,GACF,GACC,CAACrxB,EAAQqxB,IAEZ,MAAME,GAAwB/wB,EAAAA,EAAAA,KAAY,CAACgxB,EAAqBxyB,KAC9D2yB,EAAkB,CAChBryB,OAAQkyB,EACRxyB,WACAyH,KAAMirB,EAAgBjrB,KACtBorB,MAAOH,EAAgBG,OACvB,GACD,CAACF,EAAmBD,IAEjBhI,GAAclpB,EAAAA,EAAAA,KAAY,KAC9BoxB,GAAwB,GACvB,CAACA,IAEJ,GAAK5xB,GAAWoxB,EAIhB,OACElwB,EAAAA,GAAAA,cAACuwB,GAAe,CACdzxB,OAAQA,EACRqrB,kBAAmBrqB,EAAK,aACxByuB,OAAQiC,GAAgBjC,OACxBE,kBAAmB4B,EACnBpxB,QAASupB,EACT+B,oBAAqB6F,GACrB,ICRN,IAAe3yB,EAAAA,EAAAA,KArCgClG,IAEzC,IAF0C,yBAC9Cq5B,GACDr5B,EACC,MAAM,sBAAEs5B,EAAqB,cAAEC,IAAkB1xB,EAAAA,EAAAA,MAC3CU,GAAOC,EAAAA,EAAAA,KAEPjB,EAAShG,QAAQ83B,IAChBV,EAASC,EAAaC,IAAiB7tB,EAAAA,EAAAA,MAC9CzG,EAAAA,EAAAA,KAAU,KACJgD,GACFqxB,GACF,GACC,CAACrxB,EAAQqxB,IAEZ,MAAM,IAAEY,EAAG,OAAExC,EAAM,WAAEyC,GAAeJ,GAA4B,CAAC,EAE3DK,GAAsB3xB,EAAAA,EAAAA,KAAagxB,IACvCQ,EAAc,CAAEC,IAAKA,EAAM3yB,OAAQkyB,EAAaU,eAChDH,GAAuB,GACtB,CAACE,EAAKD,EAAeD,EAAuBG,IAE/C,GAAKlyB,GAAWoxB,EAIhB,OACElwB,EAAAA,GAAAA,cAACuwB,GAAe,CACdzxB,OAAQA,EACRqrB,kBAAmBrqB,EAAK,UACxByuB,OAAQA,EACRE,kBAAmBwC,EACnBhyB,QAAS4xB,EACTtG,oBAAqB6F,GACrB,I,gBCoIN,SAASc,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,UAIX,CAEA,UAAe5zB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL2zB,SAASjb,EAAAA,EAAAA,IAAe1Y,GAAQ2zB,WAHlB5zB,EAzKYnG,IAAiB,IAAhB,QAAE+5B,GAAS/5B,EAC1C,MAAM,cACJg6B,EAAa,yBACbC,EAAwB,YACxBC,EAAW,iBACXxB,IACE7wB,EAAAA,EAAAA,OACGsyB,EAAaC,EAAWC,IAAcrvB,EAAAA,EAAAA,KAEvCzC,GAAOC,EAAAA,EAAAA,KAqIS8xB,MAlDQC,EAgCTX,EA3GrB,IANAr1B,EAAAA,EAAAA,KAAU,KACJw1B,EAAQ91B,OAAS,GACnBm2B,GACF,GACC,CAACL,EAASK,IAERL,EAAQ91B,OAyIb,OAAO1C,QAAQw4B,EAAQ91B,UAXjB,SADgBq2B,EAYyBP,EAAQA,EAAQ91B,OAAS,IAvHlDu2B,KACpB,MAAM,KACJC,EAAI,MAAE5xB,EAAK,MAAE6xB,EAAK,kBAAEC,EAAiB,UAAEC,EAAS,MAAEx6B,EAAK,gBAAEy6B,GACvDL,EAcEM,EACFvyB,EADqBqyB,EAChB,cACA,UADeD,EAAmB,KAGrCI,EAAuBxyB,EAAZqyB,EAAiB,cAAsB,aAClDI,EACFzyB,EADsBqyB,EACjB,sCAA8C,qCAEvD,OACEnyB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQ4yB,EACRzyB,QAAS2yB,EACTzxB,UAAU,QACVqyB,OAAQC,EAAmBryB,EAAOzI,GAClC4yB,oBAAqBgH,QAEE15B,IAAtBq6B,GAAmClyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAckyB,GAC9DJ,GAASjyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAAeM,EAAAA,GAAAA,GAAWwxB,EAAO,CAAC,QACxDG,GACCpyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAEPL,EADHqyB,EACQ,iDACA,iDAGbnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBAEVK,QA1CgBkyB,KACtBlB,EAAyB,CACvBQ,SAEEI,GACFnC,EAAiB,CACfv6B,QAAqBoK,EAAZqyB,EAAiB,sCAA8C,uCAG5EP,GAAY,GAmCLQ,EAAkBG,EAAoBD,GAEzCtyB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACJ,UAAU,wBAAwBK,QAASoxB,GAAa9xB,EAAK,YAExE,EAwDD6yB,CAAad,GAGlB,gBAAiBA,GAvDOC,EAwDED,EA/C5B7xB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQ4yB,EACRzyB,QAAS2yB,EACTzxB,UAAU,UACVC,MAAON,EAAK,4BACZyqB,oBAAqBgH,GAEpBzxB,EAAK,mCACNE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EAENC,QArBcoyB,KACpBnB,EAAY,CACVoB,SAASC,EAAAA,GAAAA,IAAKhB,EAAgB,CAAC,YAAa,WAAY,kBAE1DF,GAAY,GAmBL9xB,EAAK,OAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASoxB,GAAa9xB,EAAK,eAM/DqxB,EA2BAU,EAzBjB7xB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQ4yB,EACRzyB,QAAS2yB,EACTrH,oBAAqBgH,EACrBpxB,UAAU,QACVC,MAAO8wB,GAAeC,IAErBA,EAAME,aAAc0B,EAAAA,GAAAA,IAAqB5B,IACtC1wB,EAAAA,GAAAA,GAAW0wB,EAAMz7B,QAAU,CAAC,kBAAmB,QAAS,OAC5DsK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASoxB,GAAa9xB,EAAK,WAnHlD,SAAS2yB,EAAmBryB,EAAezI,GACzC,OACEqI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACZxI,GAASqI,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAChmB,KAAK,QAAQtE,MAAOA,EAAOq7B,WAAS,IACtDhzB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACZM,EAAAA,GAAAA,GAAWL,IAEdJ,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAWzD,EAAK,SAAUU,QAASoxB,GAClF5xB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAIrB,CAyH2E,K,gBCjK7E,MA0BA,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBm1B,EAAAA,GAAAA,KAAKzc,EAAAA,EAAAA,IAAe1Y,GAAS,CAAC,mBADpCD,EA1BkBnG,IAAuB,IAAtB,cAAE07B,GAAe17B,EACtD,MAAM,oBAAE27B,IAAwB9zB,EAAAA,EAAAA,MAEhC,GAAK6zB,EAAcz3B,OAInB,OACEwE,EAAAA,GAAAA,cAAA,OAAKlL,GAAG,iBACLm+B,EAAcxzB,KAAIC,IAAA,IAAC,QAClBhK,EAAO,UAAEyK,EAAS,QAAEgzB,EAAO,OAAE/b,EAAM,WAAEgc,EAAU,MAAEhzB,GAClDV,EAAA,OACCM,EAAAA,GAAAA,cAACqzB,GAAAA,EAAY,CACXjzB,MAAOA,GAAQK,EAAAA,GAAAA,GAAWL,EAAO,CAAC,kBAAmB,QAAS,KAAM,eAAYvI,EAChFuf,OAAQA,EACRgc,WAAYA,EACZjzB,UAAWA,EACXzK,SAAS+K,EAAAA,GAAAA,GAAW/K,EAAS,CAAC,kBAAmB,QAAS,KAAM,UAEhE49B,UAAWA,IAAMJ,EAAoB,CAAEC,aACvC,IAEA,K,4BCvBV,MA4BA,IAAe11B,EAAAA,EAAAA,KA5BqBlG,IAAa,IAAZ,IAAEsQ,GAAKtQ,EAC1C,MAAM,oBAAEg8B,IAAwBn0B,EAAAA,EAAAA,MAE1BU,GAAOC,EAAAA,EAAAA,KAEPyzB,GAAal0B,EAAAA,EAAAA,KAAY,KAC7BlD,OAAOq3B,MAAKC,EAAAA,GAAAA,GAAe7rB,GAAM,SAAU,YAC3C0rB,EAAoB,CAAE1rB,SAAKhQ,GAAY,GACtC,CAAC07B,EAAqB1rB,IAEnB8rB,GAAgBr0B,EAAAA,EAAAA,KAAY,KAChCi0B,EAAoB,CAAE1rB,SAAKhQ,GAAY,GACtC,CAAC07B,IAEEK,GAAelE,EAAAA,GAAAA,GAAiB7nB,GAEtC,OACE7H,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQhG,QAAQ+O,GAChB5I,QAAS00B,EACTvzB,MAAON,EAAK,gBACZoX,WAAWzW,EAAAA,GAAAA,GAAWX,EAAK,gBAAiB8zB,GAAe,CAAC,UAC5DE,aAAch0B,EAAK,gBACnBi0B,eAAgBP,GAChB,I,gBCtCN,SAA2B,uBCgH3B,IAAe/1B,EAAAA,EAAAA,KAvFoBlG,IAE7B,IAF8B,QAClCy8B,EAAO,YAAEC,GACV18B,EACC,MAAM,kBAAE28B,EAAiB,iBAAEC,EAAgB,kBAAEC,IAAsBh1B,EAAAA,EAAAA,OAC5Di1B,EAAgBC,IAAmB1uB,EAAAA,EAAAA,KAAS,IAC5C2uB,EAAsBC,IAAyB5uB,EAAAA,EAAAA,KAAS,GACzD6uB,GAAc/E,EAAAA,GAAAA,GAAiBsE,GAAS,IACxC,OAAEU,EAAM,MAAEC,EAAK,yBAAEC,GAA6BH,GAAatsB,SAAW,CAAC,EACvE4oB,EAAM4D,GAAQ7F,EAAAA,EAAAA,MAAYE,MAAMpB,KAAK+G,QAAS98B,EAE9CiI,GAAOC,EAAAA,EAAAA,KAEPyzB,GAAal0B,EAAAA,EAAAA,KAAY,KACzB00B,GAASnsB,KAAOwsB,GACGL,EAAQa,OAASV,EAAmBC,GAC5C,CACXU,eAAgBP,IAGlBn4B,OAAOq3B,MAAKC,EAAAA,GAAAA,GAAee,GAAa5sB,KAAM,SAAU,YAE1DqsB,GAAmB,GAClB,CACDF,EAASK,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGnGd,GAAgBr0B,EAAAA,EAAAA,KAAY,KAChC40B,GAAmB,GAClB,CAACA,IAEEa,GAAqBz1B,EAAAA,EAAAA,KAAaqQ,IACtC2kB,EAAgB3kB,GAChB6kB,EAAsB7kB,EAAM,GAC3B,CAAC2kB,IAUJ,OAPAx4B,EAAAA,EAAAA,KAAU,KACJ44B,IACFJ,GAAgB,GAChBE,EAAsB17B,QAAQ87B,IAChC,GACC,CAACA,EAA0BF,IAG5B10B,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQhG,QAAQk7B,GAASnsB,KACzB5I,QAAS00B,EACTvzB,MAAON,EAAK,gBACZg0B,aAAch0B,EAAK,gBACnBi0B,eAAgBP,IAEf/yB,EAAAA,GAAAA,GAAWX,EAAK,gBAAiB20B,GAAa5sB,KAAM,CAAC,UACrD6sB,GACC10B,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAASZ,EACTa,MACEl1B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACGS,EAAAA,GAAAA,GACCX,EAAK,gCAAiC,CAAC40B,GAAQS,EAAAA,EAAAA,IAAgBlB,KAC/D,CAAC,qBAIPmB,QAASL,EACT50B,UAAW9K,KAGdu/B,GACC50B,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAASV,EACTW,MACEl1B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACGS,EAAAA,GAAAA,GACCX,EAAK,yCAAyCq1B,EAAAA,EAAAA,IAAgBpE,IAC9D,CAAC,qBAIPqE,QAASZ,EACTrkB,UAAWkkB,EACXl0B,UAAW9K,KAGD,IC3FdggC,GAA6B,IAAbC,EAAAA,IAkBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBAoUF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIxa,KAAKma,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,EAK3C,CAEA,SAASG,GAAgBvmB,GACvB,OAAOwmB,OAAOxmB,GAAOymB,SAAS,EAAG,IACnC,CAEA,SAASC,GAAUZ,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,GACjC,CAaA,UAAel4B,EAAAA,EAAAA,KAlWqBlG,IAa9B,IAb+B,WACnC++B,EAAU,MACVC,EAAK,MACLC,EAAK,aACLC,EAAY,WACZC,EAAU,OACV53B,EAAM,eACN63B,EAAc,kBACdC,EAAiB,kBACjBC,EAAiB,QACjB53B,EAAO,SACP63B,EAAQ,oBACRC,GACDx/B,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KACPwb,EAAM,IAAID,KAEVsa,GAAUv8B,EAAAA,EAAAA,KAAQ,IAClBo9B,IAAiBF,EAAc,IAAIjb,KAChC,IAAIA,KAAKtX,KAAK2Y,IAAI4Z,GA9CP,OA+CjB,CAACE,EAAcF,IACZV,GAAUx8B,EAAAA,EAAAA,KAAQ,IAClBq9B,IAAeF,EAAc,IAAIlb,KAC9B,IAAIA,KAAKtX,KAAKoZ,IAAIoZ,GAASnB,GAAeA,MAChD,CAACqB,EAAYF,IAEVQ,GAAqB39B,EAAAA,EAAAA,KAAQ,IAAOi9B,EAAa,IAAIhb,KAAKgb,GAAc,IAAIhb,MAAS,CAACgb,IACtFW,GAAapT,EAAAA,EAAAA,GAAY/kB,IACxBo4B,EAAoBC,EAAwBC,IAA4B70B,EAAAA,EAAAA,IAAQ,IAEhF80B,EAAcC,IAAmB1xB,EAAAA,EAAAA,IAAeoxB,IAChDO,EAAqBC,IAA0B5xB,EAAAA,EAAAA,IACpD,IAAI0V,KAAK+b,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoBhyB,EAAAA,EAAAA,IACxCswB,GAAgBc,EAAmBa,cAE9BC,EAAiBC,IAAsBnyB,EAAAA,EAAAA,IAC5CswB,GAAgBc,EAAmBgB,eAG/BlC,EAAcO,GAAUgB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaY,WAC1FC,EAAcX,EAAoBE,cAClCU,EAAeZ,EAAoBG,YAEzC57B,EAAAA,EAAAA,KAAU,MACHm7B,GAAcn4B,IACjBw4B,EAAgBN,GAChBQ,EAAuB,IAAIlc,KAAK0b,EAAmBS,cAAeT,EAAmBU,WAAY,IAC7Ff,IACFiB,EAAiB1B,GAAgBc,EAAmBa,aACpDE,EAAmB7B,GAAgBc,EAAmBgB,gBAE1D,GACC,CAAChB,EAAoBl4B,EAAQm4B,EAAYN,KAE5C76B,EAAAA,EAAAA,KAAU,KACJ26B,IAAiBS,GAAsBG,EAAae,UAAYxC,EAAQwC,YAC1Ed,EAAgB1B,GAChBgC,EAAiB1B,GAAgBN,EAAQiC,aACzCE,EAAmB7B,GAAgBN,EAAQoC,eAC7C,GACC,CAACvB,EAAcS,EAAoBtB,EAASyB,KAE/Cv7B,EAAAA,EAAAA,KAAU,KACJ46B,IAAeQ,GAAsBG,EAAae,UAAYvC,EAAQuC,YACxEd,EAAgBzB,GAChB+B,EAAiB1B,GAAgBL,EAAQgC,aACzCE,EAAmB7B,GAAgBL,EAAQmC,eAC7C,GACC,CAACvB,EAAcC,EAAYQ,EAAoBrB,EAASD,EAASyB,KAEpEv7B,EAAAA,EAAAA,KAAU,KACR,GAAIw6B,EAAY,CACd,MAAM+B,EAAkB,IAAI/c,KAAKgb,GACjCgB,EAAgBe,GAChBT,EAAiB1B,GAAgBmC,EAAgBR,aACjDE,EAAmB7B,GAAgBmC,EAAgBL,cACrD,IACC,CAAC1B,IAEJ,MAAMgC,EAA0B5B,GAAcwB,GAAe3c,EAAIkc,eAAiBU,GAAgB5c,EAAImc,YAChG7B,GAAWqC,GAAerC,EAAQ4B,eAAiBU,GAAgBtC,EAAQ6B,WAC3Ea,EAAyB9B,GAAgByB,GAAe3c,EAAIkc,eAAiBU,GAAgB5c,EAAImc,YAEjG,cAAEc,EAAa,iBAAEC,EAAgB,cAAEC,IAAkBr/B,EAAAA,EAAAA,KAAQ,IA4MrE,SAA2Bo8B,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BtW,EAAO,IAAI9G,KACjB8G,EAAKuW,QAAQ,GACbvW,EAAKwW,SAASlD,GACdtT,EAAKyW,YAAYpD,GACjB,MAAMqD,EAAW1W,EAAK2W,UAAY,EAC5BC,EAAuB,IAAI1d,KAAKma,EAAMC,EAAO,GAAGuC,UAEtD,IAAK,IAAI3T,EAAI,EAAGA,EAAIwU,EAAUxU,IAC5BkU,EAAc30B,KAAKm1B,EAAuBF,EAAWxU,EAAI,GAG3D,KAAOlC,EAAKsV,aAAehC,GAAO,CAChC,MAAMuD,EAAW7W,EAAK6V,UACtBQ,EAAiB50B,KAAKo1B,GACtB7W,EAAKuW,QAAQM,EAAW,EAC1B,CAEA,MAAMC,GAAoBT,EAAiBj9B,OAASg9B,EAAch9B,QAAU,EAC5E,GAAI09B,EAAmB,EACrB,IAAK,IAAI5U,EAAI,EAAGA,GAAK,EAAI4U,EAAkB5U,IACzCoU,EAAc70B,KAAKygB,GAIvB,MAAO,CAAEkU,gBAAeC,mBAAkBC,gBAC5C,CAzOIS,CAAkBjB,EAAaC,IAC9B,CAACA,EAAcD,IAEZkB,GAAc//B,EAAAA,EAAAA,KAAQ,IACnBu9B,GA6PX,SAA2B92B,EAAcsiB,GACvC,MAAMuT,GAAM0D,EAAAA,GAAAA,IAAmBjX,EAAMtiB,EAAKw5B,MAG1C,OAAI3D,KAFU0D,EAAAA,GAAAA,IAAmB,IAAI/d,KAAQxb,EAAKw5B,MAGzCx5B,EAAK,0CAA0Cy5B,EAAAA,GAAAA,IAAWz5B,EAAMsiB,IAGlEtiB,EAAK,sCAAuC,CAAC61B,GAAK4D,EAAAA,GAAAA,IAAWz5B,EAAMsiB,IAC5E,CAtQgCoX,CAAkB15B,EAAMu3B,IACnD,CAACv3B,EAAMu3B,EAAcT,IA+BlB6C,GAAen6B,EAAAA,EAAAA,KAAY,KAC/Bw3B,EAASO,EAAa,GACrB,CAACP,EAAUO,IAERqC,GAAoBp6B,EAAAA,EAAAA,KAAaqH,IACrC,MAAMgJ,EAAQhJ,EAAEwV,OAAOxM,MAAMgqB,QAAQ,UAAW,IAChD,IAAKhqB,EAAMnU,OAGT,OAFAo8B,EAAiB,SACjBjxB,EAAEwV,OAAOxM,MAAQ,IAInB,MAAMiqB,EAAQ51B,KAAK2Y,IAAI,EAAG3Y,KAAKoZ,IAAIxI,OAAOjF,GAAQ,KAE5CyS,EAAO,IAAI9G,KAAK+b,EAAae,WACnChW,EAAKyX,SAASD,GACdtC,EAAgBlV,GAEhB,MAAM0X,EAAW5D,GAAgB0D,GACjChC,EAAiBkC,GACjBnzB,EAAEwV,OAAOxM,MAAQmqB,CAAQ,GACxB,CAACzC,IAEE0C,GAAsBz6B,EAAAA,EAAAA,KAAaqH,IACvC,MAAMgJ,EAAQhJ,EAAEwV,OAAOxM,MAAMgqB,QAAQ,UAAW,IAChD,IAAKhqB,EAAMnU,OAGT,OAFAu8B,EAAmB,SACnBpxB,EAAEwV,OAAOxM,MAAQ,IAInB,MAAMqqB,EAAUh2B,KAAK2Y,IAAI,EAAG3Y,KAAKoZ,IAAIxI,OAAOjF,GAAQ,KAE9CyS,EAAO,IAAI9G,KAAK+b,EAAae,WACnChW,EAAK6X,WAAWD,GAChB1C,EAAgBlV,GAEhB,MAAM8X,EAAahE,GAAgB8D,GACnCjC,EAAmBmC,GACnBvzB,EAAEwV,OAAOxM,MAAQuqB,CAAU,GAC1B,CAAC7C,IA4BJ,OACEr3B,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTkB,UAAU,gBACVD,QAASu5B,GAETz5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASvB,GAETe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGfH,EAAAA,GAAAA,cAAA,UACGF,EAAM,YAAWq4B,EAAe,KAChC,IACAD,GAGHl4B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACN6P,SAAUooB,EACV/3B,QAAU+3B,OAA2C1gC,EA9H/D,WACE2/B,GAAwB2C,IACtB,MAAMC,EAAW,IAAI9e,KAAK6e,GAG1B,OAFAC,EAASxB,SAASwB,EAAS1C,WAAa,GAEjC0C,CAAQ,GAEnB,GAyHUp6B,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wBAGfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACN6P,SAAUmoB,EACV93B,QAAU83B,OAA2CzgC,EA/H/D,WACE2/B,GAAwB2C,IACtB,MAAMC,EAAW,IAAI9e,KAAK6e,GAG1B,OAFAC,EAASxB,SAASwB,EAAS1C,WAAa,GAEjC0C,CAAQ,GAEnB,GA0HUp6B,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAKnBH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZo1B,GAAgB91B,KAAKk2B,GACpB31B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4BACbH,EAAAA,GAAAA,cAAA,YAAOF,EAAK61B,OAGf6C,EAAc/4B,KAAKw5B,GAClBj5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAAsBH,EAAAA,GAAAA,cAAA,YAAOi5B,MAE7CR,EAAiBh5B,KAAKw5B,GACrBj5B,EAAAA,GAAAA,cAAA,OACEq6B,KAAK,SACLC,SAAU,EACV95B,QAASA,KAAM+5B,OA3IDnY,EA2IkB6W,OA1I1C3B,GAAiB6C,IACf,MAAMC,EAAW,IAAI9e,KAAK6e,GAK1B,OAJAC,EAASzB,QAAQvW,GACjBgY,EAASxB,SAAST,GAClBiC,EAASvB,YAAYX,GAEdkC,CAAQ,IAPnB,IAA0BhY,CA2I4B,EAC1CjiB,WAAWuG,EAAAA,GAAAA,GACT,aACA,aACA8uB,GACE0C,EAAaC,EAAcc,EAAUrD,EAASC,GAE5C,WACGoD,EAAW,YAAc,GAChCnD,IAAgBO,GAAU6B,EAAaC,EAAcc,IAAa,aAGnEngC,QAAQmgC,IACPj5B,EAAAA,GAAAA,cAAA,YAAOi5B,MAIZP,EAAcj5B,KAAKw5B,GAClBj5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAAsBH,EAAAA,GAAAA,cAAA,YAAOi5B,QAKjDtC,GA3GD32B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLzB,UAAU,eACVq6B,UAAU,UACV7qB,MAAOgoB,EACP/nB,SAAU8pB,EACVe,QAAStD,EACTuD,OAAQtD,IACR,IAEFp3B,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLzB,UAAU,eACVq6B,UAAU,UACV7qB,MAAOmoB,EACPloB,SAAUmqB,EACVU,QAAStD,EACTuD,OAAQtD,KA2FZp3B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAASi5B,GACdL,GAEFvC,GACC72B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAASu2B,EAAqBx2B,QAAM,GACzCs2B,IAID,IClSZ,IAAep5B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CAAE24B,YAAYjgB,EAAAA,EAAAA,IAAe1Y,GAAQg9B,6BAF5Bj9B,EAxB+BnG,IAE7C,IAF8C,OAClDuH,EAAM,WAAEw3B,GACT/+B,EACC,MAAM,qBAAEqjC,EAAoB,qBAAEC,IAAyBz7B,EAAAA,EAAAA,MAEjD07B,GAAmBx7B,EAAAA,EAAAA,KAAa8iB,IACpCwY,EAAqB,CAAEG,UAAW3Y,EAAK4Y,UAAY,MACnDH,GAAsB,GACrB,CAACA,EAAsBD,IAEpB96B,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACi7B,GAAa,CACZn8B,OAAQA,EACRw3B,WAAYA,EACZI,YAAU,EACVE,kBAAmB92B,EAAK,cACxBb,QAAS47B,EACT/D,SAAUgE,GACV,K,eCZN,MA8MA,IAAer9B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAE+tB,GAAQ/tB,EAEjB,MAAO,CACLwiB,KAFWuL,GAASjvB,EAAAA,EAAAA,IAAWb,EAAQ8vB,QAAU51B,EAGjDqjC,WAAYzN,GAAS0N,EAAAA,EAAAA,IAAiBx9B,EAAQ8vB,QAAU51B,EACxDujC,cAAez9B,EAAO09B,YAAYC,WACnC,GAPe59B,EAhM+BnG,IAO7C,IAAAgkC,EAAAC,EAAAC,EAAA,IAP8C,OAClD38B,EAAM,OACN2uB,EAAM,gBACNiO,EAAe,KACfxZ,EAAI,WACJgZ,EAAU,cACVE,GACD7jC,EACC,MAAM,cAAEokC,EAAa,cAAEC,EAAa,sBAAEC,IAA0Bz8B,EAAAA,EAAAA,MAE1DU,GAAOC,EAAAA,EAAAA,KACP+7B,GAAgBpM,EAAAA,GAAAA,GAAiBxN,GACjC6Z,GAA2BrM,EAAAA,GAAAA,GAAiBgM,GAE5CM,GAAWthC,EAAAA,EAAAA,IAAyB,OAEnCw1B,EAASC,EAAaC,IAAiB7tB,EAAAA,EAAAA,MACvC05B,EAAWC,IAAgBt2B,EAAAA,EAAAA,IAAyC,QAAjC21B,EAASO,GAAeG,iBAAS,IAAAV,EAAAA,EAAI,KACxEY,EAAUC,IAAex2B,EAAAA,EAAAA,IAAwC,QAAhC41B,EAASM,GAAeK,gBAAQ,IAAAX,EAAAA,EAAI,KACrEa,EAAOC,IAAY12B,EAAAA,EAAAA,IAA2C,QAAnC61B,EAASK,GAAeS,mBAAW,IAAAd,EAAAA,EAAI,KAClEe,EAAwBC,IAA6B72B,EAAAA,EAAAA,KAAkB,GACxE82B,EAAiB5jC,QAAQmjC,KAAeP,GAAmBW,KAEjEvgC,EAAAA,EAAAA,KAAU,KACI,IAAA6gC,EAAAC,EAAAC,EAAR/9B,IACFqxB,IACA+L,EAAqC,QAAzBS,EAACb,GAAeG,iBAAS,IAAAU,EAAAA,EAAI,IACzCP,EAAmC,QAAxBQ,EAACd,GAAeK,gBAAQ,IAAAS,EAAAA,EAAI,IACvCN,EAAmC,QAA3BO,EAACf,GAAeS,mBAAW,IAAAM,EAAAA,EAAI,IACvCJ,GAA0B,GAC5B,GACC,CAAC39B,EAAQqxB,EAAa2L,GAAeG,UAAWH,GAAeK,SAAUL,GAAeS,eAE3FzgC,EAAAA,EAAAA,KAAU,MACHkK,EAAAA,IAAgBkqB,GACnB7zB,YAAW,KAAQ2/B,EAASnhC,SAASiiC,OAAO,GAjDvB,IAkDvB,GACC,CAAC5M,IAEJ,MAAM6M,GAAwBz9B,EAAAA,EAAAA,KAAaqH,IACzCu1B,EAAav1B,EAAEwV,OAAOxM,MAAM,GAC3B,IAEGqtB,GAAoB19B,EAAAA,EAAAA,KAAaqH,IACrC21B,GAASW,EAAAA,GAAAA,IAA0B7B,EAAez0B,EAAEwV,OAAOxM,OAAO,GACjE,CAACyrB,IAEE8B,GAAuB59B,EAAAA,EAAAA,KAAaqH,IACxCy1B,EAAYz1B,EAAEwV,OAAOxM,MAAM,GAC1B,IAEG6Y,GAAclpB,EAAAA,EAAAA,KAAY,KAC9Bu8B,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,GAAG,GACX,CAACT,IAEEpC,GAAen6B,EAAAA,EAAAA,KAAY,KAC3Bo8B,IAAoBjO,EACtBmO,EAAc,CACZK,YACAE,WACAI,YAAaF,IAGfV,EAAc,CACZlO,SACAwO,YACAE,WACAK,0BAEJ,GACC,CAACP,EAAWL,EAAeF,EAAiBS,EAAUE,EAAOG,EAAwBb,EAAelO,IAEvG,GAAK3uB,GAAWoxB,EAsFhB,OACElwB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,kBACVC,MAAON,EAAK,cACZhB,OAAQA,EACRG,QAASupB,EACT+B,oBAAqB6F,GAEpB0L,GAxFD97B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BAA2B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAClEmI,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,QACLimB,KAAM4Z,EACNv2B,KAAO,GAAE02B,KAAaE,MAExBn8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCACV27B,GAAeS,aACZU,EAAAA,GAAAA,IAA0B7B,EAAeU,EAAcS,aACvDz8B,EAAK,iBAEXE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,+BAA+B0G,IAAI,SAChDs2B,EAAAA,EAAAA,IAAcr9B,EAAMg8B,EAAgBZ,MAI3Cl7B,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACLrsB,MAAOssB,EACP/G,MAAOp1B,EAAK,aACZw6B,SAAU,EACV1qB,SAAUmtB,IAEZ/8B,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOwsB,EACPjH,MAAOp1B,EAAK,YACZw6B,SAAU,EACV1qB,SAAUstB,IAEZl9B,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BACVM,EAAAA,GAAAA,GACCX,EAAK,+BAAgCg8B,GAAeG,WAAa,IACjE,CAAC,QAAS,qBAGdj8B,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAASuH,EACTlC,SAAU,EACVlF,QAASqH,EACTvH,MAAOp1B,EAAK,2BAEdE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BACVM,EAAAA,GAAAA,GAAWX,EAAK,wCAAyCg8B,GAAeG,cA6C5EF,GArCD/7B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BAA+B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACtEmI,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAChmB,KAAK,QAAQsJ,KAAO,GAAE02B,KAAaE,MAC3Cn8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACLrsB,MAAO0sB,EACP7B,UAAU,MACVtF,MAAOp1B,EAAK,qBACZw6B,SAAU,EACV1qB,SAAUotB,IAEZh9B,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOssB,EACP/G,MAAOp1B,EAAK,aACZw6B,SAAU,EACV1qB,SAAUmtB,IAEZ/8B,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOwsB,EACPjH,MAAOp1B,EAAK,YACZw6B,SAAU,EACV1qB,SAAUstB,MAiBhBl9B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBACVK,QAASgoB,GAER1oB,EAAK,WAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBACVgQ,UAAWusB,EACXl8B,QAASi5B,GAER35B,EAAK,UAGJ,K,wCC1EZ,MC1FMs9B,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACApnB,KAAK,KAEDqnB,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACRz0B,MAAO,SAicT,IAAerL,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAA6B,IAA3B,OAAE4/B,GAAQ5/B,EACjB,MAAM,MAAE+2B,GAAU6I,GAAU,CAAC,EACvBC,EAAY9I,EAAQh3B,EAAO+/B,WAAWC,KAAKhJ,QAAS98B,EACpDk5B,EAAM4D,GAAQn2B,EAAAA,EAAAA,IAAWb,EAAQg3B,QAAS98B,EAC1CqG,GAAO0/B,EAAAA,EAAAA,IAAkBjgC,GACzBkgC,GAAQC,EAAAA,EAAAA,IAAYngC,IACpB,mBAAEogC,EAAkB,OAAEvQ,IAAWnX,EAAAA,EAAAA,IAAe1Y,GAAQqgC,QAE9D,MAAO,CACLP,YACA1M,MACA7yB,OACA2/B,QACAE,qBACAE,cAAezQ,EAChB,GAhBe9vB,EA9b2BnG,IAQzC,IAR0C,OAC9CimC,EAAM,KACNt/B,EAAI,IACJ6yB,EAAG,UACH0M,EAAS,MACTI,EAAK,mBACLE,EAAkB,cAClBE,GACD1mC,EACC,MAAM,YACJ2mC,EAAW,gBACXC,EAAe,eACfC,EAAc,gBACdC,EAAe,iBACfC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,qBACXC,EAAoB,iBACpBxO,EAAgB,gBAChByO,IACEt/B,EAAAA,EAAAA,OACGu/B,EAAYC,IAAiBh5B,EAAAA,EAAAA,OAC7Bi5B,EAAqBC,IAA0Bl5B,EAAAA,EAAAA,KAAS,IACxDm5B,EAAiBC,IAAsBp5B,EAAAA,EAAAA,OACvCq5B,EAAaC,IAAkBt5B,EAAAA,EAAAA,OAC/Bu5B,EAAcC,IAAmBx5B,EAAAA,EAAAA,KAAS,IAC1Cy5B,EAAkBC,EAAgB1N,IAAcrvB,EAAAA,EAAAA,IAAQ,IACxDg9B,EAAUC,EAAYC,IAAgBl9B,EAAAA,EAAAA,IAAQ,IAC9Cm9B,EAAaC,IAAkB/5B,EAAAA,EAAAA,OAChC,SAAEpD,IAAaC,EAAAA,EAAAA,MACfm9B,GAAkB/b,EAAAA,EAAAA,GAAY6b,GAC9BG,EAAuBH,GAAeE,GAE5C9jC,EAAAA,EAAAA,KAAU,KACR,MAAMgkC,GAAcC,EAAAA,GAAAA,MACpBf,EAAmBc,EAAYE,UAC/Bd,EAAeY,EAAYE,SAAS,GACnC,IAGH,MAAMC,GAAWvlC,EAAAA,EAAAA,IAA0B,MAErCoF,GAAOC,EAAAA,EAAAA,MACP,IACJ8H,EAAG,WAAEq4B,EAAU,QAAEC,EAAO,iBAAEC,GAAgB,SAAEtiC,IAC1C0/B,GAAU,CAAC,EACT1+B,GAAShG,QAAQ+O,GACjBw4B,GAAWvnC,QAAQonC,GAEnBI,IAAchhC,EAAAA,EAAAA,KAAa6e,IAC/B,MAAM,UAAEoiB,EAAS,UAAEC,GAAcriB,EAcjC,GAbkB,kBAAdoiB,GACFrC,IAGgB,yBAAdqC,IACF9B,EAAqB,CACnBgC,KAAMD,EAAUC,OAElBjC,EAAY,CACViC,KAAMD,EAAUC,QAIF,yBAAdF,IAAyCxC,EAAoB,CAC/D,MAAM2C,EAAUC,EAAAA,IAAkBH,EAAUI,UAC5CtC,EAAiB,CAAEz2B,IAAK64B,IACxBxC,GACF,CAEA,GAAkB,sBAAdqC,EAAmC,CACrC,MAAMG,EAAUF,EAAU34B,IAC1BzL,OAAOq3B,KAAKiN,EAAS,SAAU,aACjC,CAMA,GAJkB,8BAAdH,GACFzB,EAAuB0B,EAAUK,YAGjB,iCAAdN,EAA8C,CAChD,MAAMT,GAAcC,EAAAA,GAAAA,MACdz/B,GAAQwgC,EAAAA,GAAAA,IAAiBN,EAAUlgC,OAASkgC,EAAUlgC,MAAQw/B,EAAYE,SAChFhB,EAAmB1+B,EACrB,CAEA,GAAkB,6BAAdigC,EAA0C,CAC5C,MAAMT,GAAcC,EAAAA,GAAAA,MAEdgB,EAAWjB,EADLU,EAAUQ,WAEhB1gC,GAAQwgC,EAAAA,GAAAA,IAAiBC,GAAYA,EAAWjB,EAAYE,SAClEd,EAAe5+B,EACjB,CAWA,GATkB,sBAAdigC,IACFrC,IACAC,EAAgB,CACdpN,IAAKA,EACLmP,WAAYA,EACZ52B,KAAMk3B,EAAUl3B,QAIF,8BAAdi3B,EAA2C,CAC7C,MAAMT,GAAcC,EAAAA,GAAAA,MACdz/B,GAAQwgC,EAAAA,GAAAA,IAAiBN,EAAUlgC,OAASkgC,EAAUlgC,MAAQw/B,EAAYmB,aAC1EC,GAAYJ,EAAAA,GAAAA,IAAiBN,EAAUW,YAAcX,EAAUW,WAAarB,EAAYqB,WAC9FvC,EAAc,CACZ7vB,UAAWyxB,EAAUK,YAAc/nC,QAAQ0nC,EAAUj7B,MAAM67B,OAAO5lC,QAClEwO,SAAUw2B,EAAUa,UACpB97B,KAAMi7B,EAAUj7B,MAAQ,GACxBjF,QACA4gC,YACAI,kBAAmBd,EAAUe,qBAEjC,CAMA,GAJkB,mCAAdhB,GACFnB,EAAgBoB,EAAUgB,mBAGV,uBAAdjB,EAAoC,CACtC,IAAKC,EAAU9qC,QAAQ0rC,OAAO5lC,SAAWglC,EAAUiB,SAASjmC,QAAUglC,EAAUiB,QAAQjmC,OAAS,EAAG,OACpGmkC,EAAea,EACjB,CAQA,GANkB,+BAAdD,GACFtQ,EAAiB,CACfv6B,QAAS,qDAIK,gCAAd6qC,EAA6C,CAC/C,MAAMhS,EAASiS,EAAUkB,YAAYjiC,IAAIkiC,EAAAA,IAAsBpT,OAAOz1B,SAChE8oC,GAAcrT,GAAQ/yB,OAE5BkjC,EAAgB,CACd/J,MAAO5D,EAAKj8B,GACZ+sC,MAAOrB,EAAUqB,MACjBtT,SACAqT,eAGF1D,GACF,IACC,CACDnN,EAAKmP,EAAYhC,EAAaM,EAAaF,EAAkBH,EAAiBM,EAC9EV,EAAoB9N,KAGhB,YACJ6R,GAAW,UAAEC,GAAS,aAAEC,GAAY,UAAEC,IDvDnBC,EACrBp9B,EACAhG,EACAqjC,EACAC,EACAC,KAEA,MAAM,iBACJpS,IACE7wB,EAAAA,GAAAA,MAEEkjC,GAAkB5nC,EAAAA,EAAAA,KAAgB,GAClC6nC,GAAmB7nC,EAAAA,EAAAA,MACnBsrB,GAAa/L,EAAAA,GAAAA,MAEnBne,EAAAA,EAAAA,KAAU,KACR,IAAKgJ,EAAIjK,UAAYiE,EAAQ,OAE7B,MAAM0jC,EAAaA,KACjBH,KAAU,EAGN55B,EAAQ3D,EAAIjK,QAElB,OADA4N,EAAMlC,iBAAiB,OAAQi8B,GACxB,KACL/5B,EAAMjC,oBAAoB,OAAQg8B,EAAW,CAC9C,GACA,CAACH,EAAQv9B,EAAKhG,IAEjB,MAAMgjC,GAAcxiC,EAAAA,EAAAA,KAAauI,IAC/B,IAAK/C,EAAIjK,QAAS,OAClB,MAAM4N,EAAQ3D,EAAIjK,QAClB4N,EAAM1U,IAAM,cACZ0U,EAAMlC,iBAAiB,QAAQ,KAC7BkC,EAAM1U,IAAM8T,CAAG,GACd,CAAE46B,MAAM,GAAO,GACjB,CAAC39B,IAEEi9B,GAAYziC,EAAAA,EAAAA,KAAa6e,IACxBrZ,EAAIjK,SAAS6nC,eAClB59B,EAAIjK,QAAQ6nC,cAAc/4B,YAAYg5B,KAAKC,UAAUzkB,GAAQ,IAAI,GAChE,CAACrZ,IAEEk9B,GAAe1iC,EAAAA,EAAAA,KAAaujC,IAChC,IAAK/9B,EAAIjK,QACP,OAEF,MAAM,MAAEC,EAAK,OAAEK,GAAW2J,EAAIjK,QAAQqR,wBACtC61B,EAAU,CACRxB,UAAW,mBACXC,UAAW,CACT1lC,QACAK,SACA2nC,aAAa,EACbC,iBAAkBF,IAEpB,GACD,CAACd,EAAWj9B,IAETm9B,GAAY3iC,EAAAA,EAAAA,KAAY,KAC5ByiC,EAAU,CACRxB,UAAW,gBACXC,UAAW,CACTwC,cAAcjD,EAAAA,GAAAA,QAEhB,GACD,CAACgC,IAEEkB,GAAkB3jC,EAAAA,EAAAA,KAAa9J,IACnCusC,EAAU,CACRxB,UAAW,mBACXC,UAAWhrC,GACX,GACD,CAACusC,IAEEmB,GAAgB5jC,EAAAA,EAAAA,KAAa6e,IACjC,IAAImkB,EAAgBznC,QAIpB,IACE,MAAMyO,EAAOq5B,KAAKQ,MAAMhlB,EAAM7U,MAc9B,GAZuB,kBAAnBA,EAAKi3B,WACP8B,MAGqB,6BAAnB/4B,EAAKi3B,WACPyB,EAAahc,EAAWhM,YAGH,0BAAnB1Q,EAAKi3B,WACP0B,IAGqB,iBAAnB34B,EAAKi3B,UAA8B,CACrC,MAAM6C,EAAiBC,iBAAiB/vC,SAAS2b,MAAMq0B,iBAAiB,qBACxEL,EArHiB,4VAqHetJ,QAAQ,qBAAsByJ,GAChE,CAEA,GAAuB,sBAAnB95B,EAAKi3B,UAAmC,CAC1C,IAAK4B,EAAc,OACnBG,EAAgBznC,SAAU,CAC5B,CAEuB,qCAAnByO,EAAKi3B,YACPwB,EAAU,CACRxB,UAAW,0BACXC,UAAW,CACT+C,OAAQj6B,EAAKk3B,UAAU+C,OAEvBj6B,KAAM,QAIV2mB,EAAiB,CACfv6B,QAAS,0DAGb0sC,EAAQ94B,EAER,CADA,MAAOtS,GACP,IAED,CAACmrC,EAAcJ,EAAWK,EAASa,EAAiBhB,EAAWD,EAAcK,EAAQrc,EAAWhM,aAwBnG,OAtBAle,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEhB,EAAK,OAAEK,EAAM,WAAE6e,GAAegM,EAClCuc,EAAiB1nC,SAAW0nC,EAAiB1nC,QAAQC,QAAUA,GAC9DynC,EAAiB1nC,QAAQM,SAAWA,IAAWonC,EAAiB1nC,QAAQmf,aAC7EuoB,EAAiB1nC,QAAU,CAAEC,QAAOK,SAAQ6e,cAC5CgoB,EAAahoB,GAAW,GACvB,CAACgoB,EAAchc,KAElBlqB,EAAAA,EAAAA,KAAU,KACRM,OAAOmK,iBAAiB,UAAW28B,GAC5B,IAAM9mC,OAAOoK,oBAAoB,UAAW08B,KAClD,CAACA,KAEJpnC,EAAAA,EAAAA,KAAU,KACJgD,GAAUgG,EAAIjK,SAAS6nC,eACzBV,IACAM,EAAgBznC,SAAU,GAE1B0nC,EAAiB1nC,aAAUhD,CAC7B,GACC,CAACiH,EAAQkjC,EAAcl9B,IAEnB,CACLi9B,YAAWD,cAAaE,eAAcC,YACvC,EC7FGC,CAAejC,EAAUnhC,GAAQuhC,GAAUC,GAAad,GAEtDgE,GAAuB7E,GAAY5vB,WAAa4vB,EAAWp5B,KAAK67B,OAAO5lC,OAAS,GAEtFioC,EAAAA,GAAAA,IAAY,KACVrF,EAAe,CACbzJ,MAAO5D,EAAKj8B,GACZqrC,QAASA,EACTuD,OAAQxlC,EAAMpJ,GACdsrC,oBACAtiC,aACA,GACDqiC,EApLoB,UAoLStoC,GAAW,GAE3C,MAAM8rC,IAAwBrkC,EAAAA,EAAAA,KAAY,KACxCyiC,GAAU,CACRxB,UAAW,uBACX,GACD,CAACwB,KAEE6B,IAA4BtkC,EAAAA,EAAAA,KAAY,KAC5CyiC,GAAU,CACRxB,UAAW,2BACX,GACD,CAACwB,KAEE8B,IAAqBvkC,EAAAA,EAAAA,KAAY,KACrCwiC,GAAYtE,EAAQ31B,IAAI,GACvB,CAACi6B,GAAatE,IAEXhV,IAAclpB,EAAAA,EAAAA,KAAY,KAC1B6/B,EACFG,IAEApB,GACF,GACC,CAACiB,EAAcG,EAAgBpB,IAE5B4F,IAAmBxkC,EAAAA,EAAAA,KAAaykC,IACpCpE,OAAe9nC,GACfkqC,GAAU,CACRxB,UAAW,eACXC,UAAW,CACTwD,UAAWD,IAEb,GACD,CAAChC,KAEEkC,IAAwB3kC,EAAAA,EAAAA,KAAY,KACxCwkC,IAAkB,GACjB,CAACA,MAGJlpC,EAAAA,EAAAA,IAAc,KACZyB,YAAW,KACT2lC,IAAc,GA9NG,IA+ND,GACjB,CAACrD,GAAY5vB,UAAWizB,MAG3BpnC,EAAAA,EAAAA,IAAc,KACZyB,YAAW,KACT4lC,IAAW,GArOM,IAsOD,GACjB,CAACpE,EAAOoE,MAEXrnC,EAAAA,EAAAA,IAAc8E,IAA8B,IAA5BwkC,GAAuBxkC,EACjCq+B,IAAuBmG,GACvB1G,GAAQiD,OAAS1C,GAAsBE,IACzC8D,GAAU,CACRxB,UAAW,iBACXC,UAAW,CACTC,KAAMjD,EAAOiD,KACbjT,OAAQyQ,KAGZQ,EAAqB,CACnBgC,UAAM5oC,IAEV,GACC,CAACkmC,EAAoBE,EAAe8D,GAAWtD,EAAsBjB,IAExE,MAAM2G,IAAoB7kC,EAAAA,EAAAA,KAAY,KACpC++B,EAAgB,CACd1J,MAAO5D,EAAKj8B,GACZsvC,WAAY3G,GACZ,GACD,CAAC1M,EAAK0M,EAAWY,IAEdgG,IAAkB/kC,EAAAA,EAAAA,KAAY,KAC9Bu/B,EACFkD,GAAU,CACRxB,UAAW,wBAGb/X,IACF,GACC,CAACA,GAAaqW,EAAqBkD,KAEhCuC,IAAchlC,EAAAA,EAAAA,KAAY,KAC9Bi/B,EAAS,CACPzpC,GAAIi8B,EAAKj8B,KAEXopC,GAAa,GACZ,CAACnN,EAAKmN,EAAaK,KAEtBziC,EAAAA,EAAAA,KAAU,KACHgD,KACHsgC,GAAgB,GAChBxN,IACA+N,OAAe9nC,GACf4nC,IACF,GACC,CAAC7N,EAAY9yB,GAAQ2gC,IAExB,MAAM8E,IAAkElrC,EAAAA,EAAAA,KAAQ,IACvEwG,IAAA,IAAC,UAAEwD,EAAWvE,OAAQ0lC,GAAY3kC,EAAA,OACvCG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cACNH,UAAWqkC,EAAa,SAAW,GACnChkC,QAAS6C,EACTE,UAAU,gBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,CAACqC,IAEEiiC,IAAsB/9B,EAAAA,GAAAA,GCvWgE,uBDyW1Fm4B,GCzWiK,wBDqZ7J6F,IAAsB7gB,EAAAA,EAAAA,GAAY8a,GAAYr+B,OAAO,GACrDqkC,IAA0B9gB,EAAAA,EAAAA,GAAY8a,GAAYuC,WAAW,GAC7D0D,IAAyB/gB,EAAAA,EAAAA,GAAY8a,GAAc7lC,QAAQ6lC,EAAW30B,WAAW,GACjF66B,IAAqBhhB,EAAAA,EAAAA,GAAY8a,GAAYp5B,MAAM,GAEnDu/B,GAAyBnG,GAAYr+B,OAASokC,GAC9CK,GAA6BpG,GAAYuC,WAAayD,GACtDK,QAAqDntC,IAAzB8mC,GAAY30B,SAAyB20B,EAAW30B,SAAW46B,GACvFK,GAAwBtG,GAAYp5B,MAAQs/B,IAElD/oC,EAAAA,EAAAA,KAAU,KACR,IAAKgD,GAAQ,CACX,MAAMghC,GAAcC,EAAAA,GAAAA,MACpBnB,OAAc/mC,GACdinC,GAAuB,GACvBE,EAAmBc,EAAYE,UAC/Bd,EAAeY,EAAYE,SAC7B,IACC,CAAClhC,KAEJ,MAAOomC,GAA4BC,KAAiCv/B,EAAAA,EAAAA,KAAS,IACtEw/B,GAAkBC,KAAuBz/B,EAAAA,EAAAA,KAAS,GAEnD0/B,IAAsB5qC,EAAAA,EAAAA,MAiB5B,OAfAoB,EAAAA,EAAAA,KAAU,KACJwpC,GAAoBzqC,SAASgB,aAAaypC,GAAoBzqC,SAC7D2oC,IAMH6B,IAAoB,GACpBC,GAAoBzqC,QAAUwB,YAAW,KACvC8oC,IAA8B,EAAK,GA7XR,OAsX7BA,IAA8B,GAC9BG,GAAoBzqC,QAAUwB,YAAW,KACvCgpC,IAAoB,EAAK,GAxXE,KA+X/B,GACC,CAACF,GAA+B3B,KAGjCxjC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UC/biB,uBDgcjBrB,OAAQA,GACRG,QAASupB,GACTgK,OApFAxyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe3K,MAAQ,qBAAoBypC,KACxDj/B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLhD,MAAM,cACNrE,KAAK,UACLsH,UAAWzD,EAAK++B,EAAsB,OAAS,SAC/Cr+B,QAAS6jC,IAETrkC,EAAAA,GAAAA,cAAA,OAAKG,UAAWskC,MAElBzkC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe4wB,GAAKkL,WACnCj8B,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,0CACViE,QAASmgC,GACTlgC,UAAU,SAETnG,GAAQ6yB,GAAO7yB,EAAKpJ,KAAOi8B,EAAIj8B,IAC9BkL,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS8jC,IAAcxkC,EAAK,sBAEpDE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAStD,QAASqjC,IAAqB/jC,EAAK,sBAC1D29B,GAAW8H,aACVvlC,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASojC,IAChC9jC,EAAK,aAGTixB,GAAKyU,aACJxlC,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAM25B,EAAY,OAAS,UAC3Bj9B,QAAS2jC,GACTsB,YAAa3sC,QAAQ2kC,IAEpB39B,EAAK29B,EAAY,mBAAqB,gCAsD/CjoC,MAAQ,qBAAoBupC,KAE5B/+B,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACvX,WAAWuG,EAAAA,GAAAA,GCrc4N,uBDqctL64B,GCrcoN,0BDsc7QzgC,IACCkB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UACEG,WAAWuG,EAAAA,GAAAA,GCzc4R,uBDyc/Pw+B,ICzcwU,wBD0chXnxC,IAAK8T,EACLzH,MAAQ,GAAE2wB,GAAKkL,oBACfyJ,QAAStI,GACTuI,MAAM,mCACNC,iBAAe,EACf9gC,IAAKm7B,IAEPjgC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,GCld8a,uBDodvb88B,ICpdwd,uBDqdxd4B,ICrdwf,wBDud1f5vC,MAAQ,qBAAoBsvC,cAAkCC,KAC9D50B,UAAW60B,GACXxkC,QAASmjC,IAERsB,GACAtG,GAAY2C,mBAAqBthC,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACvX,UC5duiB,uBD4dlgBG,MAAM,YAI3F6+B,GACCn/B,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQugC,EACRpgC,QAAS2yB,EACTxxB,MAAON,EAAK,+BACZyF,KAAMzF,EAAK,yBACXi0B,eAAgBmK,EAChB2H,sBAAoB,EACpB/R,aAAch0B,EAAK,gCAGtB+/B,GACC7/B,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQhG,QAAQ4mC,GAChBt/B,MAAOy/B,EAAqBz/B,OArbzB,IAsbHnB,QAASglC,GACT6B,gBAAc,EACd3lC,WACEuG,EAAAA,GAAAA,GClf8pB,wBDkf1nBm5B,EAAqBz/B,OAAOghC,OAAO5lC,QClfoqB,yBDqf5uBqkC,EAAqBnqC,QACtBsK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACZ0/B,EAAqB4B,QAAQhiC,KAAKo1B,GACjC70B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkE,IAAKswB,EAAO//B,IAAM+/B,EAAOjzB,KACzBzB,UAAU,wBACVG,MAAuB,gBAAhBu0B,EAAOjzB,KAAyB,SAAW,UAClDrB,QAAM,EACNtE,KAAK,UAELuE,QAASA,IAAMsjC,GAAiBjP,EAAO//B,KAEtC+/B,EAAOtvB,MAAQzF,EAAKu9B,GAAoBxI,EAAOjzB,YAMpD,KEzbZ,IAAenE,EAAAA,EAAAA,KAxDqBlG,IAA6C,IAA5C,IAAEw5B,EAAG,KAAEnvB,EAAI,yBAAEgzB,GAA0Br9B,EAC1E,MAAM,sBAAEwuC,EAAqB,eAAEC,IAAmB5mC,EAAAA,EAAAA,OAE3C01B,EAAgBmR,IAAqBrgC,EAAAA,EAAAA,IAASgvB,IAA4B,GAE3E90B,GAAOC,EAAAA,EAAAA,KAEPmmC,GAAcriB,EAAAA,EAAAA,GAAYkN,GAAK,GAC/BoV,GAAetiB,EAAAA,EAAAA,GAAYjiB,GAAM,GACjCwkC,EAAarV,GAAOmV,EACpBG,EAAczkC,GAAQukC,EAEtBG,GAAuBhnC,EAAAA,EAAAA,KAAY,KACvC0mC,EAAe,CAAErR,MAAO5D,EAAKj8B,GAAIggC,kBAAiB,GACjD,CAACkR,EAAgBlR,EAAgB/D,IAE9BwV,GAAwBjnC,EAAAA,EAAAA,KAAY,KACxCymC,GAAuB,GACtB,IAEG3lC,EAAiCN,EAAT,SAAhBumC,EAA8B,UAAkB,oBACxD9gC,GAAOlM,EAAAA,EAAAA,KAAQ,KACnB,OAAQgtC,GACN,IAAK,OACH,OAAOvmC,EAAK,0BAA0Bq1B,EAAAA,EAAAA,IAAgBiR,IACxD,IAAK,SACH,OAAOtmC,EAAK,sBAAsBq1B,EAAAA,EAAAA,IAAgBiR,IAEpD,QACE,OAAOtmC,EAAK,6BAA6B,GAE5C,CAACsmC,EAAYC,EAAavmC,IAE7B,OACEE,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQhG,QAAQi4B,GAChB9xB,QAASsnC,EACTnmC,MAAOA,EACP2zB,eAAgBuS,IAEf7lC,EAAAA,GAAAA,GAAW8E,EAAM,CAAC,oBAClBqvB,GACC50B,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP70B,UAAU,kBACV80B,QAASH,EACTI,OAAOz0B,EAAAA,GAAAA,GACLX,EAAK,sCAAuCsmC,GAAYnK,WACxD,CAAC,oBAEH7G,QAAS6Q,IAGC,ICRpB,IAAexoC,EAAAA,EAAAA,KA/C6BlG,IAEtC,IAFuC,IAC3Cw5B,GACDx5B,EACC,MAAM,wBAAEivC,EAAuB,uBAAEC,IAA2BrnC,EAAAA,EAAAA,OACrD01B,EAAgBmR,IAAqBrgC,EAAAA,EAAAA,IAASmrB,GAAK6D,2BAA4B,GAEhF90B,GAAOC,EAAAA,EAAAA,KAEP2mC,GAAU7iB,EAAAA,EAAAA,GAAYkN,GACtB4V,EAAe5V,GAAO2V,EAEtB9T,GAAgBtzB,EAAAA,EAAAA,KAAY,KAChCknC,EAAwB,CACtB1R,kBACA,GACD,CAAC0R,EAAyB1R,IAS7B,OANAh5B,EAAAA,EAAAA,KAAU,KACC,IAAA8qC,EAAL7V,GACFkV,EAA8C,QAA7BW,EAAC7V,EAAI6D,gCAAwB,IAAAgS,GAAAA,EAChD,GACC,CAAC7V,IAGF/wB,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQhG,QAAQi4B,GAChB9xB,QAASwnC,EACTrmC,MAAOumC,GAAcE,UACrB9S,eAAgBnB,GAEf9yB,EAAK,6BAA8B6mC,GAAcE,WACjDF,GAAc/R,0BACb50B,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP70B,UAAU,kBACV80B,QAASH,EACTI,OAAOz0B,EAAAA,GAAAA,GACLX,EAAK,sCAAuC6mC,GAAcE,WAC1D,CAAC,oBAEHzR,QAAS6Q,IAGC,IChBpB,IAAexoC,EAAAA,EAAAA,KAhC0BlG,IAEnC,IAFoC,OACxCuvC,GACDvvC,EACC,MAAM,2BAAEwvC,EAA0B,iBAAEC,EAAgB,0BAAEC,IAA8B7nC,EAAAA,EAAAA,MAC9EU,GAAOC,EAAAA,EAAAA,KAEPjB,EAAShG,QAAQguC,GAEjBI,GAAkBrjB,EAAAA,EAAAA,GAAYijB,IAAWA,EACzCK,EAAeD,GAAiBE,aAEhCC,GAA4B/nC,EAAAA,EAAAA,KAAY,KAC5CynC,IACII,EACFF,EAA0B,CAAEK,SAAUJ,EAAiBpyC,GAAIyyC,wBAAwB,IAEnFP,EAAiB,CAAElyC,GAAIoyC,EAAiBpyC,IAC1C,GACC,CAACqyC,EAAcD,IAElB,OACElnC,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQA,EACRG,QAAS8nC,EACTxhC,KAAqBzF,EAAfqnC,EAAoB,yBAAiC,qBAC3DrT,aAAch0B,EAAK,UACnBi0B,eAAgBsT,EAChBxB,sBAAoB,GACpB,I,0BC1CN,SAAs/B,uBCgDt/B,IAAepoC,EAAAA,EAAAA,KA9B4BlG,IAMrC,IANsC,UAC1CiwC,EAAS,WACTC,EAAU,UACVtnC,EAAS,kBACTunC,EAAiB,WACjBC,GACDpwC,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GD5BG,uBC4ByBvG,IACzCunC,GACC1nC,EAAAA,GAAAA,cAAA,OAAKG,UD9ByF,wBC+B5FH,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GD/BsQ,uBC+B7NghC,EAAmB,UAC1E1nC,EAAAA,GAAAA,cAAA,OAAKG,UDhCuY,uBCgCjW0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAY2vC,GACjFxnC,EAAAA,GAAAA,cAAA,OAAKG,UDjCuL,uBCiC9IynC,wBAAyB,CAAEC,OAzB9D,sTA4Bf7nC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GDpC++B,yBCqC5gC2K,EAAAA,GAAAA,cAAA,OAAKG,UDrCwf,iECqC5d0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,eAC1E4nC,GAAqB1nC,EAAAA,GAAAA,cAAA,OAAKG,UDtC+5B,6CCsCj4BqnC,IAE5DxnC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GDxC8gC,wBCwCl/BG,MAAOmyC,GAChE3nC,EAAAA,GAAAA,cAAA,OAAKG,UDzCmpB,iECyCtnB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,iBAC7EE,EAAAA,GAAAA,cAAA,OAAKG,UD1CgzB,kEC0CjxBsnC,IAElC,IC5BJK,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAetqC,EAAAA,EAAAA,KAxB2BlG,IAMpC,IANqC,MACzC6I,EAAK,YACL4nC,EAAW,UACXR,EAAS,WACTC,EAAU,kBACVQ,GACD1wC,EACC,MAAM+I,GAAQjH,EAAAA,EAAAA,KAAQ,IACbyuC,GAAYroC,KAAI,CAAC6N,EAAOgX,KAAM4jB,EAAAA,GAAAA,IAAK56B,EAAOy6B,GAAUzjB,GAAI2jB,MAC9D,CAACA,IAEJ,OACEjoC,EAAAA,GAAAA,cAAA,OAAKG,UC/Bc,wBDgCjBH,EAAAA,GAAAA,cAAA,OAAKG,UChC2C,wBDgCjBC,GAC/BJ,EAAAA,GAAAA,cAAA,OAAKG,UCjCgF,wBDiChD6nC,GACrChoC,EAAAA,GAAAA,cAACmoC,GAAoB,CACnBX,UAAWA,EACXC,WAAYA,EACZE,WAAa,mBAAkBrnC,EAAM0V,KAAK,UAExC,I,gGEvCV,UAAgB,KAAO,uBAAuB,QAAU,uBAAuB,KAAO,uBAAuB,MAAQ,uBAAuB,MAAQ,wBC6DpJ,IAAevY,EAAAA,EAAAA,KAtCkClG,IAO3C,IAP4C,QAChD6wC,EAAO,mBACPC,EAAkB,OAClBC,EAAM,eACNC,EAAc,MACdtgC,EAAK,SACL+B,GACDzS,EACC,MAAMwC,GAAYJ,EAAAA,EAAAA,GAAU,WAAUyuC,KAChCI,GAAeC,EAAAA,GAAAA,GAAcF,EAAe/tC,SAC5C8Y,GAAuBo1B,EAAAA,GAAAA,GAAmB3uC,GAEhD,OACEiG,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,MACd2K,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACTrR,GAAAA,QACAgzC,GAAsBhzC,GAAAA,QACtBizC,GAAUjzC,GAAAA,MAEZP,GAAK,iCAAgCmT,KAErCjI,EAAAA,GAAAA,cAAA,OAAKjM,IAAK40C,GAAa/wB,IAAI,GAAGzX,UAAW9K,GAAAA,QACzC2K,EAAAA,GAAAA,cAAA,UAAQ8E,IAAK0jC,EAAcroC,UAAW9K,GAAAA,QACtC2K,EAAAA,GAAAA,cAAC4oC,GAAAA,EAAc,CACbC,QAAS7+B,EACT7J,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,MAAcie,GACxCvf,IAAKgG,EACLiY,yBAAuB,EACvB0D,aAAW,EACXnB,OAAK,EACLoB,MAAI,KAGJ,ICzDV,GAAsD,uBAAtD,GAAgK,uBCwFhK,IAAelY,EAAAA,EAAAA,KA1EkBlG,IAI3B,IAJ4B,OAChCiE,EAAM,OACNwyB,EAAM,cACN8a,GACDvxC,EACC,MAAMwxC,EAAY/kC,KAAK2Y,IAAI,EAAG3Y,KAAKoZ,IAAI5hB,EAAS,EAAGwyB,EAAS,IACtDgb,EAAiBD,IAAcvtC,EAAS,EAAI,EAC5CytC,EAAcF,IAAcvtC,EAAS,EACrC0tC,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiBplC,KAAKoZ,IAAI5hB,EAAQ,GAElC6tC,GAAkB/pC,EAAAA,EAAAA,KAAY,KAClCwpC,EAAc9a,EAAS,EAAE,GACxB,CAACA,EAAQ8a,IAENQ,GAAehqC,EAAAA,EAAAA,KAAY,KAC/BwpC,EAAc9a,EAAS,EAAE,GACxB,CAACA,EAAQ8a,IAENS,EAAQvlC,KAAKoZ,IAAI,EAAG5hB,GAE1B,OACEwE,EAAAA,GAAAA,cAAA,YACIgG,EAAAA,IACAhG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,GAAerR,GAAyB,IAAX24B,GAAgB34B,IACxDiL,MAAM,cACN6P,SAAqB,IAAX6d,EACV1qB,OAAK,EACL9C,QAAS8oC,GAETtpC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wBAGjBH,EAAAA,GAAAA,cAAA,OAAKG,UDjDY,uBCiDY3K,MAAQ,iBAAgBuzC,gBAAwBvtC,eAAoB+tC,MAC9FC,MAAMhuC,GAAQiuC,UAAK5xC,GAAW4H,KAAI,CAACiqC,EAAGplB,KACrC,MAAMrc,EAAQqc,EACRqlB,EAAUrlB,IAAMykB,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEY,EAAatlB,IAAMykB,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzE3kB,IAAMykB,EAAYK,EAAiB,GAAKJ,EACxCa,EAAWvlB,IAAMykB,IAAeG,IAAiBC,EACjDW,EAAexlB,IAAMykB,EAAY,IAAOG,IAAiBC,GACzD7kB,IAAMykB,GAAaI,EACnBY,EAAczlB,EAAIykB,GAAazkB,GAAKykB,EAAYK,EACtD,OACEppC,EAAAA,GAAAA,cAAA,OACEQ,QAASA,IAAMsoC,EAAcxkB,GAC7BnkB,WAAWuG,EAAAA,GAAAA,GD9DoK,uBCgE7KuB,IAAU+lB,GDhEqS,wBCiE9S4b,GAAaE,IDjE+L,wBCkE5MH,GAAUE,IDlEiO,uBCmE5OE,GDnE+Q,yBCqEjR,MAIN/jC,EAAAA,IACAhG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,GAAerR,GAAc24B,IAAWxyB,EAAS,GAAKnG,GD3EU,wBC4E3EiL,MAAM,cACNgD,OAAK,EACL6M,SAAU6d,IAAWxyB,EAAS,EAC9BgF,QAAS6oC,GAETrpC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAGb,I,2BCpFV,MC6BM6pC,GASDzyC,IAGC,IAHA,KACJ0E,EAAI,UAAEguC,EAAS,QAAEpB,EAAO,QACxBqB,EAAO,MAAEjiC,EAAK,UAAEkiC,EAAS,QAAE3pC,EAAO,QAAEqV,GACrCte,EACC,MAAMwC,GAAYJ,EAAAA,EAAAA,GAAU,UAASuwC,EAAQp1C,MACvCs1C,GAAkBzwC,EAAAA,EAAAA,GAAU,UAASuwC,EAAQp1C,aAE7Cu1C,EAAwB,IAAVpiC,GACbqiC,EAAYC,EAASC,IAAajoC,EAAAA,EAAAA,GAAQ8nC,GAE3CI,EAAaxuC,EAxBS,GAwBFA,EACpBnB,EAAqB,EAAb2vC,EACRtvC,EAAsB,IAAbsvC,EAITC,EAFIziC,EAAQkiC,GAEW,EAAVnmC,KAAK2mC,IAClB7xB,EAAQuxB,EAAc,EAAI,IAE1BzxB,EAAI5U,KAAK4mC,IAAIF,GAAS5vC,EAAqB,IAAb2vC,EAC9B5xB,EAAI7U,KAAK6mC,IAAIH,GAASvvC,EAEtB0Y,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQypC,EAAU,GACjB,CAACzpC,EAASypC,IAEP/1B,GAAc5U,EAAAA,EAAAA,KAAY,KAC9BkrC,IACA30B,GAAS,GACR,CAAC20B,EAAW30B,IAQf,OANA/Z,EAAAA,EAAAA,KAAU,KACJuuC,GACFE,GACF,GACC,CAACF,EAAaE,IAGfvqC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGqqC,GACCrqC,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACd3qC,UD/EkJ,4CCgFlJ4qC,OAAQX,EACRY,KAAMnC,EACNoC,eAAa,EACbC,QAAM,EACNjvC,KA3DqB,GA2DUA,EAC/BzG,MAAQ,aAAYojB,oBAAoBC,SAG5C7Y,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACd3qC,UDzFgD,uBC0FhD4qC,OAAQhxC,EACRixC,KAAMnC,GAAWyB,EACjBY,QAAM,EACNjvC,KArEsB,GAqEQA,EAC9BzG,MAAQ,QAAOojB,aAAaC,mBAAmBC,IAC/CtY,QAASqT,EACTgC,QAAS3B,IAEV,EAqDP,IAAezW,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLwtC,SAAUxtC,EAAOwtC,SAASC,QAAQD,YAHpBztC,EAlD6CgC,IAE3D,IAF4D,SAChEyrC,EAAQ,SAAEnhC,GACXtK,EAEC,MAAM6Y,GAAe7d,EAAAA,EAAAA,IAAuB,OACrCyR,EAAQk/B,IAAazlC,EAAAA,EAAAA,IAAS,IAC9B3J,EAAMqvC,IAAW1lC,EAAAA,EAAAA,IAAS,GAE3B2lC,EAAmBJ,GAAUK,MAAM,EAnFxB,IAqFX33B,GAAcvU,EAAAA,EAAAA,KAAaglB,IAC/B+mB,GAAW/mB,EAAE,GACZ,IAEGpQ,GAAc5U,EAAAA,EAAAA,KAAY,KAC9BjD,YAAW,KACTgvC,GAAWxwC,IAAY4wC,EAAAA,GAAAA,GAAcF,EAAiB/vC,OAAQX,EAAU,IAAG,GA1F7D,IA2FD,GACd,CAAC0wC,EAAiB/vC,SASrB,OAPAM,EAAAA,EAAAA,KAAU,KACR,MAAMtH,EAAY+jB,EAAa1d,QAC1BrG,GAEL82C,EAAQ92C,EAAUK,QAAQ,iBAAkB8X,YAAY,GACvD,IAGD3M,EAAAA,GAAAA,cAAA,OACEG,UDlIiB,uBCmIjB2E,IAAKyT,GAEJgzB,GAAkB9rC,KAAI,CAACisC,EAAGpnB,IAEvBtkB,EAAAA,GAAAA,cAACgqC,GAAqB,CACpB/tC,KAAMA,EACNiuC,QAASwB,EACTzB,UAAW3lB,EACXrc,OAAQqc,EAAInY,EAASo/B,EAAiB/vC,QAAU+vC,EAAiB/vC,OACjE2uC,UAAWoB,EAAiB/vC,OAC5BgF,QAASqT,EACTgC,QAAS3B,EACT20B,QAAS7+B,MAIX,KCnJV,GAAmW,uBAAnW,GAAkY,uBAAlY,GAAmqB,uBAAnqB,GAAwsB,uBCuB3rB2hC,GAAiD,CAC5DC,cAAe,uBACfC,mBAAoB,2BACpBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,iCACnBC,aAAc,6BAGHC,GAAuD,CAClEZ,cAAe,kCACfC,mBAAoB,sCACpBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,4CACnBC,aAAc,wCAGHE,GAA2B,CACtC,gBACA,cACA,kBACA,gBACA,SACA,qBACA,mBACA,iBACA,2BACA,gBACA,oBACA,gBAGIC,GAAkC,CACtC,kBACA,gBACA,2BACA,gBACA,oBACA,gBAKIC,GAA4C,CAChD,WACA,qBACA,iBACA,YACA,gBACA,cACA,gBACA,gBACA,sBAGIC,GAA2D,CAC/DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,2BAGhBC,GAAiE,CACrET,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,8BA2MtB,IAAe5vC,EAAAA,EAAAA,KA7L2BlG,IAOpC,IAPqC,MACzCg2C,EAAK,eACLC,EAAc,OACdrzB,EAAM,iBACNszB,EAAgB,UAChBC,EAAS,OACTC,GACDp2C,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEP6tC,GAAqBlzC,EAAAA,EAAAA,IAAuB,OAC3CmzC,EAAmBC,IAAwBloC,EAAAA,EAAAA,IAAS6mC,GAAyBhoB,QAAQ+oB,KACrFO,EAA4BC,IAAiCpoC,EAAAA,EAAAA,IAAS,IACtEqoC,EAAaC,EAAgBC,IAAiB5rC,EAAAA,EAAAA,MAE9C6rC,EAAiBC,IAAsBzoC,EAAAA,EAAAA,KAAS,IAChD0oC,EAAoBC,IAAyB3oC,EAAAA,EAAAA,KAAS,GAEvD4oC,GAAqB3qB,EAAAA,EAAAA,GAAY2pB,GA6BvC,SAASiB,EAAmB9nC,GAC1B,MAAM,UAAE1R,EAAS,aAAEkR,EAAY,aAAEuoC,GAAiB/nC,EAAEqN,cACpDq6B,EAAmBp5C,GA5DE,IA6DrBs5C,EAAsBt5C,GAAay5C,EAAevoC,EA7D7B,GA8DvB,EAEArK,EAAAA,EAAAA,KAAU,KACR,MAAM6yC,EAAkBf,EAAmB/yC,QAC3C,IAAK8zC,GAAoBH,IAAuBhB,EAAiB,OAEjE,MAAMvlC,EAAQwkC,GAAyBhoB,QAAQ+oB,GAC/CM,EAAqB7lC,GACrBimC,KACAU,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBhiC,YAAc1E,EAAO,GAC3E4mC,KAAKV,EAAc,GACrB,CAACN,EAAmBL,EAAgBgB,EAAoBN,EAAgBC,IAE3E,MAAMW,GAAoBxvC,EAAAA,EAAAA,KAAY6J,UACpC,MAAMwlC,EAAkBf,EAAmB/yC,QACtC8zC,IAELb,EAAqB7lC,GAErBimC,UACMU,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgBhiC,YAAc1E,EAAO,KACpFkmC,IAAe,GACd,CAACD,EAAgBC,IAGdzY,EAAQ6X,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAEpD,OACElvC,EAAAA,GAAAA,cAAA,OAAKG,UD7Mc,wBC8MjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLkE,WAAWuG,EAAAA,GAAAA,GDjN4L,uBCiNpI,IAAtBmnC,GDjN8O,wBCkN3RvtC,MAA6B,IAAtButC,EAA0B,cAAgB,oBACjDrtC,QAAS2Z,EACT5W,UAAWzD,EAAK,SAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAGfH,EAAAA,GAAAA,cAAA,OAAKG,UDzNynB,yBC2N9nBH,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GD3N8S,uBC2N/Q,gBAAiByoC,SArEpE,SAAsBxoC,GACpB,MAAM,YAAEgG,EAAayiC,WAAYC,GAAuB1oC,EAAEqN,cAEpDo7B,EAAaprC,KAAKV,MAAM+rC,GAGxB5qC,EADO2qC,EAAcziC,EACFA,EACzBhG,EAAEqN,cAAcxe,MAAM85C,YAAY,oBAAqB7qC,EAAS8qC,YAChE5oC,EAAEqN,cAAcxe,MAAM85C,YAAY,wBAAyBtrC,KAAKiZ,IAAIxY,GAAU8qC,YAC9E,MAAMC,EAAexrC,KAAKyrC,MAAML,EAAa,GAAKziC,GAElDqhC,EAA8BwB,GAE9B,MAAME,EAAc/oC,EAAEqN,cAAc3f,cAAe,mCAAiCm7C,EAAe,IAC7FG,EAAiBhpC,EAAEqN,cAAc3f,cAAe,kCAAiCm7C,KAIvF,GAHAE,GAAal8C,UAAUuxB,OAAO,WAAW,GACzC4qB,GAAgBn8C,UAAUuxB,OAAO,WAAW,GAExCkpB,EAAa,OACjB,MAAM2B,EAAQ5rC,KAAKV,MAAM8rC,EAAaziC,GACtCmhC,EAAqB8B,EACvB,EAgD4F9qC,IAAK8oC,GAE1FnB,GAAyBhtC,KAAI,CAACowC,EAAS5nC,KACtC,GAAgB,kBAAZ4nC,EACF,OACE7vC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GDhOqX,yBCiOlZ2K,EAAAA,GAAAA,cAAA,MAAIG,WAAWuG,EAAAA,GAAAA,GDjOkf,uBCiOpd0nC,GDjOsiB,yBCkOhlBtuC,EAAK6rC,GAAuBC,gBAE/B5rC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GDpOid,uBCoO5a,iBAAkByoC,SAAUV,GAC9E9B,GAAaltC,KAAI,CAACof,EAAOyF,KACxB,MAAMwrB,EAAenC,IAAS9uB,GAAO,GAAG0wB,WAClCQ,EAAepC,IAAS9uB,GAAO,GAAG0wB,WACxC,OACEvvC,EAAAA,GAAAA,cAACgwC,GAAmB,CAClB5vC,MAAON,EAAK8sC,GAAc/tB,IAC1BmpB,YAAaloC,EAAKwtC,GAAoBzuB,GAAQkxB,GAC9CvI,UAAWsI,EACXrI,WAAYsI,EACZ9H,kBAAmB3jB,GAAKqoB,GAAanxC,OAAS,IAC9C,MAQd,GAAgB,qBAAZq0C,EACF,OACE7vC,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAACiwC,GAA6B,CAACjmC,SAAU6jC,IAAsB5lC,KAEjEjI,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,IACZyK,EAAK6rC,GAAuBG,mBAE/B9rC,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,KACboL,EAAAA,GAAAA,GAAWX,EAAK0sC,GAA6BV,kBAAmB,CAAC,SAM1E,MAAMxnB,EAAIipB,EAAM2C,cAAczrB,QAAQorB,GACtC,OAAW,IAAPvrB,EAEFtkB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAACmwC,GAA0B,CACzBnmC,SAAU6jC,IAAsB5lC,EAChCmgC,QAASmF,EAAM6C,OAAO9rB,GAAGxvB,GACzByzC,eAAgBgF,EAAM6C,OAAO9rB,GAAG+rB,UAChC/H,OAAQoE,GAAsB33C,SAAS86C,GACvC5nC,MAAOA,EACPogC,mBAAoBpgC,IAAU8lC,KAGlC/tC,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,IACZyK,EAAK6rC,GAAuB4B,EAAM2C,cAAc5rB,MAEnDtkB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,KACboL,EAAAA,GAAAA,GAAWX,EAAK0sC,GAA6Be,EAAM2C,cAAc5rB,KAAO,CAAC,cAjBhF,CAmBQ,KAMZtkB,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GDlSqtB,wBCoS7tB4nC,GAA4C,IAAtBT,IDpSyxB,yBCuSlzB7tC,EAAAA,GAAAA,cAACswC,GAAU,CACT90C,OAAQixC,GAAyBjxC,OACjCwyB,OAAQ6f,EACR/E,cAAegG,IAEjB9uC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,GD7SkC,wBC8S7C6pC,SAAU7C,EACV8C,qBAAsB9C,EACtBltC,QAASktC,EAAYvzB,EA9J7B,WACEszB,EAAiBD,EACnB,GA8JSE,EACG5tC,EAAK,MACLA,EAAK,sBAAsB2wC,EAAAA,GAAAA,GAAe77B,OAAO8gB,EAAMgb,QAAShb,EAAMib,SAAU7wC,EAAKw5B,SAGzF,I,2BCvTV,UAAgB,KAAO,uBAAuB,KAAO,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,KAAO,wBCgBlJsX,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAqBzD,IAAenzC,EAAAA,EAAAA,KAlB0BlG,IAMnC,IANoC,KACxCuM,EAAI,MACJ1D,EAAK,KACLmF,EAAI,MACJ0C,EAAK,QACLzH,GACDjJ,EACC,OACEyI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAAC4jB,gBAAiBx7C,GAAAA,KAAamL,QAASA,GAC/CR,EAAAA,GAAAA,cAAA,OAAKjM,IAAK+P,EAAM3D,UAAW9K,GAAAA,KAAauiB,IAAI,GAAGpiB,MAAQ,iBAAgBo7C,GAAO3oC,OAC9EjI,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,MACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,QAAeoL,EAAAA,GAAAA,GAAWL,EAAO,CAAC,QAClDJ,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,aAAqBkQ,IAE9B,I,wmBCnCf,GAAisB,uBCgD3rBurC,GAAsD,CAC1DlF,cAAemF,GACflF,mBAAoBmF,GACpBlF,iBAAkBmF,GAClBlF,eAAgBmF,GAChBlF,OAAQmF,GACRlF,cAAemF,GACflF,cAAemF,GACflF,gBAAiBmF,GACjBlF,YAAamF,GACblF,yBAA0BmF,GAC1BlF,kBAAmBmF,GACnBlF,aAAcmF,IAkQhB,IAAej0C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,aACJg0C,IACEt7B,EAAAA,EAAAA,IAAe1Y,GACnB,MAAO,CACL4kB,cAAe5kB,EAAO4kB,cACtBgrB,MAAOoE,GAAcpE,MACrBqE,UAAWD,GAAcC,UACzBC,UAAWF,GAAcE,UACzBC,OAAQH,GAAcG,OACtBC,aAAcJ,GAAcI,aAC5BC,SAAUL,GAAcM,YAAazzC,EAAAA,EAAAA,IAAWb,EAAQg0C,EAAaM,iBAAcp6C,EACnFq6C,OAAQP,GAAcQ,UAAW3zC,EAAAA,EAAAA,IAAWb,EAAQg0C,EAAaQ,eAAYt6C,EAC7E21C,eAAgBmE,GAAcnE,eAC9BE,WAAW0E,EAAAA,EAAAA,IAA2Bz0C,GACtC00C,eAAeC,EAAAA,GAAAA,GAAmB30C,EAAQ,YAC1C40C,cAAcD,EAAAA,GAAAA,GAAmB30C,EAAQ,iBACzC60C,WAAWF,EAAAA,GAAAA,GAAmB30C,EAAQ,sBACtC80C,YAAYH,EAAAA,GAAAA,GAAmB30C,EAAQ,kBACvCgwC,OAAQhwC,EAAO+0C,WAAW/E,OAC1BgF,YAAah1C,EAAO+0C,WAAWE,mBAC/BC,mBAAoBl1C,EAAO+0C,WAAWG,mBACtCC,kBAAmBn1C,EAAO+0C,WAAWI,kBACtC,GAvBiBp1C,EAtOgCnG,IAoB9C,IApB+C,OACnDuH,EAAM,cACNyjB,EAAa,SACbyvB,EAAQ,MACRzE,EAAK,eACLC,EAAc,UACdE,EAAS,cACT2E,EAAa,WACbI,EAAU,aACVF,EAAY,UACZC,EAAS,OACT7E,EAAM,YACNgF,EAAW,mBACXE,EAAkB,UAClBjB,EAAS,UACTC,EAAS,OACTC,EAAM,OACNI,EAAM,aACNH,EAAY,kBACZe,GACDv7C,EAEC,MAAMw7C,GAAYr4C,EAAAA,EAAAA,IAAuB,OACnC,kBACJs4C,EAAiB,YAAExU,EAAW,gBAAEyU,EAAe,iBAAE3U,IAC/Cl/B,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACNmzC,EAAgBC,IAAmBvtC,EAAAA,EAAAA,KAAS,IAC5CwtC,EAAgBC,IAAqBztC,EAAAA,EAAAA,IAA6B4nC,GAEnEha,GAAal0B,EAAAA,EAAAA,KAAauwC,GACvB,KACLwD,EAAkBxD,EAAQ,GAE3B,IAQH,SAASyD,EAA0BtiB,GAClB+hB,EAAUl4C,UAGrB83C,EACFnU,EAAY,CACViC,KAAMkS,IAECE,IACTvU,EAAiB,CACfz2B,IAAM,GAAE84B,EAAAA,MAAkBkS,WAA4B7hB,GAAc,YAEtEgiB,KAEJ,CAMA,MAAMO,GAAej0C,EAAAA,EAAAA,KAAY,KAC/B,MAAMuyB,EAASkhB,EAAUl4C,QACzB,GAAKg3B,GACD/yB,EAAQ,CACV,MAAM,IACJkU,EAAG,KAAEnH,EAAI,MAAE/Q,EAAK,OAAEK,GAChB02B,EAAOx9B,cAAc,kBAAmB6X,wBAC5C+mC,EAAgB,CACdjgC,MACAnH,OACA/Q,QACAK,UAEJ,IACC,CAAC2D,EAAQm0C,KAEZn3C,EAAAA,EAAAA,KAAU,KACJ+1C,GACF0B,GACF,GACC,CAAC1B,EAAW0B,KAEf34C,EAAAA,EAAAA,IAAc8E,IAAqB,IAAnB8zC,GAAc9zC,EACxB8zC,IAAkB9F,GAEtB6F,GAAc,GACb,CAAC7F,EAAW6F,IAEf,MAAME,GAAmBp6C,EAAAA,EAAAA,KAAQ,IAC1By5C,EACEA,EAAkBvkB,QAAQshB,GAAYpD,GAAyB13C,SAAS86C,KADhDpD,IAE9B,CAACqG,IAEJ,IAAKvF,EAAO,OAGZ,MAAM7X,EAAQ6X,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAyCpD,OACElvC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UDtOiB,uBCwOjBoqB,oBAAqBA,IAAMyoB,EAAkB,CAAEU,UAAU,IACzDz0C,QAAS+zC,EACTl0C,OAAQA,IAAW8yC,EACnBmB,UAAWA,GAEX/yC,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CAACphB,KAAK,QAAQqhB,UAAW2pB,EAAiB,EAAI,EAAGjzC,UD7OP,wBC8OjDizC,EAiEApzC,EAAAA,GAAAA,cAAC2zC,GAAmB,CAClBnG,eAAgB4F,EAChBj5B,OAAQqZ,OAAW37B,GACnB01C,MAAOA,EAEPE,iBAAkB6F,EAClB5F,UAAWA,EACXC,OAAQA,IAvEV3tC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GD/O+F,uBC+OnE,iBAAkByoC,SAlHtE,SAAsBxoC,GACpB,MAAM,UAAE1R,GAAc0R,EAAEqN,cAExBm/B,EAAgBl+C,GAAa,IAC/B,GA+GU+K,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLkE,UDnPkhB,uBCoPlhBG,MAAM,cAENE,QAASA,IAAMwyC,IACfzvC,UAAWzD,EAAK,UAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UD3PsI,uBC2P9GpM,IAAK6/C,GAAah8B,IAAI,KACnD5X,EAAAA,GAAAA,cAAA,MAAIG,UD5PgN,yBC6PjNM,EAAAA,GAAAA,GA/DPqxC,EACKE,GAAUl9C,KAAOytB,EACpBziB,EAAK,sDAAuD,EAACq1B,EAAAA,EAAAA,IAAgB+c,GAASH,IACtFjyC,EAAK,8CAA+C,EAACq1B,EAAAA,EAAAA,IAAgB6c,GAAWD,IAG/EC,EACHlyC,EAAK,kCAAkCq1B,EAAAA,EAAAA,IAAgB6c,IACvDlyC,EAAK4tC,EAAY,iCAAmC,mBAuDjB,CAAC,kBAAmB,WAEnD1tC,EAAAA,GAAAA,cAAA,OAAKG,UD/PoP,yBCgQtPM,EAAAA,GAAAA,GAtDPqxC,EACKE,GAAUl9C,KAAOytB,EACpBziB,EAAK,0DAA0Dq1B,EAAAA,EAAAA,IAAgB+c,IAC/EpyC,EAAK,kDAIPA,EADGkyC,EACE,oCACAtE,EAAY,oCAAsC,2BA8Cb,CAAC,kBAAmB,WAE1D1tC,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GDlQ4W,uBCkQ9UwsC,GDlQ2Z,yBCmQvclzC,EAAAA,GAAAA,cAAA,MAAIG,UDnQsmB,wBCoQvmBL,EAAK,qBAIVE,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GDxQuQ,uBCwQ3OgnC,GDxQgT,yBCyQzV+F,EAAiBh0C,KAAI,CAACowC,EAAS5nC,IAE5BjI,EAAAA,GAAAA,cAAC6zC,GAAkB,CACjBtvC,IAAKsrC,EACLzvC,MAAON,EAAK6rC,GAAuBkE,IACnCtqC,KAAkB,kBAAZsqC,EACF/vC,EAAK0sC,GAA6BqD,GAClC,CAACwC,EAAeE,EAAcC,EAAWC,EAlO1C,IAmOC3yC,EAAK0sC,GAA6BqD,IACtC/rC,KAAMgtC,GAA4BjB,GAClC5nC,MAAOA,EACPzH,QAASgzB,EAAWqc,OAI1B7vC,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAerR,GDzR+uB,wBC0RzwBwR,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAE1BmI,EAAAA,GAAAA,cAAA,UACGS,EAAAA,GAAAA,GAAWX,EAAK,2BAA4B,CAAC,qBAEhDE,EAAAA,GAAAA,cAAA,UACGS,EAAAA,GAAAA,GAAWX,EAAK,4BAA6B,CAAC,sBA3E/D,WACE,GAAKytC,KAAUuE,GAAUE,GAAUl9C,KAAOytB,GAI1C,OACEviB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAmBwR,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IAC1Di8C,EAAAA,GAAAA,GAAuB,CACtBvuC,KAAMgoC,EAAMwG,WACZC,SAAUzG,EAAM0G,iBAIxB,CAiEaC,KAEDxG,GACA1tC,EAAAA,GAAAA,cAAA,OAAKG,UDtSsyB,wBCwSzyBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UDxSmE,uBCwSzCowC,SAAO,EAACC,qBAAmB,EAAChwC,QArJ5E,WACE8yC,GACF,GAoJiBxzC,EAAK,sBAAsB2wC,EAAAA,GAAAA,GAAe77B,OAAO8gB,EAAMgb,QAAShb,EAAMib,SAAU7wC,EAAKw5B,WAiB5F,K,eC1TZ,MC8DA,IAAe77B,EAAAA,EAAAA,KA5CkBlG,IAE3B,IAF4B,OAChC03C,EAAM,QAAEha,EAAO,kBAAEkf,EAAiB,SAAEvkC,GACrCrY,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MAEP,OAAEmvC,EAAM,OAAEwB,EAAM,SAAEC,GAAa1B,EAC/BmF,EAAWpwC,KAAKyH,MAAMilC,EAASxB,GAE/BmF,GAAWh7C,EAAAA,EAAAA,KAAQ,IAChB86C,GAAqBA,EAAoBC,EAC5CpwC,KAAKyrC,KAAK,IAAM2E,GAAYD,EAAoB,WAChDt8C,GACH,CAACs8C,EAAmBC,IAEjBE,GAAeh1C,EAAAA,EAAAA,KAAaqH,IAC5BA,EAAEwV,OAAO8Y,SACXrlB,EAASs/B,EACX,GACC,CAACA,EAAQt/B,IAEZ,OACE5P,EAAAA,GAAAA,cAAA,SAAOG,WAAWuG,EAAAA,GAAAA,GDvCI,uBCuC2BuuB,GDvCK,wBCuCsBpuB,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACpGmI,EAAAA,GAAAA,cAAA,SACEG,UDzCiF,uBC0CjFyB,KAAK,QACLwG,KAAK,cACLuH,MAAOu/B,EACPja,QAASA,EACTrlB,SAAU0kC,IAEZt0C,EAAAA,GAAAA,cAAA,OAAKG,UDhD+G,wBCiDlHH,EAAAA,GAAAA,cAAA,OAAKG,UDjD4I,wBCiDlHL,EAAK,SAAUovC,IAC9ClvC,EAAAA,GAAAA,cAAA,OAAKG,UDlD8K,wBCmDhLL,EAAK,iBAAiB2wC,EAAAA,GAAAA,GAAe2D,EAAUzD,EAAU7wC,EAAKw5B,OAC9DxgC,QAAQu7C,IACPr0C,EAAAA,GAAAA,cAAA,QAAMG,UDrD2O,uBCqD/MC,MAAON,EAAK,iBAAiB,KAASu0C,EAAS,OAGrFr0C,EAAAA,GAAAA,cAAA,OAAKG,UDxD8M,yBCwDnLswC,EAAAA,GAAAA,GAAeC,EAAQC,EAAU7wC,EAAKw5B,QAElE,IC2GZ,IAAe77B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,UAAE42C,EAAS,gBAAEC,EAAe,cAAEC,IAAkBp+B,EAAAA,EAAAA,IAAe1Y,GAAQ+2C,kBAAoB,CAAC,EAC5FxyB,EAAOqyB,GAAY/1C,EAAAA,EAAAA,IAAWb,EAAQ42C,QAAa18C,EAGzD,MAAO,CACLqqB,OACAyyB,MAJYzyB,GAAOY,EAAAA,EAAAA,IAAmBnlB,EAAQukB,EAAKptB,KAAK8/C,kBAAe/8C,EAKvE28C,kBACAC,cAAeA,EAAgB7/B,OAAO6/B,QAAiB58C,EACxD,GAViB6F,EA/HgCnG,IAM9C,IAN+C,OACnDuH,EAAM,KACNojB,EAAI,MACJyyB,EAAK,gBACLH,EAAe,cACfC,GACDl9C,EACC,MAAM,iBAAEs9C,EAAgB,sBAAEC,EAAqB,QAAEC,IAAY31C,EAAAA,EAAAA,MAEvDU,GAAOC,EAAAA,EAAAA,KACPi1C,GAAetlB,EAAAA,GAAAA,GAAiBxN,GAAM,GACtC+yB,GAAgBvlB,EAAAA,GAAAA,GAAiBilB,GAAO,IACvCO,EAAgBC,IAAqBvvC,EAAAA,EAAAA,MACtCwvC,EAAYH,IAAgB,GAC5Bd,GAAoB96C,EAAAA,EAAAA,KAAQ,KAChC,IAAK47C,GAA0C,IAAzBA,EAAcz5C,SAAiB45C,EACnD,OAGF,MAAMC,EAAcJ,EAAcrpB,QAAO,CAACC,EAAKypB,IACtCA,EAAK5E,OAAS0E,GAAW1E,OAAS4E,EAAOF,GAC/CA,GAEH,OAAOC,EAAY1E,WAAa6D,GAAmBC,EAC/CA,EACAzwC,KAAKyH,MAAM4pC,EAAY3E,OAAS2E,EAAYnG,OAAO,GACtD,CAACkG,EAAWH,EAAeR,EAAeD,KAE7C14C,EAAAA,EAAAA,KAAU,KACJgD,GACFq2C,EAAkBC,GAAWlG,OAC/B,GACC,CAACkG,GAAWlG,OAAQpwC,IAEvB,MAAMy2C,GAAel8C,EAAAA,EAAAA,KAAQ,IACpB47C,GAAejG,MAAMsG,GAASA,EAAKpG,SAAWgG,KACpD,CAACD,EAAeC,IAEbzb,GAAen6B,EAAAA,EAAAA,KAAY,KAC1Bi2C,IAILT,IACAC,EAAQ,CAAEltC,IAAK0tC,EAAaC,SAAS,GACpC,CAACV,EAAuBC,EAASQ,IAE9BE,GAAqBn2C,EAAAA,EAAAA,KAAY,KACrCu1C,GAAkB,GACjB,CAACA,IAoBJ,OACE70C,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,QAAS61C,EACTh2C,OAAQA,EACRqB,UC/GwB,wBDiHxBH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLkE,UCrHyD,uBDsHzDG,MAAM,cAENE,QAASA,IAAMs0C,IACfvxC,UAAWzD,EAAK,UAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLC,KAAM8yB,EACN/4C,KAAK,QACLkE,UChIyF,yBDkI3FH,EAAAA,GAAAA,cAAA,MAAIG,UClI2H,wBDmI5HL,EAAK,6BAERE,EAAAA,GAAAA,cAAA,KAAGG,UCrIiK,yBDsIjKM,EAAAA,GAAAA,GACCX,EAAK,kCAAkCvB,EAAAA,EAAAA,IAAuBy2C,IAC9D,CAAC,QAAS,qBAIdh1C,EAAAA,GAAAA,cAAA,OAAKG,UC5IyO,wBD6I3O80C,GAAex1C,KAAK61C,GACnBt1C,EAAAA,GAAAA,cAAC01C,GAAU,CACTnxC,IAAK+wC,EAAK5E,OACVzB,OAAQqG,EACRnB,kBAAmBA,EACnBlf,QAASqgB,EAAKpG,SAAWgG,EACzBtlC,SAAUulC,OA1DtB,WACE,MAEMQ,EAFO71C,EAAK,mCAEC81C,MAAM,0BAEzB,GAAKD,KAASA,EAAMn6C,OAAS,GAI7B,OACEwE,EAAAA,GAAAA,cAAA,KAAGG,UCnG4M,wBDoG5Mw1C,EAAM,GACP31C,EAAAA,GAAAA,cAAC61C,GAAAA,EAAI,CAACC,WAAS,EAACt1C,QAASi1C,GAAqBE,EAAM,IACnDA,EAAM,GAGb,CA+COI,IAGH/1C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UC3JwQ,uBD2J9OowC,SAAO,EAACpgC,UAAW+kC,EAAgB10C,QAASi5B,GAC3E35B,EACC,sBACAy1C,IAAgB9E,EAAAA,GAAAA,GAAe77B,OAAO2gC,EAAa7E,QAAS6E,EAAa5E,SAAU7wC,EAAKw5B,QAGtF,KE7IN0c,GAA2D,CAC/D3I,mBAAoB,4BACpB4I,mBAAoB,uBACpB7I,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,0BACVqJ,gBAAiB,0BACjBC,eAAgB,6BAGZC,GAAmE,CACvE/I,mBAAoB,kCACpB4I,mBAAoB,6BACpB7I,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,gCACVqJ,gBAAiB,gCACjBC,eAAgB,mCAGZE,GAAmE,CACvEhJ,mBAAoB,mCACpB4I,mBAAoB,8BACpB7I,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,iCACVqJ,gBAAiB,iCACjBC,eAAgB,oCAGZG,GAAoD,CACxDjJ,mBAAoB,kBACpB4I,mBAAoB,kBACpB7I,cAAe,oBACfN,mBAAoB,iBACpBC,eAAgB,kBAChBF,SAAU,mBACVqJ,gBAAiB,kBACjBC,eAAgB,qBAGZI,GAA4F,CAChGN,mBAAoBA,CAACn2C,EAAc6P,IAEnB,MAAVA,EAAuB7P,EAAK,cAAe,KACjC,MAAV6P,EAAuB7P,EAAK,cAAe,MACxCgQ,EAAAA,GAAAA,IAAehQ,EAAM6P,EAAQ6mC,EAAAA,MA6IxC,IAAe/4C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA4B,IAA1B,MAAEgf,GAAOhf,EAChB,MAAM,OAAE8tC,GAAWhwC,EAAO+0C,WAAa,CAAC,EAClChF,GAAY0E,EAAAA,EAAAA,IAA2Bz0C,GAE7C,MAAO,CACL84C,aAAc53B,EAAQ8uB,IAAS9uB,GAAO,QAAKhnB,EAC3C6+C,aAAc73B,EAAQ8uB,IAAS9uB,GAAO,QAAKhnB,EAC3C8+C,gBAAgBC,EAAAA,EAAAA,IAA+Bj5C,GAC/C+vC,YACD,GAVehwC,EA5FwCgC,IAMtD,IANuD,aAC3D+2C,EAAY,aACZC,EAAY,MACZ73B,EAAK,UACL6uB,EAAS,cACTiJ,GACDj3C,EACC,MAAM,uBAAEm3C,EAAsB,iBAAEhC,IAAqBz1C,EAAAA,EAAAA,MAC/CU,GAAOC,EAAAA,EAAAA,MAEN6xC,EAAWkF,EAAcC,IAAex0C,EAAAA,EAAAA,KAEzCsR,GAAcvU,EAAAA,EAAAA,KAAY,KAC9Bu1C,IACAiC,GAAc,GACb,CAACjC,EAAkBiC,KAEtBh7C,EAAAA,EAAAA,KAAU,MACH+iB,GAAS+yB,GAAWmF,GAAa,GACrC,CAACnF,EAAW/yB,EAAOk4B,IAEtB,MAAM32C,EAAQN,EAAK,gBACbk3C,EAAiBn4B,GAAS03B,GAAsB13B,GAChDmpB,EApER,SAA8BzwC,GAgB3B,IAhB4B,KAC7BuI,EAAI,UACJm3C,EAAS,UACTvJ,EAAS,cACTiJ,EAAa,aACbF,EAAY,aACZC,EAAY,eACZM,GASDz/C,EACC,IAAK0/C,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAel3C,EAAM22C,GAAgBA,EAC9EU,EAAwBH,EAAiBA,EAAel3C,EAAM42C,GAAgBA,EAEpF,OAAIhJ,EACK5tC,EAAKu2C,GAA0BY,GAAYE,GAG7CR,EACH72C,EAAKk2C,GAAkBiB,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjFr3C,EAAKs2C,GAA0Ba,GAAYC,EACjD,CAoCsBE,CAAsB,CACxCt3C,OACAm3C,UAAWp4B,EACX6uB,YACAiJ,gBACAF,eACAC,eACAM,mBAEIlzC,EAAO+a,GAASy3B,GAAWz3B,GAC3Bw4B,EAAaV,IAAkBjJ,EAErC,OACE1tC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,QAAS63C,EACTvsB,oBAAqBssB,EACrB/3C,OAAQhG,QAAQ+lB,KAAW+yB,EAC3BxxC,MAAOA,EACPD,UC/JiB,yBDiKfk3C,GACAr3C,EAAAA,GAAAA,cAAA,OAAKG,UClKgK,wBDmKnKH,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GCnKqS,uBDmKpQ5C,EAAM,UACrD9D,EAAAA,GAAAA,cAAA,OAAKG,UCpKuO,wBDoKxM62C,IAClCl3C,EAAM4tC,EAAYgJ,EAAeD,KAC7B/I,EAAYgJ,EAAeD,KAKpCY,GACCr3C,EAAAA,GAAAA,cAACmoC,GAAoB,CACnBhoC,UC7K0F,uBD8K1FqnC,UAAWwP,IAAiBl3C,EAAM22C,IAAiBA,GAAclH,WACjE9H,WAAYuP,IAAiBl3C,EAAM42C,IAAiBA,GAAcnH,WAClE7H,kBAAmB5jC,IAIvB9D,EAAAA,GAAAA,cAAA,YACGS,EAAAA,GAAAA,GAAWunC,GAAe,GAAI,CAAC,kBAAmB,QAGrDhoC,EAAAA,GAAAA,cAAA,OAAKG,UCxLiY,wBDyLpYH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAASs2C,EACTx2C,MAAM,WAELR,EAAKu3C,EAAa,SAAW,OAE/BA,GAEDr3C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,GAAe,wBCpM2b,wBDqMrd6pC,SAAO,EACP/vC,QAASqT,EACTvT,MAAM,WAELR,EAAK,iBACNE,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GC1MghB,uBD0M9e,OAAQ,yBAItD,K,2EEtMZ,MAEM4wC,GAA4B,IAAMxxB,EAAAA,IAGlCyxB,GAAe,GAAMnxC,EAAAA,GAEpB,SAASoxC,GACdj/B,EACAyM,EACAyyB,EACA3xC,GAEA,MAAM4xC,GAA6Bh9C,EAAAA,EAAAA,IAAkB,KAE9Ci9C,EAAgBC,IAAqBhyC,EAAAA,EAAAA,IAAiB,IAG3DiyC,QAASC,EACTC,OAAQC,EACRC,SAAUC,IACRC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7/B,IACP8/B,IACF,MAAMC,EAA0BZ,EAA2B78C,QAE3Dw9C,EAAQrwC,SAASuwC,IACf,MAAMtwC,EAAQ2M,OAAO2jC,EAAMp8B,OAAOrnB,GAAG6kC,QAAS,GAAE8d,KAAa,KAC7Da,EAAwBrwC,GAASswC,EAAMC,cAAc,IAGvD,MAAMC,EAAuBH,EAAwB1sB,QAAO,CAAC8sB,EAAaF,EAAgBvwC,IACjFuwC,GAAkBvwC,EAAQywC,EAAczwC,EAAQywC,GACtDC,KAECF,IAAyBE,KAI7Bf,EAAkBa,EAAqB,KAIvCZ,QAASe,EACTb,OAAQc,EACRZ,SAAUa,IACRX,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7/B,EACTwgC,WAhDkC,IAiDlCC,OAhDgC,OAoDhCnB,QAASoB,IACPd,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7/B,EACTwgC,WAxDkC,IAyDlCC,OAxDgC,OA4DhCnB,QAASqB,IACPf,EAAAA,GAAAA,IAAwB,CAC1BC,QAASpzB,IAgCX,OA7BApqB,EAAAA,EAAAA,IAAc,KACRkL,GACFkyC,IACAa,KAEAx8C,YAAW,KACTy8C,IACAZ,GAAgB,GACfZ,GACL,GACC,CAACU,EAAca,EAAuB/yC,EAAUoyC,EAAgBY,IAmB5D,CACLnB,iBACAG,4BACAc,qCACAK,qCACAC,+BACAC,kBAvBuB75C,EAAAA,EAAAA,KAAa2I,IACpC2vC,GAAmBwB,IACjB,MAAMC,EAAe/lD,SAASw0B,eAAgB,GAAE2vB,KAAYxvC,KACtDqxC,EAA6C,IAAnCt1C,KAAKiZ,IAAIm8B,EAAenxC,GAUxC,OARAsxC,EAAAA,GAAAA,IACEhhC,EAAa1d,QACbw+C,EACA,QACA9B,GACA+B,EArF+B,IACF,IAuFxBrxC,CAAK,GACZ,GACD,CAACsQ,EAAck/B,IAUpB,CC5Ge,SAAS+B,KAAwC,IAAvBC,EAASl+C,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAFhC,EAGhB,MAAOm+C,EAAeC,IAAoB/zC,EAAAA,EAAAA,KAAS,IAC5Cg0C,EAASC,IAAcj0C,EAAAA,EAAAA,KAAS,GAEjCk0C,GAAex6C,EAAAA,EAAAA,KAAaqH,IAChC,MAAM,aAAE+nC,EAAY,UAAEz5C,EAAS,aAAEkR,GAAiBQ,EAAEwV,OAEpDw9B,EAAiB1kD,EAAYwkD,GAC7BI,EAAWnL,EAAez5C,EAAYkR,EAAeszC,EAAU,GAC9D,CAACA,IAEJ,MAAO,CAAEC,gBAAeE,UAASE,eACnC,C,gECfA,MCsGA,IAAer8C,EAAAA,EAAAA,KAtEqBlG,IAS9B,IAT+B,SACnCwiD,EAAQ,mBACRC,EAAkB,WAClBC,EAAU,YACVC,EAAW,oBACXC,EAAmB,gBACnBC,EAAe,kBACfC,EAAiB,QACjB75C,GACDjJ,EAEC,MAAMuN,GAAMpK,EAAAA,EAAAA,IAAuB,MAC7B4/C,EAAW,eAAgBP,EAC3BQ,GAAoBlhD,EAAAA,EAAAA,KAAQ,IAChC2gD,GAAoBhL,MAAMwL,IAAcC,EAAAA,EAAAA,IAAeD,EAAUT,SAAUA,MAC1E,CAACC,EAAoBD,IAClBx/C,EAAeggD,GAAmBG,YAAYrK,WAAW71C,QACzDmgD,EAAcJ,GAAmBK,iBAAiB9lD,GAClD+lD,GAASC,EAAAA,GAAAA,GAAwBh2C,EAAKs1C,GACtCrgD,GAAYJ,EAAAA,EAAAA,GAChB4gD,GAAmBK,iBAAkBG,EAAAA,EAAAA,IAAqBR,EAAkBK,sBAAmB/iD,GAC9F8iD,GAEG9mC,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQu5C,EAAS,GAChB,CAACv5C,EAASu5C,IAEPzmC,GAAuBo1B,EAAAA,GAAAA,GAAmB3uC,GAC1CihD,GAAgBt0C,EAAAA,GAAAA,GD5DD,uBC8DnBuzC,GD9DqD,wBC+DpDK,GAAY,oBAGf,OACEt6C,EAAAA,GAAAA,cAAA,OACE8E,IAAKA,EACL3E,UAAW66C,EACXx6C,QAASqT,EACTzT,MAAOm6C,GAAmBn6C,MAC1B,kBAAiBk6C,EAAWP,EAASkB,gBAAapjD,GAEjDyiD,EACCt6C,EAAAA,GAAAA,cAACk7C,GAAAA,EAAW,CACVp2C,IAAKA,EACLm2C,WAAYlB,EAASkB,WACrBh/C,KAAMk/C,EAAAA,IACN7qC,QAAS4pC,EACTkB,8BAA+BjB,EAC/BC,gBAAiBA,EACjBC,kBAAmBA,EACnBgB,sBAAoB,IAGtBr7C,EAAAA,GAAAA,cAACs7C,GAAAA,EAAuB,CACtBvQ,OAAQhxC,EACRQ,aAAcA,EACdywC,KAAMkP,EACNhP,QAAQ,EACRjvC,KAAMk/C,EAAAA,IACNlQ,eAAa,EACb9qC,UAAWmT,EACXioC,aAAcnB,EAAiBv/C,cAAWhD,EAC1C2jD,mBAAoBX,IAGpB,I,gBC/BV,MA8TA,IAAep9C,EAAAA,EAAAA,KAxTkBlG,IA4B3B,IA5B4B,WAChCkkD,EAAU,YACVvB,EAAW,MACXjyC,EAAK,SACLwvC,EAAQ,aACRiE,EAAY,iBACZC,EAAgB,mBAChB3B,EAAkB,gBAClB4B,EAAe,eACfC,EAAc,iBACdC,EAAgB,qBAChBC,EAAoB,iBACpBC,EAAgB,qBAChBC,EAAoB,oBACpBC,EAAmB,sBACnBC,EAAqB,cACrBC,EAAa,oBACbjC,EAAmB,mCACnBlB,EAAkC,mCAClCL,EAAkC,iBAClCyD,EAAgB,gBAChBC,EAAe,gBACfC,EAAe,cACfC,EAAa,sBACbC,EAAqB,kBACrBC,EAAiB,mBACjBC,EAAkB,mBAClBC,GACDrlD,EACC,MAAM,oBACJslD,EAAmB,uBACnBC,EAAsB,qBACtBC,EAAoB,iBACpBlI,EAAgB,iBAChBmI,EAAgB,aAChBC,IACE79C,EAAAA,EAAAA,MAGE0F,GAAMpK,EAAAA,EAAAA,IAAuB,MAG7B0/C,GAAkB1/C,EAAAA,EAAAA,IAA0B,MAE5C2/C,GAAoB3/C,EAAAA,EAAAA,IAA0B,MAE9CoF,GAAOC,EAAAA,EAAAA,MACLjF,MAAOif,IAAgBE,EAAAA,GAAAA,MACxBijC,EAAoBC,EAAkBC,IAAqB76C,EAAAA,EAAAA,MAC5D,SAAEC,IAAaC,EAAAA,EAAAA,OAEd46C,EAAaC,IAAkB13C,EAAAA,EAAAA,IAAS23C,GAAuBxjC,IAEhEy+B,IAAiBgF,EAAAA,GAAAA,IAAkB14C,EAAKq1C,QAAAA,EAAuBvB,GAC/DtlC,IAAuBo1B,EAAAA,GAAAA,GAAmB8P,IAG1CplC,GAAesoC,GAAgBlD,GAE/BiF,GAAkBj7C,EAAW,EAAI,EACjCk7C,GAAgBl7C,EAAW,EAAI,GAC/Bm7C,GAAwBn7C,EAAW,EAAI,EACvCo7C,GAAWnC,EAAW3mD,KAAO+oD,EAAAA,IAC7BC,GAAarC,EAAW3mD,KAAOipD,EAAAA,IAC/BC,GAAYvC,EAAW3mD,KAAOmpD,EAAAA,IAC9BC,GAAUzC,EAAWyC,QACrBC,IAAgBP,KAAYQ,EAAAA,EAAAA,IAAmB3C,GAE/C4C,IAAoB/+C,EAAAA,EAAAA,KAAY,KAChCw8C,EACFiB,IACSmB,GACTpB,IAEAD,IAEFO,GAAmB,GAClB,CACDN,EAAwBC,EAAsBF,EAAqBO,EAAmBc,GAASpC,IAG3FwC,IAAiBh/C,EAAAA,EAAAA,KAAY,KAC7B6+C,KAAiBpC,EACnBlH,EAAiB,CACfrH,eAAgB,mBAGlBwP,EAAiB,CACfuB,aAAc9C,EAAW3mD,IAE7B,GACC,CAACinD,EAAsBoC,GAActJ,EAAkB4G,EAAYuB,IAEhEwB,IAA8Bl/C,EAAAA,EAAAA,KAAY,KAC9Cg9C,IAAkB,CAChBxnD,GAAI2pD,EAAAA,IACJC,UAAU,EACV3lD,SAAS,EACT4lD,eAAgB,CACd9X,UAAW,UAEQ,GACtB,CAACyV,IAEEsC,IAA+Bt/C,EAAAA,EAAAA,KAAY,KAC/Cg9C,IAAkB,CAChBxnD,GAAI+pD,EAAAA,IACJH,UAAU,EACV3lD,SAAS,EACT4lD,eAAgB,CACd9X,UAAW,UAEQ,GACtB,CAACyV,IAEEwC,GAAWZ,GAAU/C,EAAAA,IAAoB4D,EAAAA,IACzC/F,GAASkF,GAAUR,GAAgBD,GACnCuB,GAAiBd,GAAUP,GAAwBF,GAEnDwB,IAAuB3/C,EAAAA,EAAAA,KAAaxE,GACnCA,EAIEkJ,KAAKyH,OAAO3Q,EAAQk+C,KAAW8F,GAAW9F,KAHxCuE,GAAuBxjC,IAI/B,CAAC+kC,GAAU9F,GAAQj/B,IAEhB1T,IAAe/G,EAAAA,EAAAA,KAAai5C,IAChC+E,EAAe2B,GAAqB1G,EAAM2G,YAAYpkD,OAAO,GAC5D,CAACmkD,MACJE,EAAAA,GAAAA,GAAkBr6C,EAAKuB,KAEvBvK,EAAAA,EAAAA,KAAU,KACHgJ,EAAIjK,SACTyiD,EAAe2B,GAAqBn6C,EAAIjK,QAAQ8R,aAAa,GAC5D,CAACsyC,MAEJnjD,EAAAA,EAAAA,KAAU,KACJsX,KAAiBqoC,EAAWtQ,UAAU3vC,SAAWigD,EAAW2D,WAAW5jD,QAAUigD,EAAW4D,YAC9FpC,EAAa,CACX0B,eAAgB,CACd7pD,GAAI2mD,EAAW3mD,GACfuqD,WAAY5D,EAAW4D,aAG7B,GACC,CAACjsC,GAAc6pC,EAAcxB,IAEhC,MAAM6D,IAAY1D,IAAoBgC,IAAYM,KAAYnC,GACzDN,EAAWtQ,UAAUoU,MAAK7/C,IAAA,IAAC,OAAE8/C,GAAQ9/C,EAAA,OAAM8/C,CAAM,IAEhDC,GAAchE,EAAWiE,gBAAkBjE,EAAWkE,WACtDC,IAAUH,IAAehE,EAAW3mD,KAAO+oD,EAAAA,KAAwBpC,EAAW3mD,KAAOmpD,EAAAA,KACpF4B,GAAM,CAAGC,KAAUv9C,EAAAA,EAAAA,GAAQq9C,IAC5BG,GAAkC,EAAd1C,EAAkB,EACtC2C,GAAkB/D,EAAuBR,EAAWlS,MAAQ,EAAIkS,EAAWlS,MAE3E0W,GAAanB,GAAWE,GACxBkB,GAAgBl8C,KAAKyrC,KAAKzrC,KAAKoZ,IAAI2iC,GAAmBC,IAAmB3C,GAC3E4C,GAAajB,GACX7jD,GAAS0kD,GAAQK,GAAgBl8C,KAAKyrC,KAAKuQ,GAAkB3C,GAAe4C,GAAajB,GAEzFmB,IAAwB9mD,EAAAA,EAAAA,KAAQ,IACpCsiD,EAAmB,IAAIyE,IAAIzE,EAAiBl8C,KAAII,IAAA,IAAC,GAAE/K,GAAI+K,EAAA,OAAK/K,CAAE,UAAK+C,GAClE,CAAC8jD,IACE0E,IAAoBrE,IAAqB4B,IAAYM,KAAYuB,KAAgBzB,GAEvF,OACEh+C,EAAAA,GAAAA,cAAA,OACE8E,IAAKA,EACLP,IAAKk3C,EAAW3mD,GAChBA,GAAK,GAAE2iD,GAAY,iBAAiBxvC,IACpC9H,WACEuG,EAAAA,GAAAA,GAAe,aAAc44C,IAAY,uBAGzCtD,GACAh8C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,kBAAmB25C,IAAoB,6BACjEf,IAAYt/C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gDACzBs7C,EAAWr7C,MACXigD,IAAoBvnD,QAAQ2iD,EAAWtQ,WACtCnrC,EAAAA,GAAAA,cAAA,QAAMG,UAAU,qBAAqBL,EAAK,WAAY27C,EAAWtQ,SAAS3vC,OAAQ,OAGrFoiD,IACC59C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oCAAoCK,QAAS28C,IAE3DkD,IACCrgD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVqwC,oBAAqB2N,KAAiBpC,EACtCv7C,QAAS89C,GACTgC,MAAI,EACJrkD,KAAK,OACLskD,OAAK,GAEuBzgD,EAA3Bq+C,IAAgBmB,GAAgB,SAAiB,SAK1Dt/C,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAe,+CAAgD4M,IAC1E9d,MAAQ,WAAU2F,SAElB6E,EAAAA,GAAAA,cAAA,UACE8E,IAAKs1C,EACLj6C,UAAU,gBACV3K,MAAOoqD,GAAU,WAAUM,aAAqBroD,KAEhD+lD,IAAYE,IAAc8B,KAAW5/C,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKu1C,EAAmBl6C,UAAU,kBAChF87C,GACCj8C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,6BACVG,MAAM,cACNE,QAASg+C,GACTj6C,IAAI,sBAEJvE,EAAAA,GAAAA,cAAA,OAAKjM,IAAKysD,GAAM5oC,IAAI,QAAQzX,UAAU,mBAGzCg8C,GACCn8C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,4CACVG,MAAM,cACNE,QAASo+C,GACTr6C,IAAI,uBAEJvE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBAGhBiT,IAAgBqoC,EAAW2D,WAAW3/C,KAAKs6C,IAC1C,MAAM0G,GAAaC,EAAAA,EAAAA,IAAqB3G,GAClCE,EAAawG,EAAavE,GAAqBnnD,SAAS0rD,QAAc5oD,EAE5E,OACEmI,EAAAA,GAAAA,cAAC2gD,GAAa,CACZp8C,IAAM,GAAEk3C,EAAW3mD,MAAM2rD,IACzB1G,SAAUA,EACVE,WAAYA,EACZC,YAAaA,EACbF,mBAAoBA,EACpBG,oBAAqBlB,EACrBz4C,QAAS67C,EACTjC,gBAAiBA,EACjBC,kBAAmBA,GACnB,IAGLjnC,IAAgBqoC,EAAWtQ,UAAUK,MAAM,EAAGqU,GAAQE,GAAoBtE,EAAWtQ,SAAS3vC,QAC5FiE,KAAI,CAACyqC,EAAS5lB,KACb,MAAMs8B,GAAahD,IAAYE,MAC1B+C,EAAAA,EAAAA,KAAgC/xB,EAAAA,EAAAA,MAAaob,EAAQyU,gBACpDmC,EAAalB,IAAUt7B,GAAKy7B,IAAsBa,EACpDvG,EACAD,EACEqG,EAAavW,EAAQ6W,cAAgB7W,EAAQp1C,GAAKo1C,EAAQ8W,MAC1D/G,EAAawG,EAAavE,GAAqBnnD,SAAS0rD,QAAc5oD,EAE5E,OACEmI,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ18C,IAAK2lC,EAAQp1C,GACbo1C,QAASA,EACTjuC,KAAM6iD,GACN3E,oBAAqBlB,EACrBiI,8BAA+BtI,EAC/BtoC,QAAS4pC,EACT0B,gBAAiBA,EACjBC,eAAgBA,EAChBsF,YAAU,EACVpF,qBAAsBA,EACtB3B,gBAAiB0G,EACjBzF,qBAAsBe,EACtB57C,QAAS87C,EACTpvB,SAAUgd,EACV+P,WAAYA,EACZmH,cAAetD,IAAcqC,IAAuBkB,IAAInX,EAAQp1C,IAAMynD,OAAkB1kD,EACxFypD,YAAcnB,IAAuBkB,IAAInX,EAAQp1C,SAAsB+C,EAAhB2kD,EACvD+E,oBAAqB3D,GAAWnB,OAAwB5kD,EACxD6kD,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,GACpB,IAGPiD,IAASG,GAAkBD,IAC1B//C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wCACVmD,OAAK,EACLhD,MAAM,cACNE,QAASs/C,GACTv7C,IAAI,QACL,IACGy7C,GAAkBD,KAKzBnC,IACC59C,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZtuB,KAAMzF,EAAKg8C,EAAmB,mCAAqC,mCACnEh9C,OAAQo+C,EACRj+C,QAASm+C,EACTrpB,eAAgBsqB,GAChBxY,sBAAoB,IAGpB,IAMV,SAAS0X,GAAuBxjC,GAC9B,OAAOA,EA9TyB,IAHH,EAmUxBA,EA/TgC,IAFI,EADL,CAqUtC,C,wCCzYA,MCoHA,IAAetc,EAAAA,EAAAA,KAlFuBlG,IAMhC,IANiC,WACrCkkD,EAAU,KACVx/C,EAAOulD,EAAAA,IAA0B,OACjClxC,EAAM,oBACN6pC,EAAmB,gBACnBC,GACD7iD,EACC,MAAM,aAAE0lD,IAAiB79C,EAAAA,EAAAA,MAEnBmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OAEtC,aACJ+mD,EAAY,mBAAEC,EAAkB,SAAEhD,EAAUiD,SAAU5oD,GACpD0iD,GAEE,YAAEmG,IAAgBC,EAAAA,GAAAA,GAAeH,GACjCI,EAAiBF,GAAaG,mBAC9BC,GAAcC,EAAAA,GAAAA,GAAwB1pC,GAAeupC,GACrDI,GAAcC,EAAAA,GAAAA,GAAeH,GAE7BxJ,GAAiBgF,EAAAA,GAAAA,IAAkBjlC,EAAc4hC,GACjDiI,EAAa5J,IAAmBloC,EAEhC+xC,EAAyB5G,EAAWtQ,UAAYpyC,IAAYupD,EAAAA,GAC5DC,EAAaF,IAA0BG,EAAAA,EAAAA,IAAsB/G,EAAWtQ,SAAU,GAAGr2C,IACrF2tD,GAAkB9oD,EAAAA,EAAAA,GAAS4oD,GAAa/J,GAExCkK,GAAcjB,IAAiBY,GAA2B3D,IAAc,aAAYjD,EAAW3mD,KAC/FiF,GAAYJ,EAAAA,EAAAA,GAAS+oD,GAAYlK,GACjC1uC,EAAU/P,GAAa0oD,EACvBnvC,GAAuBo1B,EAAAA,GAAAA,GAAmB5+B,GAE1C+wC,GAASC,EAAAA,GAAAA,GAAwBviC,EAAc6hC,GAarD,OAXAt+C,EAAAA,EAAAA,KAAU,KACJ08C,IAAmBiD,EAAWtQ,UAAU3vC,QAC1CyhD,EAAa,CACX0B,eAAgB,CACd7pD,GAAI2mD,EAAW3mD,GACfuqD,WAAY5D,EAAW4D,aAG7B,GACC,CAAC7G,EAAgByE,EAAcxB,IAGhCz7C,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,WAAWuG,EAAAA,GAAAA,GDhFhB,uBCgF4C,sBAC5DoD,EACC40C,EACE1+C,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACd3qC,UAAWmT,EACXy3B,OAAQhxC,EACRkC,KAAMA,EACN+uC,KAAMoX,EACNnX,gBAAgB4V,EAAAA,EAAAA,KAAgC/xB,EAAAA,EAAAA,MAAa2sB,GAC7DF,aAAcnB,GAAiBv/C,cAAWhD,EAC1C2jD,mBAAoBX,IAEnB9hD,IAAYspD,EACfriD,EAAAA,GAAAA,cAAC4oC,GAAAA,EAAc,CACbzoC,WAAWuG,EAAAA,GAAAA,GD9F+B,uBC8FF4M,GACxCvf,IAAKgG,EACL8uC,QAASuZ,EACT5sD,MAAO0sD,EACPvsC,MAAI,EACJ3D,yBAAuB,IAGzBhS,EAAAA,GAAAA,cAAA,OACEjM,IAAKgG,GAAa0oD,EAClBjtD,MAAO0sD,EACP/hD,WAAWuG,EAAAA,GAAAA,GDzG8D,uBCyGjC4M,GACxCsE,IAAI,MAIR+qC,EAAAA,GAAAA,IAAgBlH,EAAWr7C,MAAO,GAEhC,IChHV,GAAqD,uBAArD,GAAwK,uBAAxK,GAAkN,uBAAlN,GAAwP,uBAAxP,GAAmU,uBCsF7TwiD,GAAsB,IAAMx8C,EAAAA,GAE5By8C,GAAoB,mBAGpBC,GAAuB,IAAI1C,IAAI,CAACvC,EAAAA,IAAsBE,EAAAA,IAAwBE,EAAAA,MAC9E8E,GAA6B,IAAI3C,IAAI,CACzCvC,EAAAA,IACAE,EAAAA,IACAE,EAAAA,IACA+E,EAAAA,IACAC,EAAAA,MA0UF,IAAexlD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA+D,IAA7D,OAAEzB,EAAM,eAAEy9C,EAAc,iBAAEC,GAAkBj8C,EACnD,MACEsrC,UACE+X,SAAUC,GAEZC,cACEx1B,KAAMy1B,EACNC,YAAaC,EACbC,cACEC,OAAQC,IAGZC,mBAAoBC,EAAoB,gBACxCC,EAAe,aACfC,GACEnmD,EAEEi+C,EAAkB9iD,QAAQsF,IAAUukB,EAAAA,EAAAA,IAAqBhlB,EAAQS,IAEvE,MAAO,CACLilD,iBAAmBxH,OAAoChkD,EAAnBwrD,EACpCO,qBAAuB/H,OAAwChkD,EAAvB+rD,EACxCF,mBAAoB7H,EAAiB6H,OAAqB7rD,EAC1DsrD,kBACAY,oBAAqBpmD,EAAOylD,aAAaY,MAAMC,OAC/CC,YAAYC,EAAAA,EAAAA,IAA4BxmD,GACxCi+C,kBACAG,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GACjD4lD,yBACAa,oBAAqBzmD,EAAOymD,oBAC5BC,qBAAsB1mD,EAAO0mD,qBAC7BP,aAAchI,EAAmBgI,OAAejsD,EAChDgsD,gBAAiB/H,EAAmB+H,OAAkBhsD,EACtDmiD,mBAAoB8B,EAAmBn+C,EAAOq8C,wBAAqBniD,EACpE,GAnCe6F,EAvUiCnG,IA6B/C,IA7BgD,UACpD4I,EAAS,SACT2F,EAAQ,YACRo0C,EAAW,oBACX6J,EAAmB,iBACnBV,EAAgB,qBAChBO,EAAoB,oBACpB1H,EAAmB,mBACnBwH,EAAkB,gBAClBP,EAAe,aACfW,EAAY,gBACZD,EAAe,mBACf7J,EAAkB,SAClBvC,EAAWoL,GAAiB,uBAC5BU,EAAsB,WACtBW,EAAU,iBACVpI,EAAgB,eAChBD,EAAc,cACdO,EAAa,gBACbR,EAAe,qBACfG,EAAoB,sBACpBuI,EAAqB,oBACrBF,EAAmB,qBACnBC,EAAoB,oBACpBE,EAAmB,iBACnBlI,EAAgB,kBAChBK,EAAiB,mBACjBC,EAAkB,mBAClBC,GACDrlD,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCsqB,GAAYtqB,EAAAA,EAAAA,IAAuB,MAEnC0/C,GAAkB1/C,EAAAA,EAAAA,IAA0B,MAE5C2/C,GAAoB3/C,EAAAA,EAAAA,IAA0B,OAE9C,SAAE8H,IAAaC,EAAAA,EAAAA,OAEnBq3C,aAAc0K,EACd9K,cAAe+K,GACbjL,KAEEmK,GAAqBtqD,EAAAA,EAAAA,KAAQ,IAC1BwiD,EACH6H,EACApuD,OAAOq2B,QAAO+4B,EAAAA,GAAAA,IAAWrB,EAAmBO,KAC/C,CAACP,EAAkBxH,EAAgB+H,EAAsBF,KAEtD,eACJ/L,EAAc,0BACdG,EAAyB,mCACzBmB,EAAkC,mCAClCL,EAAkC,6BAClCM,EAA4B,iBAC5BC,GACE3B,GAA0Bj/B,EAAcyM,EAAWyyB,EAAU3xC,GAE3DhG,GAAOC,EAAAA,EAAAA,KAEP4kD,EAAiB7rD,QAAQirD,GAEzBa,IAAUvrD,EAAAA,EAAAA,KAAQ,KACtB,IAAK0qD,EACH,OAAOc,GAAAA,EAGT,MAAMC,EAAkD,GAExD,GAAIhJ,EAAkB,CACpB,MAAMiJ,EAAoBjB,GAActY,MAAM,EAnFxB,KAmFmD,GACrEuZ,GAAmBvpD,QACrBspD,EAAYjhD,KAAK,CACf/O,GAAIkwD,EAAAA,IACJ3F,WAAY,GACZj/C,MAAON,EAAK,aACZs/C,UAAW2F,EACXxb,MAAOwb,EAAkBvpD,OACzB0iD,SAAS,IAIb,MAAM+G,GAAwBpB,GAAmB,IAC9Ct1B,QAAQwrB,IAAcgL,EAAkBxF,MAAM2F,IAAgBzK,EAAAA,EAAAA,IAAeyK,EAAanL,OAC1FvO,MAAM,EAhGgB,IAiGnB2Z,GAA2BnL,GAAsB,IACpDv6C,KAAIC,IAAA,IAAC,SAAEq6C,GAAUr6C,EAAA,OAAKq6C,CAAQ,IAC9BxrB,QAAQwrB,IACCgL,EAAkBxF,MAAM2F,IAAgBzK,EAAAA,EAAAA,IAAeyK,EAAanL,OACtEkL,EAAqB1F,MAAM2F,IAAgBzK,EAAAA,EAAAA,IAAeyK,EAAanL,OAEjF,GAAIoL,GAAyB3pD,QAAUypD,GAAsBzpD,OAAQ,CACnE,MAAMwiD,GAAaiH,GAAsBzpD,OACnC4pD,EAAqBH,EAAqBI,OAAOF,GACvDL,EAAYjhD,KAAK,CACf/O,GAAIkpD,EAAYC,EAAAA,IAAwBJ,EAAAA,IACxCwB,WAAY,GACZj/C,MAAON,EAAKk+C,EAAY,mBAAqB,kBAC7CoB,UAAWgG,EACX7b,MAAO6b,EAAmB5pD,OAC1B0iD,SAAS,GAEb,CACF,MAAO,GAAIrC,EAAgB,CACzB,MAAMyJ,EAAyBnC,EAAgBkB,GAC/C,GAAIiB,GAAwBna,UAAU3vC,OAAQ,CAC5C,MAAM2vC,GAAYma,EAAuBna,UAAY,IAAIka,OAAO1B,GAAsB,IACtFmB,EAAYjhD,KAAK,IACZyhD,EACHna,WACA5B,MAAO4B,EAAS3vC,OAChB1G,GAAI+oD,EAAAA,IACJz9C,MAAON,EAAK,mBAEhB,CACF,MAAO,GAAIwkD,EAAuB,CAChC,MAAMiB,EAAwBpC,EAAgBiB,GAC1CmB,EAAsBpa,UAAU3vC,QAClCspD,EAAYjhD,KAAK,IACZ0hD,EACHzwD,GAAI+oD,EAAAA,IACJz9C,MAAON,EAAK,mBAGlB,MAAW6jD,GAAoBnoD,QAC7BspD,EAAYjhD,KAAK,CACf/O,GAAI+oD,EAAAA,IACJwB,WAAY,IACZj/C,MAAON,EAAK,kBACZqrC,SAAUwY,EACVpa,MAAOoa,EAAmBnoD,OAC1B0iD,SAAS,IAIb,MAAMsH,GAAkB32B,EAAAA,GAAAA,IAAOk1B,EAAoBsB,OAAO9B,GAA0B,KAE9EkC,EAAgBnwD,OAAOq2B,QAAO+4B,EAAAA,GAAAA,IAAWvB,EAAiBqC,IAEhE,MAAO,IACFV,KACAW,EACJ,GACA,CACD1B,EAAqBjI,EAAkBD,EAAgByI,EAAuBX,EAC9EJ,EAAwBJ,EAAiBW,EAAc9J,EAAoBl6C,EAAM+jD,EACjFQ,EAAsBD,IAGlBsB,IAAkBrsD,EAAAA,EAAAA,KAAQ,IAC9BsrD,GAC4D,IAAzDC,GAAQr2B,QAAQpyB,GAAQA,EAAIgvC,UAAU3vC,SAAQA,QAChD,CAACopD,GAASD,IAEPgB,IAAmBC,EAAAA,GAAAA,GAAkB,GAAItO,EAAAA,KACzCuO,GAAsBlB,GAAkBgB,KAAqBD,IAEnEI,EAAAA,GAAAA,GAAoB9gC,EAAWxiB,IAAaqjD,KAG5C/pD,EAAAA,EAAAA,KAAU,KACR,IAAK6oD,EACH,OAGF,MAAMnyB,EAASxN,EAAUnqB,QACzB,IAAK23B,EACH,OAGF,MAAMuzB,EAAUpO,EAAiBiL,IAAuBpwB,EAAOwzB,YAAc,EAAIpD,GAAsB,IAEvGhU,EAAAA,GAAAA,GAAwBpc,EAAQuzB,EAAQ,GACvC,CAACpB,EAAgBhN,IAEpB,MAAMsO,IAAoB3mD,EAAAA,EAAAA,KAAa0hD,IACrCuD,EAAoBvD,EAAM,GACzB,CAACuD,IAEE2B,IAAuB5mD,EAAAA,EAAAA,KAAay6C,IACxCsC,IAAmBtC,EAAS,GAC3B,CAACsC,IA+DErB,IAAgBt0C,EAAAA,GAAAA,GAAe,gBC1VhB,uBD0V8CvG,GAEnE,IAAK0lD,GACH,OACE7lD,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,IACb0K,GACC1lD,EAAAA,GAAAA,cAAA,OAAKG,UAAWgmD,IAA8BrmD,EAAK,eAEnDE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAMhB,MAAM+4B,IAAkB1/C,EAAAA,GAAAA,GACtBy/C,GACA,6BACC1B,GAAuB0B,IAEpBE,IAAgB3/C,EAAAA,GAAAA,GACpBy/C,GD9W2F,uBCgX3F,eACAngD,EAAAA,GAAe,eAAiB,iBAGlC,OACEhG,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,IACdh7C,EAAAA,GAAAA,cAAA,OACE8E,IAAKkgB,EACL7kB,UAAWimD,IAEXpmD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKs1C,EAAiBj6C,UAAU,kBACxCH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKu1C,EAAmBl6C,UAAU,kBACzCykD,GAAQnlD,KAhGjB,SAAqBg8C,EAA8CxzC,GACjE,MAAMq+C,EAAe7K,EAAWtQ,WAAW,GACrC0F,GAAkBnqC,EAAAA,GAAAA,GACtBy/C,GACAl+C,IAAU0vC,GCjS0C,wBDoShD4O,EAAmBt+C,EAAQu+C,EAAAA,IAC3BC,GAAO5F,EAAAA,EAAAA,KAAgC/xB,EAAAA,EAAAA,MAAa2sB,GAE1D,GAAIA,EAAW3mD,KAAOkwD,EAAAA,IAAtB,CAIA,GAAIjC,GAA2B1B,IAAI5F,EAAW3mD,KAAO2mD,EAAWgG,eAAiB6E,EAAc,CAC7F,MAAM1I,EAAWnC,EAAW3mD,KAAO+oD,EAAAA,KAAwBpC,EAAW3mD,KAAOmpD,EAAAA,IACvEyI,EAAU5D,GAAqBzB,IAAI5F,EAAW3mD,IACpD,OACEkL,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkE,IAAKk3C,EAAW3mD,GAChBqL,UAAW0wC,EACXttC,UAAWk4C,EAAWr7C,MACtBkD,OAAK,EACLqjD,MAAOD,EACPpmD,MAAM,cAENE,QAASA,IAAM24C,EAAiByE,EAAW,EAAI31C,IAE9C21C,EACC59C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEbH,EAAAA,GAAAA,cAAC4mD,GAAe,CACdnL,WAAYA,EACZnrC,QAAS4zC,IAAehK,EACxBC,oBAAqBjB,EACrBkB,gBAAiBmM,EAAoBE,EAAOpM,EAAoBD,OAAmBviD,IAK7F,CAEA,OACEmI,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ18C,IAAKk3C,EAAW3mD,GAChBo1C,QAASoc,EACTrqD,KAAMulD,EAAAA,IACNphD,MAAOq7C,EAAWr7C,MAClBD,UAAW0wC,EACXvgC,QAAS4zC,IAAehK,EACxBC,oBAAqBjB,EACrB2N,eAAa,EACb9K,sBAAoB,EACpB3B,gBAAiBmM,EAAoBE,EAAOpM,EAAoBD,OAAmBviD,EACnFwjD,qBAAsBe,EACtB57C,QAAS24C,EACTjsB,SAAUjlB,GA5Cd,CA+CF,MAwCIjI,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACL42B,SAAUqV,EACVrkD,UAAWkmD,IAEVzB,GAAQnlD,KAAI,CAACg8C,EAAYn3B,KACxB,MAAM03B,EAAmBP,EAAW3mD,KAAOkwD,EAAAA,KACrCvJ,EAAW3mD,KAAO+oD,EAAAA,MAAyByG,GAAyBzI,GAE1E,OACE77C,EAAAA,GAAAA,cAAC8mD,GAAU,CACTviD,IAAKk3C,EAAW3mD,GAChB2mD,WAAYA,EACZvB,YAAaphD,QAAQorD,GAAchK,GACnCjyC,MAAOqc,EACPmzB,SAAUA,EACV0C,oBAAqBrC,EACrBmB,mCAAoCA,EACpCL,mCAAoCA,EACpC8C,aAAc/D,GAAkBrzB,EAAI,GAAKqzB,GAAkBrzB,EAAI,EAC/Ds3B,gBAAiBA,EACjBC,eAAgBA,EAChBC,iBAAkBA,EAClBE,iBAAkBA,EAClBC,qBAAsBqI,GAAyB7I,EAAW3mD,KAAO+oD,EAAAA,IACjE1B,sBAAuBN,GAAkBJ,EAAW3mD,KAAO+oD,EAAAA,IAC3D9B,qBAAsBA,EACtBG,oBAAqBA,EACrBlC,mBAAoBA,EACpBoC,cAAeA,EACfC,iBAAkB6J,GAClB5J,gBAAiB2J,GACjBvJ,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,GACpB,KAIJ,KEpVV,IAAen/C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLopD,0BAA2BjuD,QAAQ6E,EAAOylD,aAAaE,aAAa9nD,QACpE4gD,eAAe4K,EAAAA,EAAAA,IAA+BrpD,MAH9BD,EAtDgCnG,IAO9C,IAP+C,OACnDuH,EAAM,gBACNmoD,EAAe,0BACfF,EAAyB,cACzB3K,EAAa,oBACb8K,EAAmB,QACnBjoD,GACD1H,EACC,MAAM,0BAAE4vD,IAA8B/nD,EAAAA,EAAAA,MAEhCgoD,GAAmB1sD,EAAAA,EAAAA,OAClB2sD,EAAoBC,EAAsBC,IAA0BhlD,EAAAA,EAAAA,MAC3EzG,EAAAA,EAAAA,KAAU,KACRsrD,EAAiBvsD,QAAUosD,EAAgBpsD,QAASqR,wBAAwB4G,KAAK,GAChF,CAAChU,EAAQmoD,KAEZnrD,EAAAA,EAAAA,KAAU,KACJgD,IAAWioD,GACbI,GACF,GACC,CAACJ,EAA2BjoD,EAAQqoD,IAEvC,MAAMlB,GAAoB3mD,EAAAA,EAAAA,KAAa4qC,IACrCgd,EAAoBhd,GACpBjrC,GAAS,GACR,CAACA,EAASioD,IAEb,OACElnD,EAAAA,GAAAA,cAACwnD,GAAAA,EAAM,KACLxnD,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACR2oD,WAAS,EACTpjD,UAAU,QACVqjD,gBC9DsB,uBD+DtBzoD,QAASA,EACTmoD,iBAAkBA,EAAiBvsD,QACnC8sD,kBAAmBN,GAEnBrnD,EAAAA,GAAAA,cAAC4nD,GAAiB,CAChBnQ,SAAS,oBACTyC,YAAap7C,EACbgH,UAAWhH,EACX+8C,gBAAc,EACdO,cAAeA,EACfM,kBAAmB4K,EACnB3K,mBAAoB4K,EACpBhD,oBAAqB0B,EACrBrJ,mBAAoB39C,KAGjB,K,4BE/Eb,UAAgB,YAAc,uBAAuB,iBAAiB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,qBAAqB,uBAAuB,iBAAmB,uBAAuB,mBAAmB,uBAAuB,gBAAkB,uBAAuB,eAAiB,uBAAuB,QAAU,uBAAuB,OAAS,wBAAwB,cAAc,uBAAuB,WAAa,uBAAuB,eAAe,uBAAuB,YAAc,wBC2FjmB,IAAexB,EAAAA,EAAAA,KArEmBlG,IAAgB,IAAf,OAAEw6B,GAAQx6B,EAC3C,MAAM,mBAAEswD,EAAkB,mBAAEC,IAAuB1oD,EAAAA,EAAAA,MAE7CU,GAAOC,EAAAA,EAAAA,MACNgoD,EAAiBC,IAAsBpiD,EAAAA,EAAAA,IAAmBmsB,EAAOk2B,SAElEC,GAAY7uD,EAAAA,EAAAA,KAAQ,KACxB,MAAM4wB,GAAY6E,EAAAA,EAAAA,MAAYnB,MAAMC,KACpC,OAAOmE,EAAOk2B,QAAQ15B,QAAQz5B,IAAQm1B,EAAUn1B,GAAIqzD,aAAY,GAC/D,CAACp2B,EAAOk2B,UAELG,EAAgBL,EAAgBvsD,OAAS0sD,EAAU1sD,OAEnD6sD,EAAYD,EAAgBA,EAAc7Y,gBAAa13C,EAEvDywD,GAAoBhpD,EAAAA,EAAAA,KAAY,KACpCuoD,IAEAC,EAAmB,CACjB/1B,SACAk2B,QAASF,GACT,GACD,CAACh2B,EAAQg2B,IAENQ,GAAwBjpD,EAAAA,EAAAA,KAAY,KACxC,MAAMkpD,EAAiBT,EAAgBvsD,SAAWu2B,EAAOk2B,QAAQzsD,OACjEwsD,EAAmBQ,EAAiBN,EAAYn2B,EAAOk2B,QAAQ,GAC9D,CAACl2B,EAAOk2B,QAASC,EAAWH,EAAgBvsD,SAE/C,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,SACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACboL,EAAAA,GAAAA,GAAWX,EAAK,qBAAsBiyB,EAAO3xB,OAAQ,CAAC,kBAAmB,WAE5EJ,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,cAAsB,kBACnD2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,kBACbyK,EAAK,4BAA6BsoD,EAAe,MAEpDpoD,EAAAA,GAAAA,cAAA,OACEG,UAAW9K,GAAAA,gBACXglC,KAAK,SACLC,SAAU,EACV95B,QAAS+nD,GAERR,EAAgBvsD,SAAWu2B,EAAOk2B,QAAQzsD,OAASsE,EAAK,eAAiBA,EAAK,eAGnFE,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAAS32B,EAAOk2B,QAChBU,UAAWT,EACXU,oBAAqBZ,EACrBa,YAAad,KAGjB/nD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLG,QAAS8nD,EACTrsD,KAAK,UACLkU,UAAW43C,EAAgBvsD,QAE3BwE,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,YACbyK,EAAK,sBAAuBiyB,EAAO3xB,OACpCJ,EAAAA,GAAAA,cAAC8oD,GAAAA,EAAK,CAAC3oD,UAAW9K,GAAAA,YAAoBkQ,KAAM8iD,EAAWU,kBAAgB,MAGvE,ICsBV,IAAetrD,EAAAA,EAAAA,KAxFuBlG,IAAwB,IAAvB,OAAEw6B,EAAM,OAAE+U,GAAQvvC,EACvD,MAAM,mBAAEswD,EAAkB,mBAAEC,IAAuB1oD,EAAAA,EAAAA,MAE7CU,GAAOC,EAAAA,EAAAA,MAENgoD,EAAiBC,IAAsBpiD,EAAAA,EAAAA,IAAmBmsB,EAAOi3B,gBAElEC,EAAgBnwD,QAAQi5B,EAAOi3B,eAAextD,QAC9C0tD,EAAgBD,EAAgBl3B,EAAOi3B,eAAextD,OAAS,EAC/D6sD,EAAYN,EAAgBvsD,OAASusD,EAAgBvsD,OAAO+zC,gBAAa13C,EAEzEsxD,EAAkBF,EACpBnpD,EAAK,0BAA2B,CAACopD,EAAepiB,EAAO1mC,YAAQvI,EAAWqxD,GAC1EppD,EAAK,4BAA6BgnC,EAAO1mC,OAEvCkoD,GAAoBhpD,EAAAA,EAAAA,KAAY,KACpCuoD,IAEKE,EAAgBvsD,QAErBssD,EAAmB,CACjB/1B,SACAk2B,QAASF,GACT,GACD,CAACh2B,EAAQg2B,IAENQ,GAAwBjpD,EAAAA,EAAAA,KAAY,KACxC,MAAMkpD,EAAiBT,EAAgBvsD,SAAWu2B,EAAOi3B,eAAextD,OACxEwsD,EAAmBQ,EAAiB,GAAKz2B,EAAOi3B,eAAe,GAC9D,CAACj3B,EAAOi3B,eAAgBjB,EAAgBvsD,SAE3C,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,SACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACboL,EAAAA,GAAAA,GAAW0oD,EAAiB,CAAC,kBAAmB,WAEnDnpD,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,cAAsB,kBAClDyD,QAAQi5B,EAAOi3B,eAAextD,SAC7BwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,kBACbyK,EAAK,4BAA6BioD,EAAgBvsD,OAAQ,MAE7DwE,EAAAA,GAAAA,cAAA,OACEG,UAAW9K,GAAAA,gBACXglC,KAAK,SACLC,SAAU,EACV95B,QAAS+nD,GAERR,EAAgBvsD,SAAWu2B,EAAOi3B,eAAextD,OAASsE,EAAK,eAAiBA,EAAK,eAG1FE,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAAS32B,EAAOi3B,eAChBJ,oBAAqBZ,EACrBa,YAAad,KAInB/nD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,kBACbyK,EAAK,6BAGVE,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAAS32B,EAAOq3B,eAChBT,UAAW52B,EAAOq3B,eAClBP,YAAa92B,EAAOq3B,kBAGxBppD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLpE,KAAK,UACLuE,QAAS8nD,GAETtoD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,aACZ0yD,EAAgBvsD,QAAUsE,EAAK,MAChChH,QAAQivD,EAAgBvsD,SACvBwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGF,EAAK,8BACNE,EAAAA,GAAAA,cAAC8oD,GAAAA,EAAK,CAAC3oD,UAAW9K,GAAAA,YAAoBkQ,KAAM8iD,EAAWU,kBAAgB,OAK3E,ICdV,IAAetrD,EAAAA,EAAAA,KArEsBlG,IAG/B,IAHgC,OACpCuvC,EAAM,iBACNuiB,EAAmBxE,GAAAA,GACpBttD,EACC,MAAM,mBAAEswD,EAAkB,cAAEyB,IAAkBlqD,EAAAA,EAAAA,MAExCU,GAAOC,EAAAA,EAAAA,MAENgoD,EAAiBC,IAAsBpiD,EAAAA,EAAAA,IAAmByjD,GAE3DhB,EAAYN,EAAgBvsD,OAASusD,EAAgBvsD,OAAO+zC,gBAAa13C,EAEzE0wD,GAAwBjpD,EAAAA,EAAAA,KAAY,KACxC,MAAMkpD,EAAiBT,EAAgBvsD,SAAW6tD,EAAiB7tD,OACnEwsD,EAAmBQ,EAAiB,GAAKa,EAAiB,GACzD,CAACA,EAAkBtB,EAAgBvsD,SAEhC8sD,GAAoBhpD,EAAAA,EAAAA,KAAY,KACpCuoD,IACAyB,EAAc,CAAEhiB,SAAUR,EAAOhyC,GAAImzD,QAASF,GAAkB,GAC/D,CAACjhB,EAAOhyC,GAAIizD,IAEf,OACE/nD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,SACbyD,QAAQuwD,GAAkB7tD,SACzBwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACboL,EAAAA,GAAAA,GAAWX,EAAK,4BAA6B,CAAC,kBAAmB,WAEpEE,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,cAAsB,kBACnD2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,cACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,kBACbyK,EAAK,4BAA6BioD,EAAgBvsD,OAAQ,MAE7DwE,EAAAA,GAAAA,cAAA,OACEG,UAAW9K,GAAAA,gBACXglC,KAAK,SACLC,SAAU,EACV95B,QAAS+nD,GAERR,EAAgBvsD,SAAW6tD,EAAiB7tD,OAASsE,EAAK,eAAiBA,EAAK,eAGrFE,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAASW,EACTT,oBAAqBZ,EACrBa,YAAad,MAKrB/nD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLpE,KAAK,UACLuE,QAAS8nD,GAETtoD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,aACZ0yD,EAAgBvsD,QAAUsE,EAAK,0BAChChH,QAAQivD,EAAgBvsD,SACvBwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGF,EAAK,+BACNE,EAAAA,GAAAA,cAAC8oD,GAAAA,EAAK,CAAC3oD,UAAW9K,GAAAA,YAAoBkQ,KAAM8iD,EAAWU,kBAAgB,OAK3E,I,gBC5DV,MAoFA,IAAetrD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA2B,IAAzB,KAAE6pD,GAAM7pD,EACf,MAAM,OAAEqyB,EAAM,QAAEy3B,GAAYD,GAAQ,CAAC,EAC/BjiB,EAAWkiB,GAASliB,WAAavV,GAAU,aAAcA,EAASA,EAAOuV,cAAWzvC,GAG1F,MAAO,CACLivC,OAHaQ,GAAWmiB,EAAAA,EAAAA,IAAiB9rD,EAAQ2pC,QAAYzvC,EAI9D,GARe6F,EApFmCnG,IAGjD,IAHkD,KACtDgyD,EAAI,OACJziB,GACDvvC,EACC,MAAM,mBAAEswD,IAAuBzoD,EAAAA,EAAAA,MAEzBU,GAAOC,EAAAA,EAAAA,KAEPjB,EAAShG,QAAQywD,GACjBG,GAAgB7lC,EAAAA,EAAAA,GAAY0lC,IAASA,EACrCriB,GAAkBrjB,EAAAA,EAAAA,GAAYijB,IAAWA,EAEzC1mC,GAAQ/G,EAAAA,EAAAA,KAAQ,KACpB,GAAKqwD,EAAL,CACA,GAAIA,EAAc33B,OAAQ,CACxB,MAAMA,EAAS23B,EAAc33B,OAC7B,MAAI,mBAAoBA,EACfA,EAAOi3B,eAAextD,OAASsE,EAAK,2BAA6BA,EAAK,0BAExEA,EAAK,qBACd,CACA,OAAI4pD,EAAcF,QACT1pD,EAAK,8BADd,CARoC,CAYpB,GACf,CAACA,EAAM4pD,IAEJC,GAAuBtwD,EAAAA,EAAAA,KAAQ,IAC/B6tC,EAAwBA,EAAgB9mC,MACxCspD,GAAe33B,QAAU,UAAW23B,EAAc33B,OAAe23B,EAAc33B,OAAO3xB,WAA1F,GAEC,CAAC8mC,EAAiBwiB,IAEfE,GAAkBvwD,EAAAA,EAAAA,KAAQ,KAC9B,GAAKqwD,GAAe33B,OACpB,MAAI,mBAAoB23B,EAAc33B,OAAe23B,EAAc33B,OAAOi3B,eAAextD,YAAzF,CACgB,GACf,CAACkuD,IAcEG,GAAgBvqD,EAAAA,EAAAA,KAAY,KAChC,GAAKoqD,EAAL,CACA,GAAIA,EAAc33B,OAAQ,CACxB,MAAMA,EAAS23B,EAAc33B,OAC7B,MAAI,mBAAoBA,EACf/xB,EAAAA,GAAAA,cAAC8pD,GAAe,CAAC/3B,OAAQA,EAAQ+U,OAAQI,IAG3ClnC,EAAAA,GAAAA,cAAC+pD,GAAW,CAACh4B,OAAQA,GAC9B,CAEA,OAAI23B,EAAcF,QACTxpD,EAAAA,GAAAA,cAACgqD,GAAc,CAACljB,OAAQI,EAAkBmiB,iBAAkBK,EAAcF,QAAQH,wBAD3F,CAVoC,CAcpB,GACf,CAACniB,EAAiBwiB,IAErB,OACE1pD,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRsB,MAAOA,EACPnB,QAAS4oD,EACToC,QAAM,EACNnkB,gBAAc,GAEb6jB,IAtCkBO,EAsCoBP,EApCvC3pD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,gBACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,SACd2K,EAAAA,GAAAA,cAACmqD,GAAAA,EAAG,CAAChqD,UAAW9K,GAAAA,OAAe+K,MAAON,EAAK,2BAC3CE,EAAAA,GAAAA,cAACmqD,GAAAA,EAAG,CAAChqD,UAAW9K,GAAAA,OAAe2U,UAAQ,EAACogD,WAAYR,EAAiBS,eAAa,EAACjqD,MAAO8pD,IAC1FlqD,EAAAA,GAAAA,cAACmqD,GAAAA,EAAG,CAAChqD,UAAW9K,GAAAA,OAAe+K,MAAON,EAAK,+BAiC9C+pD,KAvCL,IAAuBK,CAwCb,K,gBC7FZ,MA8BA,IAAezsD,EAAAA,EAAAA,KA9BqBlG,IAG9B,IAH+B,OACnCuH,EAAM,QACNG,GACD1H,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACT6mC,gBAAc,EACd1lC,MAAON,EAAK,yBAEZE,EAAAA,GAAAA,cAAA,UAAIS,EAAAA,GAAAA,GAAWX,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,UAAIS,EAAAA,GAAAA,GAAWX,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,UAAIS,EAAAA,GAAAA,GAAWX,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACsqD,GAAAA,EAAQ,CACPziD,IAAK/H,EAAK,qCACVyF,KAAMzF,EAAK,wCAGfE,EAAAA,GAAAA,cAAA,UAAIS,EAAAA,GAAAA,GAAWX,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,WAErE,IC4DZ,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAM6qD,GAAgBjsD,EAAAA,EAAAA,IAASF,GACzBskB,GAAiBC,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAC9CF,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1B+zB,EAAYr5B,QAAQoF,KAASssD,EAAAA,EAAAA,IAActsD,GAC3CusD,EAAU3xD,QAAQoF,KAASS,EAAAA,EAAAA,IAAiBT,GAC5CwsD,EAAe5xD,QAAQoF,KAASW,EAAAA,EAAAA,IAAiBX,GAMvD,MAAO,CACLqsD,gBACA7nC,iBACAyP,YACAs4B,UACAC,eACAC,aAXoBJ,IAAkB7nC,GAAmBgoC,GAAgBD,EAYzEpsD,YAXkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKpJ,KACtCyJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWb,GAAQc,EAAAA,EAAAA,IAAqBP,UAC/DrG,EAUH,GArBe6F,EAjE+BnG,IAS7C,IAT8C,OAClDuH,EAAM,UACNsK,EAAS,UACT+oB,EAAS,QACTs4B,EAAO,aACPC,EAAY,aACZC,EAAY,YACZtsD,EAAW,QACXY,GACD1H,EACC,MAAM,WAAEqzD,IAAexrD,EAAAA,EAAAA,MAEjByrD,GAAyBvrD,EAAAA,EAAAA,KAAY,KACzCsrD,EAAW,CACTxhD,YAAW0hD,SAAS,IAEtB7rD,GAAS,GACR,CAAC2rD,EAAYxhD,EAAWnK,IAErB8rD,GAAmBzrD,EAAAA,EAAAA,KAAY,KACnCsrD,EAAW,CACTxhD,YAAW0hD,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAExDhsD,GAAS,GACR,CAACmK,EAAWnK,EAAS2rD,IAElB9qD,GAAOC,EAAAA,EAAAA,KAcb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTkB,UAAU,MACVC,MAAON,EAAK,yBAEZE,EAAAA,GAAAA,cAAA,SAjBOF,EADLqyB,EACU,yBAGVs4B,GAAWC,EACD,kBAGF,wBAWV1qD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASuqD,GACvDjrD,EAAK,cAEP6qD,GACC3qD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASqqD,GACvDxsD,GACGoC,EAAAA,GAAAA,GAAWX,EAAK,8BAA+BzB,IAC/CyB,EAAK,qDAGbE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,KCvDZ,IAAerC,EAAAA,EAAAA,KA1B6BlG,IAKtC,IALuC,OAC3CuH,EAAM,oBACNosD,EAAsB,EAAC,QACvBjsD,EAAO,QACPksD,GACD5zD,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTkB,UAAU,YACVC,MAAON,EAAK,+BAEZE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,oCAAqCorD,EAAqB,MACnElrD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAAS2qD,GACvDrrD,EAAK,gBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,I,0BClCZ,MC6GA,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAAiC,IAA/B,WAAE7B,GAAY6B,EACrB,MAAQH,WAAY6rD,IAAuB/0C,EAAAA,EAAAA,IAAe1Y,GAAQ0tD,kBAAoB,CAAC,GACjF,gBAAErtD,IAAoBstD,EAAAA,EAAAA,IAAgC3tD,GACtDO,GAAO0/B,EAAAA,EAAAA,IAAkBjgC,GAQ/B,MAAO,CACLytD,qBACAptD,iBAAkBH,GAAcG,EAChCK,YAVkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAKpJ,KACtCyJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWb,GAAQc,EAAAA,EAAAA,IAAqBP,UAC/DrG,EASF6G,6BAPmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAQtEY,iBAPuBV,IAAQW,EAAAA,EAAAA,IAAiBX,GAQjD,GAlBeR,EA9E0CnG,IASxD,IATyD,OAC7DuH,EAAM,WACNjB,EAAU,mBACVutD,EAAkB,gBAClBptD,EAAe,YACfK,EAAW,6BACXK,EAA4B,iBAC5BE,EAAgB,QAChBK,GACD1H,EACC,MAAM,eACJ2H,EAAc,wBACdC,EAAuB,sBACvBosD,IACEnsD,EAAAA,EAAAA,MAEE63B,GAAapT,EAAAA,EAAAA,GAAY/kB,GAEzBO,GAA4BC,EAAAA,EAAAA,KAAY,KAC5CL,IACAC,EAAe,CAAEK,WAAY6rD,EAAqBzrD,oBAAoB,GAAO,GAC5E,CAACT,EAAgBksD,EAAoBnsD,IAElCW,GAA6BN,EAAAA,EAAAA,KAAY,KACzCzB,EACFsB,EAAwB,CAAEI,WAAY6rD,IAEtClsD,EAAe,CAAEK,WAAY6rD,EAAqBzrD,oBAAoB,IAGxEV,GAAS,GACR,CAACpB,EAAYoB,EAASE,EAAyBisD,EAAoBlsD,IAEhEY,GAAOC,EAAAA,EAAAA,KASb,IANAjE,EAAAA,EAAAA,KAAU,MACHgD,GAAUm4B,GACbs0B,GACF,GACC,CAACA,EAAuBzsD,EAAQm4B,IAE9Bm0B,EAIL,OACEprD,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTiB,QAASlC,OAAkBnG,EAAY+H,EACvCO,UAAU,SACVC,MAAON,EAAK,oCAEZE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,gCACRpB,GACCsB,EAAAA,GAAAA,cAAA,SAAG,+EAEJpB,GACCoB,EAAAA,GAAAA,cAAA,SAAG,oDAELA,EAAAA,GAAAA,cAAA,OAAKG,UAAWnC,EAAkB,wBAA0B,kBACzDA,GACCgC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASnB,GACtEhB,GACGoC,EAAAA,GAAAA,GAAWX,EAAK,6BAA8BzB,IAC9CyB,EAAK,2CAGbE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASZ,GACtEE,EAAK9B,EAAkB,gCAAkC,WAE5DgC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,KC8EZ,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM6tD,GAAWn1C,EAAAA,EAAAA,IAAe1Y,IACxBiE,KAAMD,EAAe,OAAEvD,IAAWL,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EACzEE,EAAiC,cAApB8D,GACb,UAAEL,IAAcgqD,EAAAA,EAAAA,IAAgC3tD,GAChDmE,EAAYhJ,SAAS+E,IAAc4tD,EAAAA,EAAAA,IAAgC9tD,IACnE+tD,GAAcC,EAAAA,EAAAA,IAAkChuD,IAC9C4B,WAAY6rD,GAAuBI,EAASH,kBAAoB,CAAC,EACnEO,IAAsBxtD,IAASytD,EAAAA,EAAAA,IAA0BluD,EAAQS,EAAQgtD,GACzEU,IAAcjuD,IAAcO,KAAS2tD,EAAAA,EAAAA,IAAyBpuD,EAAQS,EAAQgtD,GAC9EY,EAAqBR,EAAS37B,gBAAgBo8B,aAC9CC,EAAiBpzD,QAAQkzD,GAAsBR,EAASh7B,gBACzDg7B,EAAS56B,0BAA4B46B,EAASW,2BAEnD,MAAO,CACLtuD,aACAuuD,uBAAuBC,EAAAA,EAAAA,IAA4B1uD,GACnD2uD,kBAAmBhrD,EACnBirD,kBAAmBzqD,EACnB0qD,oBAAqBd,EACrBe,mBAAoBX,EACpBV,qBACAQ,sBACAM,iBACD,GAzBexuD,EA5IoCnG,IAalD,IAbmD,QACvDm1D,EAAO,SACP1iD,EAAQ,gBACRrI,EAAe,WACf9D,EAAU,sBACVuuD,EAAqB,kBACrBE,EAAiB,kBACjBC,EAAiB,oBACjBC,EAAmB,mBACnBC,EAAkB,oBAClBb,EAAmB,eACnBM,EAAc,mBACdd,GACD7zD,EACC,MAAM,sBACJg0D,EAAqB,mCACrBoB,EAAkC,yBAClCC,EAAwB,qBACxBC,EAAoB,iBACpB58B,IACE7wB,EAAAA,EAAAA,MACEU,GAAOC,EAAAA,EAAAA,MAENqC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,MACxDyhB,EAAmBC,EAAiBC,IAAoB3hB,EAAAA,EAAAA,KFnEhCyH,MAM/B8iD,EAAAA,GAAAA,GAAW9iD,EAAW,CAAE,QALxB,SAAoBrD,GAClBA,EAAEoO,kBACF3V,EAAAA,EAAAA,MAAaytD,sBACf,QAEgDh1D,EAAU,EE+D1Dk1D,CAAwB/iD,GAExB,MAAMgjD,GAA8B1tD,EAAAA,EAAAA,KAAY,KAC9CisD,GAAuB,GACtB,CAACA,KAEJzvD,EAAAA,EAAAA,KAAU,KACDkO,GAAa5H,GAAsB4hB,GAAsBkoC,OAM5Dr0D,GALAo1D,EAAAA,GAAAA,GAAyB,CACzBC,YAAaZ,EAAoBjqD,OAAkBxK,EACnDs1D,SAAUb,EAAoBjqD,OAAkBxK,EAChDu1D,MAAOJ,KAGV,CACDhjD,EAAU5H,EAAmB4hB,EAAmB3hB,EAAiB2qD,EAA6Bd,EAC9FI,IAGF,MAAMe,GAAa/tD,EAAAA,EAAAA,KAAY,KAC7ButD,IACA58B,EAAiB,CACfv6B,QAASoK,EAAK,uBAEhByrD,GAAuB,GACtB,CAACsB,EAAsBtB,EAAuBzrD,EAAMmwB,IAEjDq9B,GAAiBhuD,EAAAA,EAAAA,KAAY,KACjCstD,IACArB,GAAuB,GACtB,CAACqB,EAA0BrB,IAExBgC,GAA4B1pC,EAAAA,EAAAA,GAAYuoC,QAAyBv0D,GAAW,GAG5E21D,EAAyB1tD,EAAK,kCAFGkK,EAAWoiD,EAAwBmB,EAE6B,KAEjGptD,GAAYuG,EAAAA,GAAAA,GAChB,uBACAgmD,GAAW,gBACX1iD,GAAY,SAGRyjD,EAAeA,CACnB3pD,EAAcoxB,EAAe10B,EAA4BilC,IAGvDzlC,EAAAA,GAAAA,cAAA,OACEq6B,KAAK,SACLC,SAAU,EACVn6B,WAAWuG,EAAAA,GAAAA,GACT,aACA,OACA++B,GAAe,eAEjBjlC,QAASA,EACTJ,MAAO80B,GAEPl1B,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAS,QAAO5C,QAKnD,OACE9D,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,GACdH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,cACNgD,OAAK,EACL9C,QAASwsD,EACTzpD,UAAU,oBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,6BAA6BC,MAAOotD,GACjDA,GAGF10D,QAAQszD,IACPpsD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACQ,cAApBwB,GAAmC8qD,GAClCgB,EACE,UAAW3tD,EAAK,4BAA6B6sD,GAGhDJ,GACCkB,EAAa,OAAQ3tD,EAAK,+BAAgCmkB,GAE3DuoC,IAAwBZ,GACvB6B,EAAa,WAAY3tD,EAAK,sBAAuBwtD,IAErD1B,GACA6B,EAAa,OAAQ3tD,EAAK,mCAAoCutD,GAE/Df,GACCmB,EAAa,SAAU3tD,EAAK,gCAAiCuC,GAAiB,KAKtFrC,EAAAA,GAAAA,cAAC0tD,GAA0B,CACzB5uD,OAAQsD,EACRvE,WAAYA,EACZoB,QAASqD,IAEXtC,EAAAA,GAAAA,cAAC4pB,EAAAA,EAAW,CACV9qB,OAAQklB,EACR/kB,QAASilB,EACT3kB,WAAY6rD,IAEV,KCrFV,IAAe3tD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAES,EAAM,UAAEgL,IAAciN,EAAAA,EAAAA,IAAe1Y,GAAQgwD,aAAe,CAAC,EACrE,OAAKvvD,GAAWgL,EAIT,CACLwkD,aAAar3C,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQgL,IAAYwkD,aAJpD,CAAC,CAKT,GATelwD,EAxEpB,SAAoBnG,GAGM,IAHL,OACnBuH,EAAM,YACN8uD,GACsBr2D,EACtB,MAAM,SACJgnC,EAAQ,iBACRsvB,IACEzuD,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KAEP+tD,GAAuBp+B,EAAAA,GAAAA,GAAiBk+B,GAAa,GACrDG,GAAY10D,EAAAA,EAAAA,KAAQ,KACxB,IAAKy0D,EACH,OAGF,MAAMvkD,EAASjU,OAAO02B,KAAK8hC,GAG3B,OAFAvkD,EAAOykD,MAAK,CAACC,EAAQC,IAAYJ,EAAqBI,GAAWJ,EAAqBG,KAE/E1kD,CAAM,GACZ,CAACukD,IAEEj6C,GAAcvU,EAAAA,EAAAA,KAAamuB,IAC/BogC,IAEAxxD,YAAW,KACTkiC,EAAS,CAAEzpC,GAAI24B,GAAS,GA7BG,IA8BD,GAC3B,CAACogC,EAAkBtvB,IAEhB4vB,GAAyB7uD,EAAAA,EAAAA,KAAY,KACzCuuD,GAAkB,GACjB,CAACA,IAEJ,OACE7tD,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAAS4uD,EACT1tD,WAAWuG,EAAAA,GAAAA,GChEO,uBDgEsB,UACxCtG,MAAQ,WAAU2tD,GAAWvyD,gBAE7BwE,EAAAA,GAAAA,cAAA,OAAK6G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5Bk2D,GAAaA,EAAUtuD,KAAKguB,GAC3BztB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKkpB,EACLttB,UAAU,6CAEVK,QAASA,IAAMqT,EAAY4Z,IAE3BztB,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQA,EACR2gC,kBAAgB,EAChB5gC,QAAQ6gC,EAAAA,GAAAA,IAAiBvuD,EAAsC,IAAhCguD,EAAsBrgC,IACrD6gC,WAAW,0BAKnBtuD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAAS2tD,GAERruD,EAAK,WAKhB,K,2BE7DA,MA8NA,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAES,EAAM,UAAEgL,IAAciN,EAAAA,EAAAA,IAAe1Y,GAAQ4wD,cAAgB,CAAC,EAChE74D,EAAU0I,GAAUgL,GAAYmN,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQgL,QAAavR,EAErF,MAAO,CACLuG,SACAgL,YACAg2C,UAAW1pD,GAAS0pD,UACpBoP,SAAU94D,GAAS84D,SACnBZ,YAAal4D,GAASk4D,YACtB5T,mBAAoBr8C,EAAOq8C,mBAC5B,GAZet8C,EAlNgCnG,IAQ9C,IAR+C,OACnDuH,EAAM,SACN0vD,EAAQ,UACRpP,EAAS,OACThhD,EAAM,UACNgL,EAAS,YACTwkD,EAAW,mBACX5T,GACDziD,EACC,MAAM,aACJk3D,EAAY,sBACZC,EAAqB,SACrBnwB,IACEn/B,EAAAA,EAAAA,MAGE2vB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAE9B9tB,GAAOC,EAAAA,EAAAA,MACN6xC,EAAWkF,EAAcC,IAAex0C,EAAAA,EAAAA,IAAQ,IAChDosD,EAAWC,IAAgBhpD,EAAAA,EAAAA,SAAkC/N,GAC9Dg3D,EAAiBL,GAAYpP,GAAaoP,EAASjlB,OAjCnB,IAkCjC6V,EAAU0P,QAAQtzD,OAAS,EAC1BuzD,GAAYr0D,EAAAA,EAAAA,OAElBoB,EAAAA,EAAAA,KAAU,KACJgD,IAAW8yC,IACbmd,EAAUl0D,aAAUhD,GAGlB+5C,IAAc9yC,IAChBi4C,IACA6X,OAAa/2D,GACf,GACC,CAAC+5C,EAAW9yC,EAAQi4C,IAEvB,MAAMiY,GAA0B1vD,EAAAA,EAAAA,KAAY,KACtCyvD,EAAUl0D,SACZ0jC,EAAS,CAAEzpC,GAAIi6D,EAAUl0D,UAE3B6zD,GAAuB,GACtB,CAACA,EAAuBnwB,IAErB/V,GAAclpB,EAAAA,EAAAA,KAAY,KAC9Bw3C,GAAc,GACb,CAACA,IAEEjjC,GAAcvU,EAAAA,EAAAA,KAAamuB,IAC/BshC,EAAUl0D,QAAU4yB,EACpBjF,GAAa,GACZ,CAACA,IAEEymC,GAAiB3vD,EAAAA,EAAAA,KAAY,KACjCmvD,EAAa,CACXrwD,OAAQA,EACRgL,UAAWA,GACX,GACD,CAAChL,EAAQqwD,EAAcrlD,IAEpB8lD,GAAe71D,EAAAA,EAAAA,KAAQ,KAC3B,MAAM81D,EAAiC,GAMvC,OALAX,GAAUpP,WAAWp3C,SAAQtI,IAAkB,IAAjB,SAAEq6C,GAAUr6C,EACnCyvD,EAAgB5P,MAAM6P,IAAM3U,EAAAA,EAAAA,IAAe2U,EAAGrV,MACjDoV,EAAgBtrD,KAAKk2C,EACvB,IAEKoV,CAAe,GACrB,CAACX,IAEElgC,GAAUj1B,EAAAA,EAAAA,KAAQ,KACtB,GAAIs1D,EACF,OAAOH,GAAUpP,UACd7wB,QAAO1uB,IAAA,IAAC,SAAEk6C,GAAUl6C,EAAA,OAAK46C,EAAAA,EAAAA,IAAeV,EAAU4U,EAAU,IAC5DlvD,KAAI7B,IAAA,IAAC,OAAE6vB,GAAQ7vB,EAAA,OAAK6vB,CAAM,IAG/B,MAAM4hC,EAAgB/5D,OAAO02B,KAAK4hC,GAAe,CAAC,GAElD,OAAO/+B,EAAAA,GAAAA,IAAO2/B,GAAUpP,UAAU3/C,KAAIygB,IAAA,IAAC,OAAEuN,GAAQvN,EAAA,OAAKuN,CAAM,IAAE43B,OAAOgK,GAAiB,KAAO,GAAG,GAC/F,CAACV,EAAWH,EAAUZ,KAElBhjC,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BmkC,EAAgB3gC,EAASkgC,QAAoC32D,IAAxB22D,EAASc,YAOhD,OAJAxzD,EAAAA,EAAAA,KAAU,KACR+uB,IAAU,CAAElP,UAAW4zC,EAAAA,GAAAA,WAA8B,GACpD,CAAC1kC,IAGF7qB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,IAAW8yC,EACnB3yC,QAASupB,EACTroB,UAAU,0BACVC,MAAON,EAAK,aACZyqB,oBAAqBykC,GAEpBH,GACC7uD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YAAY0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACnDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAWuG,EAAAA,GAAAA,IAAgBioD,GAAa,UACxC1yD,KAAK,OACLuT,QAAM,EAENhP,QAASA,IAAMouD,OAAa/2D,IAE5BmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBACZrH,QAAQ01D,GAAUjlB,SAAUimB,EAAAA,GAAAA,IAAqBhB,EAASjlB,QAE5D2lB,EAAazvD,KAAKs6C,IACjB,MAAMxQ,EAAQ6V,GAAW0P,QACtB9f,MAAMygB,IAAmBhV,EAAAA,EAAAA,IAAegV,EAAe1V,SAAUA,MAAYxQ,MAChF,OACEvpC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkE,KAAKm8C,EAAAA,EAAAA,IAAqB3G,GAC1B55C,WAAWuG,EAAAA,GAAAA,IAAe+zC,EAAAA,EAAAA,IAAekU,EAAW5U,IAAa,UACjE99C,KAAK,OACLuT,QAAM,EAENhP,QAASA,IAAMouD,EAAa7U,IAE5B/5C,EAAAA,GAAAA,cAAC0vD,GAAAA,EAAmB,CAClB3V,SAAUA,EACV55C,UAAU,wBACV65C,mBAAoBA,IAErBlhD,QAAQywC,KAAUimB,EAAAA,GAAAA,IAAqBjmB,GACjC,KAMjBvpC,EAAAA,GAAAA,cAAA,OAAK6G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,EAAWsI,UAAU,wBACjDyqB,GAAapvB,OACZwE,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,6BACV0sB,MAAOjC,EACP0C,WAAYzC,GAEXD,GAAa+kC,SACXliC,IACC,MAAMvL,EAAO6M,EAAUtB,GACjBmiC,EAAgBpB,GAAUpP,UAAU7wB,QAAQshC,GAAYA,EAAQpiC,SAAWA,IAC3EZ,EAA2B,GAC3BijC,EAAalC,IAAcngC,GAgDjC,OA9CAmiC,GAAe5nD,SAASonD,IAClBT,KAAclU,EAAAA,EAAAA,IAAe2U,EAAErV,SAAU4U,IAE7C9hC,EAAMhpB,KACJ7D,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAM,GAAEkpB,MAAUizB,EAAAA,EAAAA,IAAqB0O,EAAErV,YACzC55C,UAAU,yCAEVK,QAASA,IAAMqT,EAAY4Z,IAE3BztB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAACC,KAAMA,EAAMjmB,KAAK,UACzB+D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAACC,KAAM9tC,EAAM+tC,iBAAe,IAC1CjwD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAS0G,IAAI,QAC3B7G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yCACZkuD,EAAAA,GAAAA,IAAiBvuD,EAAoB,IAAdsvD,EAAEc,aAG7Bd,EAAErV,UACD/5C,EAAAA,GAAAA,cAAC0vD,GAAAA,EAAmB,CAClBvvD,UAAU,sBACV45C,SAAUqV,EAAErV,SACZC,mBAAoBA,KAI3B,IAGE2U,GAAciB,GAAep0D,QAChCqxB,EAAMhpB,KACJ7D,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAM,GAAEkpB,YACRttB,UAAU,6CAEVK,QAASA,IAAMqT,EAAY4Z,IAE3BztB,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQA,EACR2gC,kBAAgB,EAChB5gC,OAAQsiC,GAAazB,EAAAA,GAAAA,IAAiBvuD,EAAmB,IAAbgwD,QAAqBj4D,EACjEy2D,WAAW,wBAKZzhC,CAAK,KAIhB7sB,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAEdrtB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAASgoB,GAER1oB,EAAK,UAEF,KC1IZ,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6C,IAA3C,uBAAEywD,GAAwBzwD,EACjC,MAAM0wD,OAA2Dv4D,IAA1Cs4D,EAAuBC,iBACzCC,EAAAA,EAAAA,IAA0B1yD,EAAQwyD,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAet7D,QAAK+C,EACzD,GANe6F,EAlFyCnG,IAGvD,IAHwD,kBAC5D+4D,EAAiB,uBACjBH,GACD54D,EACC,MAAM,2BAAEg5D,IAA+BnxD,EAAAA,EAAAA,OAEhCoxD,EAAUC,IAAeluD,EAAAA,EAAAA,IAAQ,IACjCoL,EAAW+iD,IAAgBnuD,EAAAA,EAAAA,IAAQ,GACpC7G,GAAahB,EAAAA,EAAAA,MAEbi2D,GAAOrxD,EAAAA,EAAAA,KAAY,KACvBmxD,IACI/0D,EAAWb,SACbgB,aAAaH,EAAWb,SAE1BwB,YAAW,KACTk0D,EAA2B,CAAEz7D,GAAIq7D,EAAuBr7D,IAAK,GApBnC,IAqBD,GAC1B,CAACq7D,EAAuBr7D,GAAI27D,EAAaF,IAEtCK,GAAwBtxD,EAAAA,EAAAA,KAAaqH,IACnCA,EAAEwV,QAAwBtnB,QAAQ,mBACtC87D,GACF,GACC,CAACA,KAEJ70D,EAAAA,EAAAA,KAAU,KACRxI,SAASiT,iBAAiB,aAAcqqD,GACxCt9D,SAASiT,iBAAiB,YAAaqqD,GACvCt9D,SAASiT,iBAAiB,YAAaqqD,GACvCt9D,SAASiT,iBAAiB,QAASqqD,GAE5B,KACLt9D,SAASkT,oBAAoB,aAAcoqD,GAC3Ct9D,SAASkT,oBAAoB,YAAaoqD,GAC1Ct9D,SAASkT,oBAAoB,YAAaoqD,GAC1Ct9D,SAASkT,oBAAoB,QAASoqD,EAAsB,IAE7D,CAACA,KAEJhlD,EAAAA,EAAAA,KAAgB,KACd,MAAMilD,GAA6BhrC,EAAAA,EAAAA,MAEnCnqB,EAAWb,QAAUwB,YAAW,KAC9Bs0D,IACAE,GAA4B,GAhDT,IAiDD,GACnB,CAACF,IAEJ,MAAMG,EAAaR,GAAsB,UAASA,IAC5CS,GAAep3D,EAAAA,EAAAA,GAASm3D,GAAaR,GAE3C,IAAKH,EAAuBa,UAC1B,OAGF,MAAMl4C,GAASq3C,EAAuBa,WAAa,GA1DjC,IA4DlB,OACEhxD,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,4BACA8pD,GAAY,SACZ7iD,GAAa,UACbwiD,EAAuBc,YAAc,YAEvCz7D,MAAQ,YAAWsjB,iBAAqBq3C,EAAuBv3C,mBAAmBu3C,EAAuBt3C,QAEzG7Y,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACdvmC,IAAM,UAAS+rD,IACfr0D,KAxEY,IAyEZ8uC,OAAQgmB,EACR/lB,MAAI,EACJkmB,QAAShqD,EAAAA,GAAa,QAAMrP,EAC5BkxB,uBAAqB,EACrBmiB,QAAM,EACN7I,OAAQquB,IAEN,KCoBV,IAAejzD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAES,EAAM,UAAEgL,IAAciN,EAAAA,EAAAA,IAAe1Y,GAAQwzD,sBAAwB,CAAC,EAExEC,GAAsBC,EAAAA,EAAAA,IAAmB1zD,GAI/C,MAAO,CACLS,SACAgL,YACAkoD,0BANgClzD,GAAUgL,GACxCmoD,EAAAA,EAAAA,IAAmC5zD,EAAQS,EAAQgL,QAAavR,EAMlEu5D,sBACD,GAbe1zD,EA9FoCnG,IAMlD,IANmD,OACvDuH,EAAM,OACNV,EAAM,UACNgL,EAAS,0BACTkoD,EAAyB,oBACzBF,GACD75D,EACC,MAAM,0BAAEi6D,EAAyB,0BAAEC,IAA8BryD,EAAAA,EAAAA,OAE1D8qB,EAAQwE,IAAa9oB,EAAAA,EAAAA,IAAS,IAC/B9F,GAAOC,EAAAA,EAAAA,KAEP2xD,GAAepyD,EAAAA,EAAAA,KAAaqyD,IAC3BvzD,GAAWgL,IAEhBooD,EAA0B,CAAEpzD,SAAQtJ,GAAIsU,EAAWuoD,mBACnDF,IAA2B,GAC1B,CAACrzD,EAAQqzD,EAA2BroD,EAAWooD,IAE5CI,GAAetyD,EAAAA,EAAAA,KAAaqH,IAChC+nB,EAAU/nB,EAAEwV,OAAOxM,MAAM,GACxB,IAEGkiD,GAAqBx4D,EAAAA,EAAAA,KAAQ,IAAMy4D,EAAAA,IAAAA,KAAqCC,IAOrE,CACLA,WACAC,eARsB,IAAIC,KAAKC,aAAa,CAACd,GAAsB,CAAExvD,KAAM,aACtCuwD,GAAGJ,GAQxCK,aANoB,IAAIH,KAAKC,aAAa,CAACH,GAAW,CAAEnwD,KAAM,aAC7BuwD,GAAGJ,QAOpC,CAACX,KAELt1D,EAAAA,EAAAA,KAAU,KACHgD,GAAQ4vB,EAAU,GAAG,GACzB,CAAC5vB,IAEJ,MAAMuzD,GAA6Bh5D,EAAAA,EAAAA,KAAQ,IACpC6wB,EAAOkX,OAILywB,EAAmBtjC,QAAO7uB,IAAA,IAAC,SAAEqyD,EAAQ,eAAEC,EAAc,aAAEI,GAAc1yD,EAAA,OAC1EsyD,EAAetmC,cAAc32B,SAASm1B,EAAOwB,gBAC1C0mC,EAAa1mC,cAAc32B,SAASm1B,EAAOwB,gBAC3CqmC,EAASrmC,cAAc32B,SAASm1B,EAAOwB,cAAc,IANjDmmC,GAQR,CAACA,EAAoB3nC,IAExB,OACElqB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UC3FiB,uBD4FjB8pD,QAAM,EACNnrD,OAAQA,EACRgnC,gBAAc,EACd1lC,MAAON,EAAK,YACZb,QAASwyD,GAETzxD,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRloB,IAAI,SACJoL,MAAOua,EACPta,SAAUgiD,EACVjlC,YAAa7sB,EAAK,UAClBwyD,2BAAyB,IAE3BtyD,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GCzG0K,uBDyGzI,kBAC9C2rD,EAA2B5yD,KAAII,IAAA,IAAC,SAAEkyD,EAAQ,aAAEK,EAAY,eAAEJ,GAAgBnyD,EAAA,OACzEG,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKwtD,EACL5xD,UC7GgF,uBD8GhFoyD,cAAejB,IAA8BS,EAAW,aAAUl6D,EAClEsY,SAAUmhD,IAA8BS,EACxCS,WAAS,EACTC,QAAM,EAENjyD,QAASA,IAAMkxD,EAAaK,IAE5B/xD,EAAAA,GAAAA,cAAA,QAAMG,WAAWuG,EAAAA,GAAAA,GAAe,QCrH+E,0BDsH5GjG,EAAAA,GAAAA,GAAW2xD,EAAc,CAAC,aAAc,CAAEM,UAAWxoC,KAExDlqB,EAAAA,GAAAA,cAAA,QAAMG,WAAWuG,EAAAA,GAAAA,GAAe,WCxHiH,0BDyH9IjG,EAAAA,GAAAA,GAAWuxD,EAAgB,CAAC,aAAc,CAAEU,UAAWxoC,KAEjD,KAGT,K,4BE7HZ,MAwBA,GAvBEyoC,IAGA,MAAMC,GAAYl4D,EAAAA,EAAAA,IAAuB,MAEnCoa,GAAgBxV,EAAAA,EAAAA,KAAaqH,IACnB,UAAVA,EAAEpC,KACYquD,EAAU/3D,UAAYvH,SAASu/D,eAG/CF,GACF,GACC,CAACA,IAQJ,OANA72D,EAAAA,EAAAA,KAAU,KACRM,OAAOmK,iBAAiB,UAAWuO,GAAe,GAE3C,IAAM1Y,OAAOoK,oBAAoB,UAAWsO,GAAe,KACjE,CAACA,IAEG89C,CAAS,E,4BCWlB,MA6EA,IAAen1D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1B00D,EAAoB50D,IAAQO,EAAAA,EAAAA,IAAqBP,GAOvD,MAAO,CACLA,OACAgkB,KARW4wC,GAAoBt0D,EAAAA,EAAAA,IAAWb,EAAQm1D,QAAqBj7D,EASvEk7D,UAReC,EAAAA,EAAAA,IAAmBr1D,EAAQS,GAS1C4P,QARc9P,GACZ+0D,EAAAA,EAAAA,IAAkB/0D,GAAMg1D,EAAAA,EAAAA,IAAqBv1D,IAASw1D,EAAAA,EAAAA,IAAuBx1D,SAC7E9F,EAOFu7D,gBAAiBt6D,QAAQ6E,EAAO01D,YAAYC,YAAY93D,QACzD,GAhBekC,EA7EoCnG,IASlD,IATmD,OACvD6G,EAAM,aACNm1D,EAAY,QACZ/yD,EAAO,KACPtC,EAAI,KACJgkB,EAAI,SACJ6wC,EAAQ,QACR/kD,EAAO,gBACPolD,GACD77D,EACC,MAAOi8D,EAAiBC,EAAeC,IAAkBnxD,EAAAA,EAAAA,MAClDoxD,EAAuBC,EAAqBC,IAAwBtxD,EAAAA,EAAAA,MACpEuxD,EAA6BC,EAA2BC,IAA+BzxD,EAAAA,EAAAA,MACvF0xD,EAAuBC,EAAqBC,IAAyB5xD,EAAAA,EAAAA,KAEtE6xD,GAAyB90D,EAAAA,EAAAA,KAAY,KACzCy0D,IACAH,GAAqB,GACpB,CAACG,EAA2BH,IAEzBS,GAAa/0D,EAAAA,EAAAA,KAAY,KAC7B40D,IACAT,GAAe,GACd,CAACS,EAAqBT,IAEnBa,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3Cr2D,OACAgkB,OACA6wC,WACA/kD,UACAolD,kBACAiB,aACAD,2BACC,GAEGvgD,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQpC,EAAO,GACd,CAACA,EAAQoC,IAENoyD,EAAY4B,GAAmB3gD,GAErC,GAAK3V,EAIL,OACE8B,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,oCACVK,QAASqT,EACTygD,eAAgBA,EAChB1B,UAAWA,IAEVt0D,EAAAA,EAAAA,IAASF,GACR4B,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQrvB,EAAQm1D,aAAcA,EAAckB,WAAW,UAExEz0D,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAACtvB,OAAQA,EAAQm1D,aAAcA,EAAckB,WAAW,UAEvER,GACCj0D,EAAAA,GAAAA,cAAC00D,GAAAA,EAAa,CACZ51D,OAAQ00D,EACRv0D,QAASy0D,EACTnpC,oBAAqB4pC,EACrB/1D,OAAQA,IAGX01D,GACC9zD,EAAAA,GAAAA,cAAC20D,GAAAA,EAAe,CACd71D,OAAQ60D,EACR10D,QAAS40D,EACTtpC,oBAAqBypC,EACrB51D,OAAQA,IAGH,KC1ETw2D,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAO,GAuFnD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2wB,QAASwmC,GAAen3D,EAAOo3D,SACjChmC,EAAYpxB,EAAOqxB,MAAMpB,MACzB,qBAAEonC,GAAyBr3D,EAEjC,MAAO,CACLm3D,aACA/lC,YACAimC,uBACD,GAVet3D,EArF8BnG,IAK5C,IAL6C,WACjDu9D,EAAU,UACV/lC,EAAS,qBACTimC,EAAoB,QACpBC,GACD19D,EACC,MAAM,aACJ29D,EAAY,SAAE32B,EAAQ,uBACtB42B,EAAsB,wBAAEC,IACtBh2D,EAAAA,EAAAA,MAGEi2D,GAAc36D,EAAAA,EAAAA,IAAuB,OAI3CoB,EAAAA,EAAAA,KAAU,KACR84D,IAAa,KACXM,GAAc,GACd,GACD,CAACA,KAEJpP,EAAAA,GAAAA,GAAoBuP,GAAcP,GAElC,MAAMjhD,GAAcvU,EAAAA,EAAAA,KAAaxK,IAC/BypC,EAAS,CAAEzpC,KAAIwgE,sBAAsB,IACrCL,IACA54D,YAAW,KACT84D,EAAuB,CAAErgE,MAAK,GAjCJ,IAkCD,GAC1B,CAACypC,EAAU42B,EAAwBF,IAEhCM,GAAgCj2D,EAAAA,EAAAA,KAAY,KAChD81D,GAAyB,GACxB,CAACA,IAEEt1D,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACZ20D,GACC90D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC3DmI,EAAAA,GAAAA,cAAA,OAAK8E,IAAKuwD,EAAal1D,UAAU,0BAC9B20D,EAAWr1D,KAAKguB,GACfztB,EAAAA,GAAAA,cAAA,OACEuE,IAAKkpB,EACLttB,UAAU,gBACVK,QAASA,IAAMqT,EAAY4Z,GAC3B5mB,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAE1BmI,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAACC,KAAM6M,EAAUtB,KACxBztB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAiBM,EAAAA,GAAAA,IAAWlC,EAAAA,EAAAA,IAAuBwwB,EAAUtB,KAvD/E,WA6DNunC,GACCh1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,2CAA2C0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChFiI,EAAK,UAENE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNiD,UAAU,qBACV/C,QAAS+0D,EACTt0C,MAAOnhB,EAAKmhB,OAEZjhB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAGhB60D,EAAqBv1D,KAAK3K,GACzBkL,EAAAA,GAAAA,cAACw1D,GAAoB,CACnBp3D,OAAQtJ,EACR0L,QAASqT,OAKb,KCoBV,IAAepW,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAChC,IAAKF,EACH,MAAO,CAAC,EAGV,MAAM40D,GAAoBr0D,EAAAA,EAAAA,IAAqBP,GACzCu3D,EAAkB3C,GAAoBt0D,EAAAA,EAAAA,IAAWb,EAAQm1D,QAAqBj7D,EAEpF,MAAO,CACLqG,OACAw3D,aAAc/3D,EAAO+3D,gBACjB5C,GAAqB,CAAE2C,mBAC5B,GAde/3D,EAxF2BnG,IAOzC,IAP0C,QAC9C7B,EAAO,YACPigE,EAAW,OACXv3D,EAAM,KACNF,EAAI,gBACJu3D,EAAe,aACfC,GACDn+D,EACC,MAAM,aAAEmqB,IAAiBtiB,EAAAA,EAAAA,OAEnB,SAAEoD,IAAaC,EAAAA,EAAAA,MACfmzD,GAAkBC,EAAAA,EAAAA,IAAkBngE,QAAkDmC,GAAvC2E,EAAAA,EAAAA,IAA4B9G,GAC3EogE,GAAen8D,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoB/D,EAAS,UACrDqgE,EAAej9D,SAAQk9D,EAAAA,EAAAA,IAAqBtgE,IAE5Cme,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BoiB,EAAa,CAAEtjB,SAAQgL,UAAW1T,EAAQZ,GAAIwgE,sBAAsB,GAAO,GAC1E,CAACl3D,EAAQsjB,EAAchsB,EAAQZ,KAE5BgL,GAAOC,EAAAA,EAAAA,KAEP6yD,EAAY4B,GAAmB3gD,GAErC,GAAK3V,EAIL,OACE8B,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,kCACVqP,QAAShN,EACThC,QAASqT,EACT++C,UAAWA,GAEX5yD,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACL/jB,KAAMA,EACNgkB,KAAMuzC,EACN7Z,gBAAiB6Z,GAAiBQ,OAClCP,aAAcA,IAEhB11D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CACZC,KAAMyF,GAAmBv3D,EACzB+xD,iBAAe,EACfrU,gBAAiBx9C,IAAWq3D,GAAiB3gE,IAAM2gE,GAAiBQ,SAEtEj2D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAAC61C,GAAAA,EAAI,CAAC11C,UAAU,SACb+1D,EAAAA,GAAAA,IAAoBp2D,EAAqB,IAAfpK,EAAQ0sB,SAKzCpiB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAI,QASvC,SACE/G,EAAcpK,EAAqB2E,EAAkBs7D,EAAsBI,GAE3E,IAAK17D,EACH,OAAO87D,EAAAA,EAAAA,GAAqBr2D,EAAMpK,OAASmC,EAAW89D,GAGxD,MAAMS,GAAYC,EAAAA,EAAAA,IAAoB3gE,GAEtC,OACEsK,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBACdH,EAAAA,GAAAA,cAAA,OACEjM,IAAKsG,EACLud,IAAI,GACJzX,WACEuG,EAAAA,GAAAA,GAAe,uBAAwBqvD,GAAgB,QAASK,GAAa,4BAGhFp+D,EAAAA,EAAAA,IAAgBtC,IAAYsK,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBACzCg2D,EAAAA,EAAAA,GAAqBr2D,EAAMpK,GAAS,EAAMigE,GAGjD,CA9BaW,CAAcx2D,EAAMpK,EAASogE,GAAgBF,EAAgBD,EAAaI,MAIxE,KCnDf,IAAet4D,EAAAA,EAAAA,KA5CmBlG,IAE5B,IAF6B,WACjCg/D,EAAU,SAAE5D,GACbp7D,EACC,MAAMi/D,GAAcn9D,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCk9D,GAE9B,GADgBA,EAAW3gB,MAAM,0BACpB,CACX,MAAMxzB,EAAO,IAAI9G,KAAKi7C,GACtB,MAAO,CAAC,CAAEn0C,OAAM7c,MAAM8zB,EAAAA,GAAAA,IAAmBjX,IAC3C,CAEA,MAAMq0C,EAAa,GACbC,EAAc,IAAIp7C,KAClB4c,EAAcw+B,EAAYj/B,cAC1Bk/B,EAAaD,EAAYt+B,UAAa,IAAI9c,KAAM,GAAE4c,KAAeq+B,KAAen+B,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAI5T,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMlC,EAAO,IAAI9G,KAAM,GAAEq7C,EAAaryC,KAAKiyC,KAC3CE,EAAW5yD,KAAK,CAAEue,OAAM7c,MAAM8zB,EAAAA,GAAAA,IAAmBjX,IACnD,CAEA,OAAOq0C,CACT,CAvCoCG,CAAuBL,IAAa,CAACA,IACvE,OACEv2D,EAAAA,GAAAA,cAAA,WAASG,UAAU,6CAChBq2D,EAAY/2D,KAAIC,IAAoB,IAAnB,KAAE0iB,EAAI,KAAE7c,GAAM7F,EAC9B,OACEM,EAAAA,GAAAA,cAAA,OACEQ,QAASA,IAAMmyD,EAASvwC,GACxBjiB,UAAU,YACVoE,IAAKgB,GAELvF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,YAAOuF,GACH,IAGF,I,4BCuBd,MAGMqvD,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GAyOjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQiwB,KAAM3D,GAActsB,EAAOgwB,OAE3BW,QAASuoC,GAAoBl5D,EAAO0wB,aAAe,CAAC,EAE5D,IAAKwoC,EACH,MAAO,CACL5sC,aAIJ,MAAM,cACJ1H,EAAa,SAAE/iB,EAAQ,aAAEk2D,GACvB/3D,GACE,eACJm5D,EAAc,cAAEC,EAAa,aAAEC,EAAY,cAAEzzC,IAC3ClN,EAAAA,EAAAA,IAAe1Y,GAAQs5D,cACnBhoC,QAASioC,EAAe5oC,QAAS6oC,GAAkBJ,GAAiB,CAAC,GACrE9nC,QAASmoC,EAAc9oC,QAAS+oC,GAAiBL,GAAgB,CAAC,GAClEM,SAAUC,GAA2B/3D,EACvC8jB,EAAWC,GAAehe,MAAM+d,SAEtC,MAAO,CACLf,gBACAs0C,kBACAO,eACAC,eACAH,gBACAC,gBACA7zC,WACAi0C,yBACAttC,YACA6sC,iBACApB,eACD,GAnCeh4D,EAvO2BnG,IAKzC,IAL0C,YAC9Co+D,EAAW,WAAEY,EAAU,gBAAEiB,EAAe,cAAEj1C,EAAa,gBACvDs0C,EAAe,aAAEO,EAAY,aAAEC,EAAY,cAAEH,EAAa,cAAEC,EAAa,SACzE7zC,EAAQ,uBAAEi0C,EAAsB,UAAEttC,EAAS,eAAE6sC,EAAc,aAAEpB,EAAY,QACzET,EAAO,mBAAEwC,GACVlgE,EACC,MAAM,SACJgnC,EAAQ,uBAAE42B,EAAsB,qBAAEuC,EAAoB,sBAAEC,IACtDv4D,EAAAA,EAAAA,MAGEw4D,GAAmBl9D,EAAAA,EAAAA,IAAuB,MAE1CoF,GAAOC,EAAAA,EAAAA,MAEP,SAAEyC,IAAaC,EAAAA,EAAAA,OACdo1D,EAAqBC,IAA0BlyD,EAAAA,EAAAA,KAAkB,IACjEmyD,EAAsBC,IAA2BpyD,EAAAA,EAAAA,KAAkB,GAEpEqpD,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAM,QACN,GAEN,GAEC,CAAC8zD,EAAcgC,EAAsB/B,IAElCsC,GAAkB34D,EAAAA,EAAAA,KACrBxK,IACCypC,EAAS,CAAEzpC,KAAIwgE,sBAAsB,IAEjCxgE,IAAOytB,GACT4yC,EAAuB,CAAErgE,OAGtB0N,GACHyyD,GACF,GAEF,CAAC12B,EAAUhc,EAAe/f,EAAU2yD,EAAwBF,IAGxDiD,GAAwB54D,EAAAA,EAAAA,KAAaxK,IACzC6iE,EAAsB,CAAE7iE,MAAK,GAC5B,CAAC6iE,IAEEX,GAAe39D,EAAAA,EAAAA,KAAQ,KAC3B,IAAKs8D,GAAgBA,EAAYwC,WAAW,MAAQxC,EAAYn6D,OAAS,EACvE,OAAOqpD,GAAAA,EAGT,MAAMuT,EAAmB,IACnB71C,EAAgB,CAACA,GAAiB,MAClCs0C,GAAmB,IAGnB9nC,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9ByqC,GAAkB9oC,EAAAA,EAAAA,IACtB6oC,EAAkBrpC,EAAW4mC,EAAapzC,EAAeziB,EAAK,kBAGhE,MAAO,KACFuvB,EAAAA,EAAAA,KAAYR,EAAAA,GAAAA,IAAO,IAChBwpC,GAAmB,MACnBjB,GAAgB,MAChBC,GAAgB,KAClBptC,OAAWpyB,EAAW0qB,EAAgB,CAACA,QAAiB1qB,GAC7D,GACA,CAAC89D,EAAapzC,EAAes0C,EAAiB/2D,EAAMs3D,EAAcC,EAAcptC,KAEnF67B,EAAAA,GAAAA,GAAoB8R,GAAmBZ,EAAax7D,QAAQ,GAE5D,MAAMu7D,GAAgB19D,EAAAA,EAAAA,KAAQ,KACvBs8D,GAAeA,EAAYn6D,OAjFO,IAiFyC07D,IAAkBC,EACzFtS,GAAAA,GAGFx1B,EAAAA,EAAAA,KACLR,EAAAA,GAAAA,IAAO,IAAIqoC,KAAkBC,IAC7BltC,GACA,IAED,CAACA,EAAWitC,EAAeC,EAAexB,IAEvC2C,GAAgBj/D,EAAAA,EAAAA,KAAQ,KACtBs8D,GAAgBY,IAAgBjzC,GAAgC,IAApBA,EAAS9nB,OAIpD8nB,EACJ7jB,KAAK3K,IACJ,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAErC,OAAOhB,IAAyBn5D,IAASwvB,KAAKhZ,OAAOxL,GAAW,IAEjEmlB,OAAOz1B,SACPk1D,MAAK,CAACwK,EAAGC,IAAMA,EAAEr2C,KAAOo2C,EAAEp2C,OAVpByiC,GAAAA,GAWR,CAACvhC,EAAUi0C,EAAwB5B,EAAaY,IAE7CmC,GAA2Bp5D,EAAAA,EAAAA,KAAY,KAC3Cw4D,GAAwBD,EAAoB,GAC3C,CAACA,IAEEc,GAA4Br5D,EAAAA,EAAAA,KAAY,KAC5C04D,GAAyBD,EAAqB,GAC7C,CAACA,IAmBEa,EAAe9B,IAAmBA,EAAenpC,QAAUmpC,EAAet3D,WAC1Ew3D,EAAax7D,SAAWu7D,EAAcv7D,SAAW88D,EAAc98D,OAErE,OAAKm6D,GAAgBY,EAKnBv2D,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,2BACV0sB,MAAOyrC,EACPhrC,WAAY2hC,EAEZ4J,sBAAoB,EACpBC,YAAU,GAETtB,GACCx3D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAC+4D,GAAW,CACVxC,WAAYiB,EACZ7E,SAAU8E,KAIfmB,GACC54D,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBhH,QAAQk+D,EAAax7D,SACpBwE,EAAAA,GAAAA,cAAA,OACEG,UAAU,2CACV0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,EAC1BiN,IAAK8yD,GAEJZ,EAAav3D,KAAK3K,GACjBkL,EAAAA,GAAAA,cAACi5D,GAAAA,EAAkB,CACjBC,aAAcpkE,EACd0L,QAAS03D,EACThrC,SAAUp4B,OAKjBgE,QAAQk+D,EAAax7D,SACpBwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkB0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,GACxDm/D,EAAax7D,OAnLK,GAoLjBwE,EAAAA,GAAAA,cAAC61C,GAAAA,EAAI,CAAC11C,UAAU,OAAOK,QAASk4D,GAC7B54D,EAAK+3D,EAAsB,2BAA6B,6BAG5D/3D,EAAK,oCAEPk3D,EAAav3D,KAAI,CAAC3K,EAAImT,KACrB,GAAK4vD,KAAuB5vD,GA3LT,GA+LnB,OACEjI,EAAAA,GAAAA,cAACw1D,GAAoB,CACnBp3D,OAAQtJ,EACR0L,QAASy3D,GACT,KAKTn/D,QAAQi+D,EAAcv7D,SACrBwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkB0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,GACxDk/D,EAAcv7D,OA3MI,GA4MjBwE,EAAAA,GAAAA,cAAC61C,GAAAA,EAAI,CAAC11C,UAAU,OAAOK,QAASm4D,GAC7B74D,EAAKi4D,EAAuB,2BAA6B,6BAG7Dj4D,EAAK,mCAEPi3D,EAAct3D,KAAI,CAAC3K,EAAImT,KACtB,GAAK8vD,KAAwB9vD,GAnNV,GAuNnB,OACEjI,EAAAA,GAAAA,cAACw1D,GAAoB,CACnBp3D,OAAQtJ,EACRy+D,cAAY,EACZ/yD,QAASy3D,GACT,KAKTn/D,QAAQw/D,EAAc98D,SACrBwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkB0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,GAAYiI,EAAK,mBAC3Ew4D,EAAc74D,KAlHvB,SAA4B/J,GAC1B,MAAM6P,GAAO4wD,EAAAA,EAAAA,GAAqBr2D,EAAMpK,GAClCwI,EAAO+rB,EAAUv0B,EAAQ0I,QAE/B,GAAKmH,GAASrH,EAId,OACE8B,EAAAA,GAAAA,cAACm5D,GAAW,CACV/6D,OAAQ1I,EAAQ0I,OAChB1I,QAASA,EACTigE,YAAaA,GAGnB,MAMS31D,EAAAA,GAAAA,cAACo5D,GAAc,CAACnE,QAASA,GAgGf,KCtQflrC,GAAkB,EAAI3jB,EAAAA,GAmC5B,IAAe3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAAsC,IAApC,OAAEtB,EAAM,QAAEouB,GAAS9sB,EAC1B,MACMosB,GADO3tB,EAAAA,EAAAA,IAAWR,EAAQS,IACZmtB,SAASiB,GAE7B,MAAO,CACLV,QACD,GAPepuB,EAjCqCnG,IAInD,IAJoD,QACxDi1B,EAAO,MACPV,EAAK,QACLtrB,GACDjJ,EACC,MAAMsc,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQgsB,EAAQ,GACf,CAACA,EAAShsB,IAEPoyD,EAAY4B,GAAmB3gD,GAErC,GAAKiY,EAIL,OACE9rB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,oCACVK,QAASqT,EACTg9B,gBAAgB,aAChB+hB,UAAWA,GAEX5yD,EAAAA,GAAAA,cAACmtB,GAAAA,EAAS,CACRlxB,KAAM8tB,GACN+B,MAAOA,EACP3rB,UAAU,aACVitB,gBAAgB,sBAElBptB,EAAAA,GAAAA,cAAA,OAAK6G,IAAI,OAAO1G,UAAU,aAAYM,EAAAA,GAAAA,GAAWqrB,EAAM1rB,QAC9C,KCjBTw0D,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GAgIjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQiwB,KAAM3D,GAActsB,EAAOgwB,OAC7B,cAAEpL,EAAe/iB,UAAY83D,SAAUC,GAAwB,aAAE7B,GAAiB/3D,GAClF,eACJm5D,EAAc,cAAEvzC,EAAa,cAAE81C,EAAej7D,OAAQk7D,IACpDjjD,EAAAA,EAAAA,IAAe1Y,GAAQs5D,cAErB,SAAE3zC,GAAcC,GAAehe,MAAS,CAAC,EAE/C,MAAO,CACLgd,gBACAe,WACAi0C,yBACAttC,YACA6sC,iBACAuC,gBACA3D,eACA4D,eACD,GAnBe57D,EA9HkCnG,IAYhD,IAZiD,YACrDo+D,EAAW,gBACX6B,EAAe,SACfl0C,EAAQ,uBACRi0C,EAAsB,UACtBttC,EAAS,eACT6sC,EAAc,aACdpB,EAAY,cACZ2D,EAAa,aACbC,EAAY,mBACZ7B,EAAkB,QAClBxC,GACD19D,EACC,MAAM,qBAAEmgE,EAAoB,SAAEn5B,IAAan/B,EAAAA,EAAAA,MAErCU,GAAOC,EAAAA,EAAAA,MACP,SAAEyC,IAAaC,EAAAA,EAAAA,MAEfwsD,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAM,QACN,GAEN,GAEC,CAAC8zD,EAAcgC,EAAsB/B,IAElCppC,GAAmBjtB,EAAAA,EAAAA,KACtBxK,IACCypC,EAAS,CAAEzpC,GAAIwkE,EAAcx7D,SAAUhJ,EAAIwgE,sBAAsB,IAE5D9yD,GACHyyD,GACF,GAEF,CAAC12B,EAAU+6B,EAAc92D,EAAUyyD,IAG/BqD,GAAgBj/D,EAAAA,EAAAA,KAAQ,IACvBiqB,GAAgC,IAApBA,EAAS9nB,OAInB8nB,EACJ7jB,KAAK3K,IACJ,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAErC,OAAOhB,IAAyBn5D,IAASwvB,KAAKhZ,OAAOxL,GAAW,IAEjEmlB,OAAOz1B,SACPk1D,MAAK,CAACwK,EAAGC,IAAMA,EAAEr2C,KAAOo2C,EAAEp2C,OAVpByiC,GAAAA,GAWR,CAACvhC,EAAUi0C,IAmBRqB,EAAe9B,IAAmBA,EAAenpC,QAAUmpC,EAAet3D,WAAa84D,EAAc98D,SACrG69D,GAAe79D,OAErB,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,yCACV0sB,MAAOyrC,EACPhrC,WAAY2hC,EACZ6J,YAAU,GAETtB,GACCx3D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAC+4D,GAAW,CACVxC,WAAYiB,EACZ7E,SAAU8E,KAIfmB,GACC54D,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBhH,QAAQugE,GAAe79D,SACtBwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uCAAuC0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,GAC7EiI,EAAK,WAEPu5D,EAAe55D,KAAK3K,GAEjBkL,EAAAA,GAAAA,cAACu5D,GAAqB,CACpBn7D,OAAQk7D,EACR9sC,QAAS13B,EACT0L,QAAS+rB,OAMlBzzB,QAAQw/D,EAAc98D,SACrBwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uCAAuC0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,GAC7EiI,EAAK,mBAEPw4D,EAAc74D,KA/DzB,SAA4B/J,GAC1B,MAAM6P,GAAO4wD,EAAAA,EAAAA,GAAqBr2D,EAAMpK,GAClCwI,EAAO+rB,EAAUv0B,EAAQ0I,QAE/B,GAAKmH,GAASrH,EAId,OACE8B,EAAAA,GAAAA,cAACm5D,GAAW,CACV/6D,OAAQ1I,EAAQ0I,OAChB1I,QAASA,EACTigE,YAAaA,GAGnB,MAoDQ,KC7IH,SAAS6D,GAAsB53D,GACpC,MAAO,CAACjE,EAAqB+Y,KAC3B,MAAM80C,GAAWn1C,EAAAA,EAAAA,IAAe1Y,IACxBiwB,KAAM3D,GAActsB,EAAOgwB,OAC3BC,KAAMmB,GAAcpxB,EAAOqxB,OAC7B,eACJ8nC,EAAc,cAAEvzC,EAAa,OAAEnlB,GAC7BotD,EAASyL,aAKP5wB,EAAuB,UAATzkC,EAAmBA,EAAQ8U,GAAO+iD,QAAU,QAAU,SAElEnC,SAAUC,GAA2B55D,EAAO6B,SAC9C8jB,EAAWC,IAAgB8iB,IAAc/iB,SAEzCo2C,EAAkBlO,EAASkO,gBAAgBpC,SAEjD,MAAO,CACLz5B,OAAOC,EAAAA,EAAAA,IAAYngC,GACnBg8D,eAAwB9hE,IAAbyrB,KACLwzC,GAAiBh+D,QAAQg+D,EAAenpC,OAASmpC,EAAet3D,UACtEyqB,YACA8E,YACAwoC,yBACAj0C,WACAg2C,aAAcl7D,EACds7D,kBACAt4D,gBAAiBhD,GAASD,EAAAA,EAAAA,IAAWR,EAAQS,IAAS8C,iBAAcrJ,EACpE69D,aAAc/3D,EAAO+3D,aACtB,CAEL,C,gBC1BA,MAAMkE,GAAe,QAGfhF,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GAmHjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB87D,GAAsBI,IADJl8D,EAjH4BnG,IAO1C,IAP2C,YAC/Co+D,EAAW,UACXgE,EAAS,uBACTpC,EAAsB,SACtBj0C,EAAQ,aACRoyC,EAAY,gBACZt0D,GACD7J,EACC,MAAM,qBACJmgE,EAAoB,gBACpBj0C,IACErkB,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCoF,GAAOC,EAAAA,EAAAA,MAEL83C,QAASgiB,IAAgC1hB,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7/B,EACTwgC,WAxB0B,MA2BtBkW,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAMg4D,IACN,GAEN,GAEC,CAAClE,EAAcgC,EAAsB/B,IAElC2C,GAAgBj/D,EAAAA,EAAAA,KAAQ,IACvBiqB,GAAai0C,EAIXj0C,EAAS7jB,KAAK3K,IACnB,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAErC,OAAOhB,EAAuBn5D,IAASwvB,KAAKhZ,OAAOxL,GAAW,IAC7DmlB,OAAOz1B,SAPD+rD,GAAAA,GAQR,CAAC0S,EAAwBj0C,IAEtBw2C,GAAoBx6D,EAAAA,EAAAA,KAAY,CAACxK,EAAYsJ,KACjDqlB,EAAgB,CACdrlB,SACA5G,QAAS1C,EACT1B,OAAQe,EAAAA,GAAAA,cACR,GACD,CAACsvB,IA6BEs2C,GAAoBnU,EAAAA,GAAAA,GAAkB,CAAC+P,GAAcre,EAAAA,OAA+BqiB,EACpFK,EAAcD,GAAqBz2C,GAAYA,EAAS9nB,OAAS,IAAMm6D,EACvEsE,EAAgBF,GAAqBz2C,GAAYA,EAAS9nB,OAAS,GAAKm6D,EAExElvD,GAAaC,EAAAA,GAAAA,GACjB,+BACAuzD,GAAiB,aAGnB,OACEj6D,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAU,cAChCH,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAWsG,EACXomB,MAAOyrC,EACP4B,aAAevE,EAAyB,YAAX,SAC7BroC,WAAY2hC,EACZ6J,YAAU,IAERiB,GAAqB/5D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAC9B0sC,KAAuBz2C,GAAgC,IAApBA,EAAS9nB,SAC3CwE,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBk6D,GAlDHh6D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAa0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACnDygE,EAAc74D,KAAK/J,GAClBsK,EAAAA,GAAAA,cAACm6D,GAAAA,EAAK,CACJ51D,IAAM,GAAE7O,EAAQ0I,UAAU1I,EAAQZ,KAClC2iD,SAAS,eACT/hD,QAASA,EACTwL,YAAaE,GAAmB1L,EAAQwL,YACxCi5C,oBAAqB0f,EACrBr5D,QAASs5D,OA2CZG,GAnCE3B,EAAc74D,KAAK/J,GACxBsK,EAAAA,GAAAA,cAACm5D,GAAW,CACV50D,IAAK7O,EAAQZ,GACbsJ,OAAQ1I,EAAQ0I,OAChB1I,QAASA,OAiCP,K,yBClHV,MAAMkkE,GAAe,QAGfhF,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GAyGjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB87D,GAAsBI,IADJl8D,EAvG2BnG,IASzC,IAT0C,YAC9Co+D,EAAW,UACXgE,EAAS,UACT1vC,EAAS,UACT8E,EAAS,uBACTwoC,EAAsB,SACtBj0C,EAAQ,aACRoyC,EAAY,gBACZt0D,GACD7J,EACC,MAAM,qBACJmgE,EAAoB,aACpBh2C,IACEtiB,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCoF,GAAOC,EAAAA,EAAAA,MAEL83C,QAASgiB,IAAgC1hB,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7/B,EACTwgC,WA1B0B,MA6BtBkW,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAMg4D,IACN,GAEN,GAEC,CAAClE,EAAcgC,EAAsB/B,IAElC2C,GAAgBj/D,EAAAA,EAAAA,KAAQ,IACvBiqB,GAAai0C,EAIXj0C,EAAS7jB,KAAK3K,IACnB,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAErC,OAAOhB,EAAuBn5D,IAASwvB,KAAKhZ,OAAOxL,GAAW,IAC7DmlB,OAAOz1B,SAPD+rD,GAAAA,GAQR,CAAC0S,EAAwBj0C,IAEtB82C,GAAqB96D,EAAAA,EAAAA,KAAY,CAAC8J,EAAmBhL,KACzDsjB,EAAa,CAAEtjB,SAAQgL,aAAY,GAClC,CAACsY,IA8BEq4C,GAAoBnU,EAAAA,GAAAA,GAAkB,CAAC+P,GAAcre,EAAAA,OAA+BqiB,EAE1F,OACE35D,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAU,cAChCH,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,8CACV0sB,MAAOyrC,EACPhrC,WAAY2hC,EACZ6J,YAAU,IAERiB,GAAqB/5D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAC9B0sC,KAAuBz2C,GAAgC,IAApBA,EAAS9nB,SAC3CwE,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBi6D,GAAqBz2C,GAAYA,EAAS9nB,OAAS,GA5CjD88D,EAAc74D,KAAI,CAAC/J,EAASuS,KACjC,MAAMoyD,EAAkC,IAAVpyD,IACzBqyD,EAAAA,GAAAA,IAAY5kE,EAAQ0sB,SAAUk4C,EAAAA,GAAAA,IAAYhC,EAAcrwD,EAAQ,GAAGma,MACxE,OACEpiB,EAAAA,GAAAA,cAAA,OACEG,UAAU,sBACV0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,EAC1B0M,IAAK7O,EAAQZ,IAEZulE,GACCr6D,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IACtD0iE,EAAAA,GAAAA,IAAmBz6D,EAAM,IAAIwb,KAAoB,IAAf5lB,EAAQ0sB,QAG/CpiB,EAAAA,GAAAA,cAACw6D,GAAAA,EAAO,CACNj2D,IAAK7O,EAAQZ,GACbY,QAASA,EACTqsB,aAAa04C,EAAAA,GAAAA,GAAc36D,EAAMpK,EAASu0B,EAAW8E,GACrD7tB,YAAaE,GAAmB1L,EAAQwL,YACxCi5C,oBAAqB0f,EACrBa,eAAgBN,IAEd,KAwBJ,K,gBCtGV,MAAMR,GAAe,YAGfhF,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GA0GjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB87D,GAAsBI,IADJl8D,EAxG2BnG,IASzC,IAT0C,YAC9Co+D,EAAW,UACXgE,EAAS,UACT1vC,EAAS,UACT8E,EAAS,uBACTwoC,EAAsB,SACtBj0C,EAAQ,gBACRo2C,EAAe,aACfhE,GACDn+D,EACC,MAAM,qBACJmgE,EAAoB,aACpBh2C,IACEtiB,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCoF,GAAOC,EAAAA,EAAAA,MAEL83C,QAASgiB,IAAgC1hB,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7/B,EACTwgC,WA1B0B,MA6BtBkW,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAMg4D,IACN,GAEN,GAEC,CAAClE,EAAcgC,EAAsB/B,IAElC2C,GAAgBj/D,EAAAA,EAAAA,KAAQ,IACvBiqB,GAAai0C,EAIXj0C,EAAS7jB,KAAK3K,IACnB,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAC/B7iE,EAAU6hE,EAAuBn5D,IAASwvB,KAAKhZ,OAAOxL,IAE5D,OAAO1T,IAAWqH,EAAAA,EAAAA,IAAmBrH,GAAWA,OAAUmC,CAAS,IAClE02B,OAAOz1B,SARD+rD,GAAAA,GASR,CAAC0S,EAAwBj0C,IAEtB82C,GAAqB96D,EAAAA,EAAAA,KAAY,CAAC8J,EAAmBhL,KACzDsjB,EAAa,CAAEtjB,SAAQgL,aAAY,GAClC,CAACsY,IA8BEq4C,GAAoBnU,EAAAA,GAAAA,GAAkB,CAAC+P,GAAcre,EAAAA,OAA+BqiB,EAE1F,OACE35D,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAU,cAChCH,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,8CACV0sB,MAAOyrC,EACPhrC,WAAY2hC,EACZ6J,YAAU,IAERiB,GAAqB/5D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAC9B0sC,KAAuBz2C,GAAgC,IAApBA,EAAS9nB,SAC3CwE,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBi6D,GAAqBz2C,GAAYA,EAAS9nB,OAAS,GA5CjD88D,EAAc74D,KAAI,CAAC/J,EAASuS,KACjC,MAAMoyD,EAAkC,IAAVpyD,IACzBqyD,EAAAA,GAAAA,IAAY5kE,EAAQ0sB,SAAUk4C,EAAAA,GAAAA,IAAYhC,EAAcrwD,EAAQ,GAAGma,MACxE,OACEpiB,EAAAA,GAAAA,cAAA,OACEG,UAAU,sBACVoE,IAAK7O,EAAQZ,IAEZulE,GACCr6D,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAAmBo6D,EAAAA,GAAAA,IAAmBz6D,EAAM,IAAIwb,KAAoB,IAAf5lB,EAAQ0sB,QAE5EpiB,EAAAA,GAAAA,cAAC26D,GAAAA,EAAQ,CACPjlE,QAASA,EACTklE,UAAQ,EACRC,SAAUnlE,EAAQ0sB,KAClB04C,SAAO,EACPx5C,QAAQm5C,EAAAA,GAAAA,GAAc36D,EAAMpK,EAASu0B,EAAW8E,GAChD5uB,UAAU,cACVa,cAAe04D,EAAgBhkE,EAAQ0I,SAASuwB,KAAK55B,SAASW,EAAQZ,IACtEqlD,oBAAqB0f,EACrBkB,YAAaX,IAEX,KAwBJ,K,gBC7GV,MAAMxF,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GA6GjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB87D,GAAsB,SADJ97D,EA3G4BnG,IAW1C,IAX2C,MAC/CsmC,EAAK,QACL47B,EAAO,YACP9D,EAAW,UACXgE,EAAS,UACT1vC,EAAS,UACT8E,EAAS,uBACTwoC,EAAsB,SACtBj0C,EAAQ,aACRoyC,EAAY,gBACZgE,GACDniE,EACC,MAAM,qBACJmgE,EAAoB,aACpBh2C,EAAY,gBACZs5C,IACE57D,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KACPsmC,EAAcozB,EAAU,QAAU,QAClCxK,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eg2D,GAAgB/5C,IAAc4zC,EAAAA,GAAAA,WAChCqF,IAAa,KACX8C,EAAqB,CACnB91D,KAAMykC,GACN,GAEN,GAEC,CAACA,EAAaqvB,EAAcgC,EAAsB/B,IAE/C2C,GAAgBj/D,EAAAA,EAAAA,KAAQ,IACvBiqB,GAAai0C,EAIXj0C,EAAS7jB,KAAK3K,IACnB,MAAOsJ,EAAQgL,GAAatU,EAAGyjE,MAAM,KAErC,OAAOhB,EAAuBn5D,IAASwvB,KAAKhZ,OAAOxL,GAAW,IAC7DmlB,OAAOz1B,SAPD+rD,GAAAA,GAQR,CAAC0S,EAAwBj0C,IAEtB82C,GAAqB96D,EAAAA,EAAAA,KAAY,CAAC8J,EAAmBhL,KACzDsjB,EAAa,CAAEtjB,SAAQgL,aAAY,GAClC,CAACsY,IAEEu5C,GAAkB37D,EAAAA,EAAAA,KAAY,CAAC8J,EAAmBhL,KACtD48D,EAAgB,CAAE58D,SAAQgL,aAAY,GACrC,CAAC4xD,IAmCEjB,GAAoBnU,EAAAA,GAAAA,GAAkB,CAAC+P,GAAcre,EAAAA,OAA+BqiB,EAE1F,OACE35D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,8CACV0sB,MAAOyrC,EACPhrC,WAAY2hC,EACZ6J,YAAU,IAERiB,GAAqB/5D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAC9B0sC,KAAuBz2C,GAAgC,IAApBA,EAAS9nB,SAC3CwE,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACXzzD,KAAMzF,EAAK,6BACXkoC,YAAaloC,EAAK,0CAGrBi6D,GAAqBz2C,GAAYA,EAAS9nB,OAAS,GAjDjD88D,EAAc74D,KAAI,CAAC/J,EAASuS,KACjC,MAAMoyD,EAAkC,IAAVpyD,IACzBqyD,EAAAA,GAAAA,IAAY5kE,EAAQ0sB,SAAUk4C,EAAAA,GAAAA,IAAYhC,EAAcrwD,EAAQ,GAAGma,MACxE,OACEpiB,EAAAA,GAAAA,cAAA,OACEG,UAAU,sBACVoE,IAAK7O,EAAQZ,IAEZulE,GACCr6D,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IACtD0iE,EAAAA,GAAAA,IAAmBz6D,EAAM,IAAIwb,KAAoB,IAAf5lB,EAAQ0sB,QAG/CpiB,EAAAA,GAAAA,cAACk7D,GAAAA,GAAK,CACJ32D,IAAK7O,EAAQZ,GACb+oC,MAAOA,EACPnoC,QAASA,EACTtC,OAAQ+nE,EAAAA,GAAAA,OACRp5C,aAAa04C,EAAAA,GAAAA,GAAc36D,EAAMpK,EAASu0B,EAAW8E,GACrD3M,KAAM1sB,EAAQ0sB,KACdszC,aAAcA,EACdv1D,UAAU,cACVyV,OAAQqlD,EACRF,YAAaX,EACb1O,aAAczhC,EAAUv0B,EAAQ0I,SAAS8C,cAAgBxL,EAAQwL,YACjEF,cAAe04D,EAAgBhkE,EAAQ0I,SAASuwB,KAAK55B,SAASW,EAAQZ,MAEpE,KAwBJ,KC9FJsmE,GAAO,CACX,CAAEx5D,KAAMy5D,EAAAA,GAAAA,SAA8Bj7D,MAAO,uBAC7C,CAAEwB,KAAMy5D,EAAAA,GAAAA,MAA2Bj7D,MAAO,mBAC1C,CAAEwB,KAAMy5D,EAAAA,GAAAA,MAA2Bj7D,MAAO,mBAC1C,CAAEwB,KAAMy5D,EAAAA,GAAAA,MAA2Bj7D,MAAO,mBAC1C,CAAEwB,KAAMy5D,EAAAA,GAAAA,MAA2Bj7D,MAAO,mBAC1C,CAAEwB,KAAMy5D,EAAAA,GAAAA,MAA2Bj7D,MAAO,oBAGtCk7D,GAAY,CAChB,CAAE15D,KAAMy5D,EAAAA,GAAAA,SAA8Bj7D,MAAO,mBAC1Cg7D,GAAK5vB,MAAM,IAGV+vB,GAA0BjmE,OAAO02B,KAAKqvC,EAAAA,IAAqB7/D,OAAS,EAkG1E,IAAeiC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAE69D,EAAc,OAAEp9D,IAAWiY,EAAAA,EAAAA,IAAe1Y,GAAQs5D,aAE1D,MAAO,CAAEuE,iBAAgBp9D,SAAQ,GAJjBV,EAhG0BnG,IAOxC,IAPyC,YAC7Co+D,EAAW,WACXY,EAAU,SACVvsD,EAAQ,eACRwxD,EAAiBH,EAAAA,GAAAA,SAA4B,OAC7Cj9D,EAAM,QACN62D,GACD19D,EACC,MAAM,uBACJkkE,EAAsB,oBACtBC,IACEt8D,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACN47D,EAAWC,IAAgBh2D,EAAAA,EAAAA,IAAS41D,GACrChE,GAAkBn+D,EAAAA,EAAAA,KAAQ,KAAMwiE,EAAAA,GAAAA,IAAgBlG,IAAc,CAACA,IAE/DmG,GAAkBx8D,EAAAA,EAAAA,KAAa2I,IACnC,MAAM8zD,EAAMX,GAAKnzD,GACjBwzD,EAAuB,CAAEtkD,QAAS4kD,EAAIn6D,OACtCg6D,EAAa3zD,EAAM,GAClB,CAACwzD,IAEEO,GAAyB18D,EAAAA,EAAAA,KAAaqQ,IAC1C+rD,EAAoB,CAAEt5C,KAAMzS,EAAMyoB,UAAY,KAAO,GACpD,CAACsjC,KAEJxhD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIV,MAAM18C,GAAe7d,EAAAA,EAAAA,IAAuB,MACtCoa,GAAgBsX,EAAAA,GAAAA,GAA0B7T,EAAcvO,OAAUnS,EAAW,oBAAoB,GAEvG,OACEmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAa2E,IAAKyT,EAAcmU,UAAW5X,GACxD9U,EAAAA,GAAAA,cAACi8D,GAAAA,EAAO,CAACN,UAAWA,EAAWO,KAAM99D,EAASk9D,GAAYF,GAAMe,YAAaL,IAC7E97D,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACTphB,KAAMtI,EAAKmhB,MAAQ,oBAAsB,iBACzCm7C,YAAab,GACb9xC,UAAW+xC,GAEV,MACC,OAAQA,GACN,KAAKH,EAAAA,GAAAA,SACH,OAAIj9D,EAEA4B,EAAAA,GAAAA,cAACq8D,GAAkB,CACjB1G,YAAaA,EACb6B,gBAAiBA,EACjBvC,QAASA,EACTwC,mBAAoBuE,IAKxBh8D,EAAAA,GAAAA,cAACs8D,GAAW,CACV3G,YAAaA,EACbY,WAAYA,EACZiB,gBAAiBA,EACjBvC,QAASA,EACTwC,mBAAoBuE,IAG1B,KAAKX,EAAAA,GAAAA,MACH,OAAOr7D,EAAAA,GAAAA,cAACu8D,GAAY,CAAC5G,YAAaA,IACpC,KAAK0F,EAAAA,GAAAA,MACH,OAAOr7D,EAAAA,GAAAA,cAACw8D,GAAW,CAAC7G,YAAaA,IACnC,KAAK0F,EAAAA,GAAAA,MACH,OAAOr7D,EAAAA,GAAAA,cAACy8D,GAAW,CAAC9G,YAAaA,IACnC,KAAK0F,EAAAA,GAAAA,MACH,OACEr7D,EAAAA,GAAAA,cAAC08D,GAAY,CACXn4D,IAAI,QACJoxD,YAAaA,IAGnB,KAAK0F,EAAAA,GAAAA,MACH,OACEr7D,EAAAA,GAAAA,cAAC08D,GAAY,CACXn4D,IAAI,QACJk1D,SAAO,EACP9D,YAAaA,IAGnB,QACE,OAEL,EA9CA,IAgDC,K,gBClIV,MAAMgH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuDA,CAC3DC,EACA7lD,KAEA,OAAQA,EAAOxV,MACb,IAAK,qBACH,MAAO,IACFq7D,EACHL,gBAAiBxlD,EAAO8lD,SAG5B,IAAK,cACH,MAAO,IACFD,EACHJ,SAAUzlD,EAAO8lD,SAGrB,IAAK,UACH,MAAO,IACFD,EACHH,KAAM1lD,EAAO8lD,SAGjB,IAAK,WACH,MAAO,IACFD,EACHF,MAAO3lD,EAAO8lD,SAGlB,IAAK,QACH,OAAOP,GAET,QACE,OAAOM,EAAM,EC2OnB,IAAex/D,EAAAA,EAAAA,KA1QsBlG,IAK/B,IALgC,cACpC4lE,EAAa,eACbC,EAAc,QACdnI,EAAO,eACPoI,GACD9lE,EACC,MAAM,QACJ+lE,EAAO,0BACPr2B,IACE7nC,EAAAA,EAAAA,OAEE,SAAEoD,IAAaC,EAAAA,EAAAA,OACd86D,EAAqBC,IAA0B53D,EAAAA,EAAAA,KAAS,GAEzD63D,EClCO,SAAuB/sB,EAAgBgtB,GACpD,MAAMC,GAAmBjjE,EAAAA,EAAAA,IAAO,GAC1BgB,GAAahB,EAAAA,EAAAA,MAkBnB,OAjBoB4E,EAAAA,EAAAA,KAAY,KAE9B,GADAq+D,EAAiB9iE,UD8BoB,IC7BjC8iE,EAAiB9iE,QAGnB,OAFA8iE,EAAiB9iE,QAAU,OAC3B6iE,IAIEhiE,EAAWb,SACbgB,aAAaH,EAAWb,SAG1Ba,EAAWb,QAAUwB,YAAW,KAC9BshE,EAAiB9iE,QAAU,CAAC,GAlBZ,IAmBD,GAChB,CDgBoC,EChB3B6iE,GAGd,CDa2BE,CAAc,GAAG,KACxCP,EAAeQ,EAAAA,GAAAA,aAA6B,IAGxCC,GAA0Bx+D,EAAAA,EAAAA,KAAY,KAC1Ck+D,GAAuB,EAAK,GAC3B,IAEGO,GAA2Bz+D,EAAAA,EAAAA,KAAY,KAC3Ck+D,GAAuB,EAAM,GAC5B,IAEGQ,GAA+B1+D,EAAAA,EAAAA,KAAY,KAC1C89D,GAELn2B,EAA0B,CAAEK,SAAU81B,GAAiB,GACtD,CAACA,EAAgBn2B,IAEdg3B,GAAuB3+D,EAAAA,EAAAA,KAAY,KACvCy+D,IACAT,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACH,EAA0BT,IAExBa,GAAsE9kE,EAAAA,EAAAA,KAAQ,IAC3EqG,IAAA,IAAC,UAAE2D,EAAS,OAAEvE,GAAQY,EAAA,OAC3BM,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cACNH,UAAWrB,EAAS,SAAW,GAC/B0B,QAAS6C,EACTE,UAAU,gBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,CAACqC,IAEE1C,GAAOC,EAAAA,EAAAA,KA6Lb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASy0D,EACT1xD,UAAWzD,EAAK,mBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BApMnB,WACE,OAAQg9D,GACN,KAAKU,EAAAA,GAAAA,YACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,6BACnB,KAAK+9D,EAAAA,GAAAA,QACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,YACnB,KAAK+9D,EAAAA,GAAAA,cACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACnB,KAAK+9D,EAAAA,GAAAA,YACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,UACnB,KAAK+9D,EAAAA,GAAAA,cACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBACnB,KAAK+9D,EAAAA,GAAAA,YACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+9D,EAAAA,GAAAA,QACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+9D,EAAAA,GAAAA,SACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aACnB,KAAK+9D,EAAAA,GAAAA,eACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBACnB,KAAK+9D,EAAAA,GAAAA,SACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+9D,EAAAA,GAAAA,aACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,8BAEnB,KAAK+9D,EAAAA,GAAAA,sBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBACnB,KAAK+9D,EAAAA,GAAAA,2BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aAEnB,KAAK+9D,EAAAA,GAAAA,mBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+9D,EAAAA,GAAAA,gBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+9D,EAAAA,GAAAA,oBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,yBACnB,KAAK+9D,EAAAA,GAAAA,kBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+9D,EAAAA,GAAAA,qBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,yBACnB,KAAK+9D,EAAAA,GAAAA,kBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,2BACnB,KAAK+9D,EAAAA,GAAAA,gBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,eACnB,KAAK+9D,EAAAA,GAAAA,iBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,UAEnB,KAAK+9D,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+9D,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBAEnB,KAAK+9D,EAAAA,GAAAA,YACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BAEnB,KAAK+9D,EAAAA,GAAAA,eACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBACnB,KAAK+9D,EAAAA,GAAAA,eACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACnB,KAAK+9D,EAAAA,GAAAA,oBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBAEnB,KAAK+9D,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,wBACnB,KAAK+9D,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BACnB,KAAK+9D,EAAAA,GAAAA,wBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,0BACnB,KAAK+9D,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+9D,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,uBACnB,KAAK+9D,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAI,uBACb,KAAK69D,EAAAA,GAAAA,qBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mCACnB,KAAK+9D,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BAEnB,KAAK+9D,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aAEnB,KAAK+9D,EAAAA,GAAAA,gBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qCAEnB,KAAK+9D,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oCAEnB,KAAK+9D,EAAAA,GAAAA,8BACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mDAEnB,KAAK+9D,EAAAA,GAAAA,QACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,YACnB,KAAK+9D,EAAAA,GAAAA,oBACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,cACnB,KAAK+9D,EAAAA,GAAAA,aACH,OAAO79D,EAAAA,GAAAA,cAAA,UAAKF,EAAK,2BACnB,KAAK+9D,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,yBACH,OACE79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,eACThH,QAAQskE,IACPp9D,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,qBACViE,QAAS+5D,EACT95D,UAAU,SAEVrE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAS2hC,aAAW,EAACjlC,QAASw9D,GAC1Cl+D,EAAK,aAMlB,KAAK+9D,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE79D,EAAAA,GAAAA,cAAA,UACGF,EACCq9D,IAAkBU,EAAAA,GAAAA,sBACXV,IAAkBU,EAAAA,GAAAA,iCACrB,gBAAkB,kBAI9B,QACE,OACE79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBAEbH,EAAAA,GAAAA,cAAA,MAAIQ,QAASi9D,GACV39D,EAAK,aAGRE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cAENE,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,aAC9Bt6D,UAAWzD,EAAK,6BAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAEfH,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,qBACViE,QAAS+5D,EACT95D,UAAU,SAEVrE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAStD,QAASs9D,GAA0Bh+D,EAAK,kBAK5E,CAaKs+D,GACDp+D,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQy+D,EACRt+D,QAAS8+D,EACTx4D,KAAMzF,EAAK,mBACXg0B,aAAch0B,EAAK,0BACnBi0B,eAAgBkqC,EAChBp4B,sBAAoB,IAElB,I,uCEjQV,MAmIA,IAAepoC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE4kB,EAAa,aAAEmzC,GAAiB/3D,EAExC,MAAO,CACL0gE,aAAc1gE,EAAO2gE,eAAeC,cAAc/iE,OAClDy4B,YAAa1R,GAAgB/jB,EAAAA,EAAAA,IAAWb,EAAQ4kB,QAAiB1qB,EACjE69D,eACA/e,gBAAgBC,EAAAA,EAAAA,IAA+Bj5C,GAChD,GATeD,EAnI4BnG,IAQ1C,IAR2C,SAC/CyS,EAAQ,eACRqzD,EAAc,QACdpI,EAAO,YACPhhC,EAAW,aACXoqC,EAAY,aACZ3I,EAAY,cACZ/e,GACDp/C,EACC,MAAM,kBACJinE,EAAiB,mBACjBC,EAAkB,iBAClB5pB,IACEz1C,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KACPW,EAAYuzB,GAAan/B,GAmB/B,OAjBAgH,EAAAA,EAAAA,KAAU,KACJ4E,GAAag1D,GACf8I,EAAkB,CAAE99D,aACtB,GACC,CAACg1D,EAAch1D,EAAW89D,KAE7BtkD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,KAGVn5D,EAAAA,EAAAA,KAAU,KACJ45D,GACF+I,GACF,GACC,CAAC/I,EAAc+I,IAGhBz+D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACZ8zB,GACCj0B,EAAAA,GAAAA,cAAC0+D,GAAAA,EAAW,CACVjxC,OAAQwG,EAAYn/B,GACpB6pE,aAAc7lE,QAAQkR,GACtB40D,eAAa,IAGhB3qC,GACCj0B,EAAAA,GAAAA,cAAC6+D,GAAAA,EAAS,CACR3F,aAAcjlC,EAAYn/B,GAC1B8pE,eAAa,IAGjB5+D,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,WAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,UAE7B/9D,EAAK,2CAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,aAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,cAE7B/9D,EAAK,+BAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,SAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,gBAE7B/9D,EAAK,kBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,cAE7B/9D,EAAK,iBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,UAE7B/9D,EAAK,oBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,SAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,UAE7B/9D,EAAK,YAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,kBAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,iBAE7B/9D,EAAK,iBACLu+D,EAAe,GAAMr+D,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCk+D,IAExEr+D,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,WAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,WAE7B/9D,EAAK,YACNE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCL,EAAKg/D,WAEvD9+D,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,WAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,WAE7B/9D,EAAK,iBAEP62C,GACC32C,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP8xC,YAAa/+D,EAAAA,GAAAA,cAACg/D,GAAAA,EAAW,CAACC,cAAY,EAACC,KAAG,IAC1C/+D,UAAU,6BAEVK,QAASA,IAAMq0C,KAEd/0C,EAAK,qBAIR,K,4BCpIV,MAEMq/D,GAAoB,sBACpBC,GAAiB,sBAEjBC,IAA+B5jD,EAAAA,GAAAA,KAAUo5C,GAAOA,KAAM,KAAK,GA0FjE,IAAep3D,EAAAA,EAAAA,KAhFqBlG,IAO9B,IAP+B,gBACnC+nE,EAAe,OACfC,EAAM,UACN5F,EAAS,oBACT6F,EAAmB,gBACnBC,EAAe,SACf7vD,GACDrY,EACC,MAAM,cAAEmoE,EAAa,gBAAEC,IAAoBvgE,EAAAA,EAAAA,OACpCwgE,EAAUC,IAAej6D,EAAAA,EAAAA,IAAS05D,GAAmB,IAEtDx/D,GAAOC,EAAAA,EAAAA,KACP+/D,EAAaP,EAAS,SAAW,WACjCrqC,EAAiBp1B,EAATy/D,EAAc,oBAA4B,YAElDQ,GAA8Bl8C,EAAAA,EAAAA,GAAY27C,GAC1CQ,EAA+BV,IAAoBM,EACpDJ,QAAAA,EAAuBO,OAA+BloE,EACrDooE,EAAaL,GAAYN,IAAoBM,GAAYH,IAAoBG,GAE5EM,EAAiBC,IAAiB9mE,EAAAA,EAAAA,KAAQ,IAC1CumE,EAASpkE,OAIVokE,EAASpkE,OAxCW,EAyCf,MAAC3D,EAAWiI,EAAM,GAAEggE,kBAEzBF,EAASpkE,OA1CW,GA2Cf,MAAC3D,EAAWiI,EAAM,GAAEggE,iBAExBV,GAAegB,KAAKR,QAIY/nE,IAAjCmoE,GAA8CC,EACzC,GAIF,CACLD,EAA+BlgE,EAAM,GAAEggE,aAAuB5qC,QAASr9B,GACtC,IAAjCmoE,EAAyClgE,EAAM,GAAEggE,eAAqBjoE,GAV/D,MAACA,EAAWiI,EAAM,GAAEggE,aAVpB,IAsBR,CAACF,EAAUI,EAA8BC,EAAYngE,EAAMggE,EAAY5qC,KAE1Ep5B,EAAAA,EAAAA,KAAU,KACR+jE,EAAYP,GAAmB,GAAG,GACjC,CAACC,EAAQD,IAEZ,MAAMe,GAAuB/gE,EAAAA,EAAAA,KAAaqH,IACxC,MAAM25D,EAAc35D,EAAEwV,OAAOxM,MAAMyxB,OAAOzH,QAAQwlC,GAAmB,IACrEU,EAAYS,GAEZ,MAAMC,EA9DV,SAAyBX,GACvB,OAA2B,IAApBA,EAASpkE,QACdokE,EAASpkE,QATe,GAUrBokE,EAASpkE,QATY,IAUrB4jE,GAAegB,KAAKR,EAE3B,CAwDoBY,CAAgBF,GAC3BC,IAEL3wD,IAAW0wD,GAEXjB,IAA6B,KACvBiB,IAAgBhB,IACJC,EAASI,EAAkBD,GACnC,CAAEE,SAAUU,GACpB,IACA,GACD,CAACf,EAAQI,EAAiBD,EAAeJ,EAAiB1vD,IAE7D,OACE5P,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAQ,GAAE4vD,EAAS5+B,EAAAA,IAAkB,KAAKi/B,IAC1ChwD,SAAUywD,EACVnrC,MAAO+qC,EAAangE,EAAK,YAAco1B,EACvC/D,MAAOgvC,EACPM,QAASP,EACTQ,SAAU/G,EACVrH,2BAAyB,GACzB,ICYN,IAAe70D,EAAAA,EAAAA,KA9FgBlG,IAuBzB,IAvB0B,IAC9BuN,EAAG,GACHhQ,EAAE,UACFqL,EAAS,MACTwP,EAAK,MACLulB,EAAK,MACL/D,EAAK,QACLsvC,EAAO,SACPtwD,EAAQ,SACRuwD,EAAQ,YACR/zC,EAAW,aACXg0C,EAAY,UACZnmC,EAAS,UACT2P,EAAS,mBACTy2B,EAAkB,SAClBtmC,EAAQ,SACR1qB,EAAQ,QACRixD,EAAO,WACPC,EAAU,UACVp0C,EAAS,OACTgO,EAAM,QACNqmC,EAAO,kBACPC,GACDzpE,EAEK0pE,GAAcvmE,EAAAA,EAAAA,IAA4B,MAC1CoK,IACFm8D,EAAcn8D,GAGhB,MAAMhF,GAAOC,EAAAA,EAAAA,KACPmhE,EAAY/vC,GAASsvC,GAAWvrC,EAChC8lB,GAAgBt0C,EAAAA,GAAAA,GACpB,cACAiJ,GAAS,UACTwhB,EAAQ,QAAUsvC,GAAW,UAC7BtwD,GAAY,WACZuwD,GAAY,WACZQ,GAAa,aACb/gE,IAGFrE,EAAAA,EAAAA,KAAU,KACR,MAAMqlE,EAAWF,EAAYpmE,QACxBsmE,IACLA,EAAS3rE,MAAM2F,OAAS,IACxBgmE,EAAS3rE,MAAM2F,OAAU,GAAEgmE,EAASzyB,iBAAgB,GACnD,IAEH,MAAM4F,GAAeh1C,EAAAA,EAAAA,KAAaqH,IAChC,IAAKq6D,EAAmB,CACtB,MAAMI,EAAuBz6D,EAAEqN,cAAcqtD,aAE7C16D,EAAEqN,cAAcrE,MAAQhJ,EAAEqN,cAAcrE,MAAMgqB,QAAQ,MAAO,KAC7DhzB,EAAEqN,cAAcqtD,aAAeD,CACjC,CACAz6D,EAAEqN,cAAcxe,MAAM2F,OAAS,IAC/BwL,EAAEqN,cAAcxe,MAAM2F,OAAU,GAAEwL,EAAEqN,cAAc06B,iBAClD9+B,IAAWjJ,EAAE,GACZ,CAACq6D,EAAmBpxD,IAEvB,OACE5P,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,EAAen0C,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACvDmI,EAAAA,GAAAA,cAAA,YACE8E,IAAKm8D,EACL9gE,UAAU,eACVrL,GAAIA,EACJ+R,IAAI,OACJ8I,MAAOA,GAAS,GAChB2qB,SAAUA,EACV3N,YAAaA,EACbwd,UAAWA,EACXw2B,aAAcA,EACdnmC,UAAWA,EACXrqB,SAAUA,EACVuwD,SAAUA,EACV9wD,SAAU0kC,EACVusB,QAASA,EACTC,WAAYA,EACZp0C,UAAWA,EACXgO,OAAQA,EACRqmC,QAASA,EACT,aAAYG,IAEbA,GACClhE,EAAAA,GAAAA,cAAA,SAAOshE,QAASxsE,GAAKosE,GAEtBN,GACC5gE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBAAwBygE,GAErC,I,gCCxFV,MAAMW,GAAqB,CAAE3oD,EAAG,EAAGC,EAAG,GAwItC,IAAepb,EAAAA,EAAAA,KAtIiBlG,IAQ1B,IAR2B,SAC/BwM,EAAQ,GACRjP,EAAE,OACFoY,EAAM,UACNs0D,EACAhsE,MAAOisE,EAAa,UACpBC,EAAS,WACTpmE,GACD/D,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEP+E,GAAMpK,EAAAA,EAAAA,IAAuB,OAE5BuiE,EAAO0E,IAAY/7D,EAAAA,EAAAA,IAAyB,CACjDg8D,YAAY,EACZxuE,OAAQmuE,GACRM,YAAaN,KAGTO,EAAmBn7D,IACvBA,EAAEC,kBACFD,EAAEoO,iBACF,MAAM,EAAE6D,EAAC,EAAEC,GAAMkpD,GAAoBp7D,GAErCg7D,EAAS,IACJ1E,EACH2E,YAAY,EACZxuE,OAAQ,CAAEwlB,IAAGC,KACb/d,MAAOgK,EAAIjK,SAASmrD,YACpB7qD,OAAQ2J,EAAIjK,SAAS3F,cACrB,EAGE8sE,GAAkB1iE,EAAAA,EAAAA,KAAaqH,IACnC,MAAM,EAAEiS,EAAC,EAAEC,GAAMkpD,GAAoBp7D,GAE/Bk7D,EAAc,CAClBjpD,EAAGA,EAAIqkD,EAAM7pE,OAAOwlB,EACpBC,EAAGA,EAAIokD,EAAM7pE,OAAOylB,GAGtB8oD,GAAU9mE,IAAO,IACZA,EACHgnE,kBAGF30D,EAAO20D,EAAa/sE,EAAG,GACtB,CAACA,EAAIoY,EAAQ+vD,EAAM7pE,OAAOwlB,EAAGqkD,EAAM7pE,OAAOylB,IAEvCopD,GAAgB3iE,EAAAA,EAAAA,KAAY,KAChCqiE,GAAU9mE,IAAO,IACZA,EACH+mE,YAAY,EACZ9mE,WAAOjD,EACPsD,YAAQtD,MAGV2pE,GAAW,GACV,CAACA,KAEJ1lE,EAAAA,EAAAA,KAAU,KACJmhE,EAAM2E,YAActmE,GACtBqmE,GAAU9mE,IAAO,IACZA,EACH+mE,YAAY,EACZ9mE,WAAOjD,EACPsD,YAAQtD,KAEZ,GACC,CAACyD,EAAY2hE,EAAM2E,cAEtB9lE,EAAAA,EAAAA,KAAU,KACJmhE,EAAM2E,YACRxlE,OAAOmK,iBAAiB,YAAay7D,GACrC5lE,OAAOmK,iBAAiB,YAAay7D,GACrC5lE,OAAOmK,iBAAiB,WAAY07D,GACpC7lE,OAAOmK,iBAAiB,cAAe07D,GACvC7lE,OAAOmK,iBAAiB,UAAW07D,KAEnC7lE,OAAOoK,oBAAoB,YAAaw7D,GACxC5lE,OAAOoK,oBAAoB,YAAaw7D,GACxC5lE,OAAOoK,oBAAoB,WAAYy7D,GACvC7lE,OAAOoK,oBAAoB,cAAey7D,GAC1C7lE,OAAOoK,oBAAoB,UAAWy7D,GAEtCN,GAAU9mE,IAAO,IACZA,EACHgnE,YAAaN,QAIV,KACDtE,EAAM2E,aACRxlE,OAAOoK,oBAAoB,YAAaw7D,GACxC5lE,OAAOoK,oBAAoB,YAAaw7D,GACxC5lE,OAAOoK,oBAAoB,WAAYy7D,GACvC7lE,OAAOoK,oBAAoB,cAAey7D,GAC1C7lE,OAAOoK,oBAAoB,UAAWy7D,GACxC,IAED,CAACD,EAAiBC,EAAehF,EAAM2E,aAE1C,MAAM5mB,GAAgBt0C,EAAAA,GAAAA,GC1II,uBD0I6Bu2D,EAAM2E,YC1IC,wBD4IxDM,GAAY7oE,EAAAA,EAAAA,KAAQ,KACjB8oE,EAAAA,GAAAA,GACLlF,EAAM2E,YAAe,wBAAuB3E,EAAM4E,YAAYjpD,QAAQqkD,EAAM4E,YAAYhpD,OACxFokD,EAAMniE,MAAS,UAASmiE,EAAMniE,eAAYjD,EAC1ColE,EAAM9hE,OAAU,WAAU8hE,EAAM9hE,gBAAatD,EAC7C4pE,IAED,CAACA,EAAexE,EAAM9hE,OAAQ8hE,EAAM2E,WAAY3E,EAAM4E,YAAYjpD,EAAGqkD,EAAM4E,YAAYhpD,EAAGokD,EAAMniE,QAEnG,OACEkF,EAAAA,GAAAA,cAAA,OAAKxK,MAAO0sE,EAAW/hE,UAAW66C,EAAel2C,IAAKA,GACnDf,GAECzI,GACA0E,EAAAA,GAAAA,cAAA,OACE,aAAYF,EAAK,mBACjBw6B,SAAU,EACVD,KAAK,SACLl6B,WAAWuG,EAAAA,GAAAA,GC9JyE,uBD8J7C,aAAc,kBACrD07D,YAAaN,EACbO,aAAcP,EACdtsE,MAAOksE,GAEP1hE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAAiB,oBAG9B,IAMV,SAAS4hE,GAAoBp7D,GAC3B,IAAIiS,EACAC,EAUJ,MARI,YAAalS,GACfiS,EAAIjS,EAAE4F,QAAQ,GAAGsG,QACjBgG,EAAIlS,EAAE4F,QAAQ,GAAGwG,UAEjB6F,EAAIjS,EAAEkM,QACNgG,EAAIlS,EAAEoM,SAGD,CAAE6F,IAAGC,IACd,CEzLA,MCmNA,IAAepb,EAAAA,EAAAA,KAlLuBlG,IAIhC,IAJiC,OACrC6G,EAAM,UACNkkE,EAAS,eACTC,GACDhrE,EACC,MAAM,iBACJ04B,EAAgB,eAChBuyC,EAAc,mBACdC,EAAkB,cAClBC,EAAa,kBACbC,IACEvjE,EAAAA,EAAAA,MACEU,GAAOC,EAAAA,EAAAA,MACN6iE,EAAoBC,IAAyBj9D,EAAAA,EAAAA,MAE9Ck9D,GAAezpE,EAAAA,EAAAA,KAAQ,IAAMipE,EAAU7iE,KAAIC,IAAA,IAAC,SAAEkgE,GAAUlgE,EAAA,OAAKkgE,CAAQ,KAAG,CAAC0C,IACzES,GAAmBl/C,EAAAA,EAAAA,GAAYi/C,IAE9B7F,EAAO0E,IAAY/7D,EAAAA,EAAAA,IAAoB,CAC5Co9D,iBAAkBF,EAClBG,mBAAoBH,EACpBI,kBAAcrrE,KAIhBiE,EAAAA,EAAAA,KAAU,KACJinE,IAAqBD,GACvBnB,EAAS,CACPqB,iBAAkBF,EAClBG,mBAAoBH,EACpBI,kBAAcrrE,GAElB,GACC,CAACkrE,EAAkBD,IAEtB,MAAMK,GAAqB7jE,EAAAA,EAAAA,KAAaqQ,KACtCyzD,EAAAA,GAAAA,IAAqB,IAAGzzD,KACxBsgB,EAAiB,CACfv6B,QAASoK,EAAK,mBACd,GACD,CAACA,EAAMmwB,IAEJozC,GAAsB/jE,EAAAA,EAAAA,KAAagK,IACnCA,EAAKg6D,WACPf,EAAej5D,EAAKs2D,UAEpBiD,EAAsBv5D,EACxB,GACC,CAACi5D,IAEEgB,GAA6BjkE,EAAAA,EAAAA,KAAY,KAC7CujE,OAAsBhrE,EAAU,GAC/B,IAEG2rE,GAAuBlkE,EAAAA,EAAAA,KAAY,KACnClB,EACFqkE,EAAmB,CACjBrkE,SACAwhE,SAAUgD,EAAoBhD,SAC9B51D,UAAW44D,EAAoB54D,WAGjCw4D,EAAe,CACb5C,SAAUgD,EAAoBhD,SAC9B51D,UAAW44D,EAAoB54D,WAGnCu5D,GAA4B,GAC3B,CAACnlE,EAAQmlE,EAA4Bd,EAAoBD,EAAgBI,IAEtEa,GAAankE,EAAAA,EAAAA,KAAY,CAACuiE,EAAuC/sE,KACrE,MAAMwrB,EAAQtc,KAAKV,MAAMu+D,EAAYhpD,EAzEd,IA0EjB5Q,EAAQg1D,EAAM+F,kBAAkBv+C,QAAQ3vB,IAAiB,EACzDmuE,EAAqBhG,EAAM+F,kBAAkBz0C,QAAQqxC,GAAaA,IAAa9qE,IAEhFmuE,IAAuBpmD,EAAAA,GAAAA,IAAU5U,EAAQqY,EAAO,EAAGwiD,EAAatnE,UAIrEynE,EAAmBS,OAAOz7D,EAAQqY,EAAO,EAAGxrB,GAC5C6sE,GAAU9mE,IAAO,IACZA,EACHqoE,aAAcj7D,EACdg7D,yBACC,GACF,CAAChG,EAAM+F,iBAAkBF,EAAatnE,SAEnCmoE,GAAgBrkE,EAAAA,EAAAA,KAAY,KAChCqiE,GAAU9mE,IACJuD,EACFukE,EAAkB,CAChBvkE,SACAkkE,UAAWznE,EAAQooE,qBAGrBP,EAAc,CAAEJ,UAAWznE,EAAQooE,qBAG9B,IACFpoE,EACHmoE,iBAAkBnoE,EAAQooE,mBAC1BC,kBAAcrrE,KAEhB,GACD,CAACuG,EAAQukE,EAAmBD,IAE/B,OACE1iE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UD7IiB,wBC8IpBH,EAAAA,GAAAA,cAAA,MAAIG,UD9IgD,uBC8ItB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACrDiI,EAAK,2BAERE,EAAAA,GAAAA,cAAA,OAAKG,UDjJ+H,uBCiJ1F3K,MAAQ,WAlH/B,GAkH0C8sE,EAAU9mE,YACpE8mE,EAAU7iE,KAAI,CAACmkE,EAAct/C,KAAM,IAAAu/C,EAAAC,EAClC,MAAMC,EAAY9G,EAAMiG,eAAiB5+C,EACnC0/C,EArHS,IAqH2D,QAAvDH,EAAC5G,EAAM+F,kBAAkBv+C,QAAQm/C,EAAahE,iBAAS,IAAAiE,EAAAA,EAAI,GACxE7wD,EAtHS,IAsHsD,QAAzD8wD,EAAC7G,EAAMgG,oBAAoBx+C,QAAQm/C,EAAahE,iBAAS,IAAAkE,EAAAA,EAAI,GACnEG,EAAWL,EAAaN,WAC1B,qBACCM,EAAa55D,SAAW,uBAAyB,2BAEtD,OACEhK,EAAAA,GAAAA,cAACkkE,GAAS,CACR3/D,IAAKq/D,EAAahE,SAClB9qE,GAAI8uE,EAAahE,SACjB1yD,OAAQu2D,EACRjC,UAAWmC,EACXnuE,MAAQ,QAAOuuE,EAAYC,EAAahxD,OACxC0uD,WAAc5hE,EAAKmhB,MAAQ,OAAS,SAAxB,UACZ3lB,YAAasoE,EAAa55D,UAE1BhK,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKq/D,EAAahE,SAClBz/D,WAAWuG,EAAAA,GAAAA,GAAe,yBDtK8H,wBCuKxJ+rD,QAAM,EACNF,cAAc,OACdzuD,KAAM8/D,EAAa55D,SAAW,OAAS,cACvCwoD,WAAS,EACT8B,eAAgB,CACd,CACE6P,QAASA,KACPhB,EAAmBS,EAAahE,SAAS,EAE3Cx/D,MAAON,EAAK,QACZgE,KAAM,SAIVtD,QAASA,KACP6iE,EAAoBO,EAAa,GAGnC5jE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ,IAAEyjE,EAAahE,UACvC5/D,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAKmkE,KAEzB,KAIlBjkE,EAAAA,GAAAA,cAAA,KAAGG,UDhMsF,uBCgMvD0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACzDiI,EAAK,+BAGVE,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQhG,QAAQ8pE,GAChB3jE,QAASskE,EACTnjE,MAAON,EAAK8iE,GAAoB54D,SAAW,gCAAkC,+BAC7EzE,KAAMzF,EAAK8iE,GAAoB54D,SAAW,+BAAiC,8BAC3E8pB,aAAch0B,EAAK8iE,GAAoB54D,SACnC,+BACA,8BACJ+pB,eAAgByvC,EAChB39B,sBAAuB+8B,GAAoB54D,WAE5C,IC/JD4qD,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAO,GAE7CuP,GAA2B,iCAgPjC,IAAe3mE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE4kB,GAAkB5kB,GACpB,SACJ8G,EAAQ,oBAAE+6D,EAAmB,gBAAEC,EAAiBtuC,MAAOkzC,IACrDhuD,EAAAA,EAAAA,IAAe1Y,GAAQ2mE,aAAe,CAAC,EACrCrwC,EAAc1R,GAAgB/jB,EAAAA,EAAAA,IAAWb,EAAQ4kB,QAAiB1qB,EAElE0sE,GAAeC,EAAAA,GAAAA,GAAmB7mE,EAAQ,eAEhD,IAAKs2B,EACH,MAAO,CACLxvB,WACAg7D,kBACAD,sBACA6E,oBACAE,gBAIJ,MACEtoC,UAAWwoC,EACXtoC,SAAUuoC,EAAe,UACzBpC,GACEruC,EACE0wC,EAAsBpiD,GAAgBO,EAAAA,EAAAA,IAAmBnlB,EAAQ4kB,QAAiB1qB,EAGxF,MAAO,CACL+sE,mBAHwBprE,EAAAA,EAAAA,IAAkBy6B,GAI1CwwC,mBACAC,kBACAG,WAAYF,GAAqBG,IACjCrgE,WACA+6D,sBACAC,kBACA4E,oBACAE,eACAjC,YACD,GAvCe5kE,EA9OmCnG,IAajD,IAbkD,SACtDyS,EAAQ,kBACR46D,EAAiB,iBACjBH,EAAgB,gBAChBC,EAAe,WACfG,EAAU,SACVpgE,EAAQ,gBACRg7D,EAAe,kBACf4E,EAAiB,oBACjB7E,EAAmB,aACnB+E,EAAY,UACZjC,EAAS,QACTrN,GACD19D,EACC,MAAM,gBACJwtE,EAAe,cACfC,IACE5lE,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KAGPu/D,GADwBjmE,EAAAA,EAAAA,KAAQ,IAAMipE,GAAWtzB,MAAKtvC,IAAA,IAAC,WAAE4jE,GAAY5jE,EAAA,OAAK4jE,CAAU,KAAG,CAAChB,KAC/C1C,UAAY,IACpDqF,EAAmBC,IAAwBt/D,EAAAA,EAAAA,KAAS,IACpDu/D,EAAwBC,IAA6Bx/D,EAAAA,EAAAA,KAAS,IAC9DurB,EAAOk0C,IAAYz/D,EAAAA,EAAAA,OAEnBjO,EAAO2tE,IAAY1/D,EAAAA,EAAAA,OACnBq2B,EAAWC,IAAgBt2B,EAAAA,EAAAA,IAAS6+D,GAAoB,KACxDtoC,EAAUC,IAAex2B,EAAAA,EAAAA,IAAS8+D,GAAmB,KACrDI,EAAKS,IAAU3/D,EAAAA,EAAAA,IAASi/D,GAAc,KACtCW,EAAkBC,IAAuB7/D,EAAAA,EAAAA,IAAyB05D,GAEnEoG,GAAuB/rE,EAAAA,EAAAA,GAASirE,GAAmB,EAAOhrE,EAAAA,GAAAA,SAE1D+/D,EAAYl1D,IAAakhE,EAAAA,GAAAA,WACzBC,GAAuC,IAArBJ,EAElBzF,GAA8Bl8C,EAAAA,EAAAA,GAAY27C,GAC1CQ,EAA+BR,QAAAA,EAAuBO,EACtD8F,EAA8BvD,GAAaA,EAAU9mE,OAAS,EAE9DsqE,GAAoBzsE,EAAAA,EAAAA,KAAQ,KAC5BusE,IAIG9sE,QAAQnB,IAAUwtE,GAA2BF,IAAsD,IAAjCjF,IACxE,CAAC4F,EAAiBjuE,EAAOwtE,EAAwBF,EAAmBjF,KAEvE9lD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,KAKVn5D,EAAAA,EAAAA,KAAU,KACR84D,IAAa,KACXmQ,GAAiB,GACjB,GACD,CAACA,KAEJjpE,EAAAA,EAAAA,KAAU,KACRwpE,OAASztE,EAAU,GAClB,CAAC6tE,KAEJ5pE,EAAAA,EAAAA,KAAU,KACRogC,EAAauoC,GAAoB,IACjCroC,EAAYsoC,GAAmB,IAC/Ba,EAAOV,GAAc,GAAG,GACvB,CAACJ,EAAkBC,EAAiBG,KAEvC/oE,EAAAA,EAAAA,KAAU,KACR2pE,EAAoBnG,GAAmB,GAAG,GACzC,CAACA,KAEJxjE,EAAAA,EAAAA,KAAU,KACJ2I,IAAakhE,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAASxtE,GACX,GACC,CAAC4M,IAEJ,MAAMshE,GAAoBzmE,EAAAA,EAAAA,KAAa0mE,IACrCV,EAASU,EAAS,GACjB,IAEGjpC,GAAwBz9B,EAAAA,EAAAA,KAAaqH,IACzCu1B,EAAav1B,EAAEwV,OAAOxM,OACtBy1D,GAA0B,EAAK,GAC9B,IAEGloC,GAAuB59B,EAAAA,EAAAA,KAAaqH,IACxCy1B,EAAYz1B,EAAEwV,OAAOxM,OACrBy1D,GAA0B,EAAK,GAC9B,IAEGa,GAAkB3mE,EAAAA,EAAAA,KAAaqH,IACnC4+D,EAAO5+D,EAAEwV,OAAOxM,OAChBy1D,GAA0B,EAAK,GAC9B,IAEG/E,GAAuB/gE,EAAAA,EAAAA,KAAaqQ,IACxC81D,EAAoB91D,GACpBu1D,EAAqB5F,IAAoB3vD,EAAM,GAC9C,CAAC2vD,IAEE4G,GAAoB5mE,EAAAA,EAAAA,KAAY,KACpC,MAAM6mE,EAAmBlqC,EAAUmF,OAC7BglC,EAAkBjqC,EAASiF,OAC3BilC,EAAavB,EAAI1jC,OAElBokC,IAEAW,EAAiB3qE,OAKtBwpE,EAAc,CACZrtE,WACIwtE,GAA0B,CAC5BlpC,UAAWkqC,EACXhqC,SAAUiqC,EACVtB,IAAKuB,MAEHpB,GAAqB,CACvBrF,SAAU4F,KAZZH,EAASjB,IAcT,GACD,CACDzsE,EACAskC,EAAWE,EAAU2oC,EAAKK,EAC1BK,EAAkBP,EAClBD,IAkBF,OACEhlE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACsmE,GAAAA,EAAc,CACbZ,qBAAsBA,EACtB91D,SAAUm2D,EACV3lE,MAAM,0BACN+P,SAAUwpD,IAEZ35D,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOssB,EACPrsB,SAAUmtB,EACV7H,MAAOp1B,EAAK,aACZqQ,SAAUwpD,EACVxoC,MAAOA,IAAUizC,GAA2BjzC,OAAQt5B,IAEtDmI,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOwsB,EACPvsB,SAAUstB,EACVhI,MAAOp1B,EAAK,YACZqQ,SAAUwpD,IAEZ35D,EAAAA,GAAAA,cAACumE,GAAQ,CACP52D,MAAOm1D,EACPl1D,SAAUq2D,EACV/wC,MAAOp1B,EAAK,WACZqQ,SAAUwpD,EACVxvB,UAAWo6B,EACX3D,mBAAoB2D,GAAgBA,EAAeO,EAAItpE,QAAQ+zC,gBAAa13C,IAG9EmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IAChE4I,EAAAA,GAAAA,GAAWX,EAAK,0BAA2B,CAAC,KAAM,sBAIvDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,aAEhFE,EAAAA,GAAAA,cAACwmE,GAAa,CACZlH,gBAAiBA,EACjB3F,UAAWA,EACX6F,oBAAqBA,EACrBC,gBAAiBA,EACjB7vD,SAAUywD,IAGXgE,IAAsBoC,EAAAA,KA/D/B,WACE,MAAMC,EAAoB,GAAE/lC,EAAAA,MAAkBgmC,EAAAA,MAE9C,OACE3mE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC/DiI,EAAK,mCACJ65B,QAAQ,SAAU,mBAClB4+B,MAAM,KACN94D,KAAKmnE,GACU,kBAANA,EAAwB5mE,EAAAA,GAAAA,cAACsqD,GAAAA,EAAQ,CAACziD,IAAK6+D,EAAkBnhE,KAAO,IAAGohE,EAAAA,QAA0BC,IAI/G,CAkD0DC,GAClD7mE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,IAChE4I,EAAAA,GAAAA,GAAWX,EAAK,gBAAiB,CAAC,KAAM,qBAE1C0lE,GACCxlE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChEiI,EAAK,qBAAqBE,EAAAA,GAAAA,cAAA,WAC3BA,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBAAiBwgC,EAAAA,IAAiB6kC,KAKvDK,GACC7lE,EAAAA,GAAAA,cAAC8mE,GAAe,CACdxE,UAAWA,EACXC,eAAgBkD,KAKtBzlE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAAS41C,EACTtlE,QAAS0lE,EACT/1D,SAAUwpD,EACVp2D,UAAWzD,EAAK,SAEf65D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KChIV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQm1B,EAAAA,GAAAA,IAAKn1B,EAAOqpE,SAASC,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,2BAfcvpE,EA5HmCnG,IAgBjD,IAhBkD,SACtDyS,EAAQ,QACRirD,EAAO,6BACPiS,EAA4B,+BAC5BC,EAA8B,yBAC9BC,EAAwB,2BACxBC,EAA0B,6BAC1BC,EAA4B,+BAC5BC,EAA8B,yBAC9BC,EAAwB,2BACxBC,EAA0B,4BAC1BC,EAA2B,8BAC3BC,EAA6B,wBAC7BC,EAAuB,0BACvBC,EAAyB,sBACzBC,GACDvwE,EACC,MAAM,iBAAEwwE,IAAqB3oE,EAAAA,EAAAA,MAEvBU,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM+S,GAAyB1oE,EAAAA,EAAAA,KAAaqQ,GACnC7P,EAAK,4BAA6BA,EAAK,cAAeq2B,OAAO8xC,EAAAA,IAAgCt4D,IAAS,OAC5G,CAAC7P,IAEEooE,GAAuB5oE,EAAAA,EAAAA,KAAaqQ,IACxCo4D,EAAiB,CAAED,sBAAuBG,EAAAA,IAAgCt4D,IAAS,GAClF,CAACo4D,IAmBJ,SAASI,EACP/nE,EACAmE,EACA6jE,EACAC,EACAC,EACAC,GAEA,OACEvoE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYuI,GAE3EJ,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,iCACZm1B,QAASmzC,EAGThzC,QAAUozC,GAAcT,EAAiB,CAAE,CAAE,cAAaxjE,iBAAoBikE,MAEhFxoE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,qCACZm1B,QAASozC,EAETjzC,QAAUozC,GAAcT,EAAiB,CAAE,CAAE,cAAaxjE,mBAAsBikE,MAElFxoE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,mCACZm1B,QAASqzC,EAETlzC,QAAUozC,GAAcT,EAAiB,CAAE,CAAE,cAAaxjE,aAAgBikE,MAE5ExoE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,iCACZm1B,QAASszC,EAETnzC,QAAUozC,GAAcT,EAAiB,CAAE,CAAE,cAAaxjE,eAAkBikE,MAGrE,SAARjkE,GAvDP,WACE,MAAMoL,EAAQs4D,EAAAA,IAAAA,QAAwCH,GAEtD,OACE9nE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAACyP,GAAAA,EAAW,CACVylB,MAAOp1B,EAAK,2BACZsd,IAAK,EACLT,IAAK,EACLhN,OAAkB,IAAXA,EAAeA,EAAQ,EAC9B84D,YAAaT,EACbp4D,SAAUs4D,IAIlB,CAwCyBQ,GAGzB,CAEA,OACE1oE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZgoE,EACCroE,EAAK,2BACL,QACAonE,EACAC,EACAC,EACAC,GAEDc,EACCroE,EAAK,2BACL,QACAwnE,EACAC,EACAC,EACAC,GAEDU,EACC,sBACA,OACAT,EACAC,EACAC,EACAC,GAEE,K,oDC1GV,MACMc,IAAiCriE,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAO,GA8SrE,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE21D,WAAYsV,EACZh7C,KAAMi7C,EACNC,YAAaC,GACXprE,EAAO01D,YAEX,MAAO,CACLuV,YACAC,cACAn7B,WAAW0E,EAAAA,EAAAA,IAA2Bz0C,GACtCorE,yBACAC,YAAYxE,EAAAA,GAAAA,GAAmB7mE,EAAQ,iBACxC,GAdeD,EA5SmCnG,IAUjD,IAVkD,SACtDyS,EAAQ,eACRi/D,EAAc,aACdC,EAAY,QACZjU,EAAO,UACP2T,EAAS,YACTC,EAAW,UACXn7B,EAAS,uBACTq7B,EAAsB,WACtBC,GACDzxE,EACC,MAAM,2BACJ4xE,EAA0B,cAC1BC,EAAa,sBACbC,EAAqB,0BACrBpiC,EAAyB,gBACzBqiC,IACElqE,EAAAA,EAAAA,OAEG69D,EAAO0E,IAAY/7D,EAAAA,EAAAA,IAAoB,CAC5C2jE,iBAAkBX,EAClBY,aAAcZ,EACd1F,kBAAcrrE,IAGV4xE,GAAgB5lD,EAAAA,EAAAA,GAAY+kD,IAGlC9sE,EAAAA,EAAAA,KAAU,KACJ2tE,IAAkBb,GACpBjH,EAAS,CACP4H,iBAAkBX,EAClBY,aAAcZ,EACd1F,kBAAcrrE,GAElB,GACC,CAAC4xE,EAAeb,EAAW3L,EAAMsM,kBAAkB/tE,UAItDM,EAAAA,EAAAA,KAAU,KACR6sE,IAA+B,KAC7BQ,GAA4B,GAC5B,GACD,CAACA,IAEJ,MAAMO,GAAqBpqE,EAAAA,EAAAA,KAAY,KACjChK,OAAO02B,KAAK68C,GAAartE,QAAUwtE,EAAa,EAClDK,EAAsB,CACpBxqD,MAAO,kBAMXoqD,GAAgB,GACf,CAACJ,EAAaG,EAAYC,EAAgBI,IAEvCvpE,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM0U,GAAuBC,EAAAA,GAAAA,MACvBC,GAAcxwE,EAAAA,EAAAA,KAAQ,KAC1B,GAAKuvE,EAIL,OAAIA,EAAUptE,QAAU,EACfqpD,GAAAA,EAGF+jB,EAAUnpE,KAAK3K,IACpB,MAAMgyC,EAAS+hC,EAAY/zE,GAE3B,OAAIA,IAAOg1E,EAAAA,IACF,CACLh1E,KACAsL,MAAON,EAAK,mBAIT,CACLhL,GAAIgyC,EAAOhyC,GACXsL,MAAO0mC,EAAO1mC,MACd6jE,UAAU8F,EAAAA,EAAAA,IAAyBjqE,EAAMgnC,EAAQ6iC,EAAqB7iC,EAAOhyC,KAC7Ek1E,WAAYljC,EAAOkjC,WACpB,GACD,GACD,CAACpB,EAAWC,EAAa/oE,EAAM6pE,IAE5BM,GAAoC3qE,EAAAA,EAAAA,KAAawnC,IACjDxxC,OAAO02B,KAAK68C,GAAartE,QAAUwtE,EAAa,EAClDK,EAAsB,CACpBxqD,MAAO,kBAMXuqD,EAAc,CAAEtiC,UAAS,GACxB,CAAC+hC,EAAaG,EAAYI,EAAeC,IAEtC5F,GAAankE,EAAAA,EAAAA,KAAY,CAACuiE,EAAuC/sE,KACrE,MAAMwrB,EAAQtc,KAAKV,MAAMu+D,EAAYhpD,EA9GhB,IA+Gf5Q,EAAQg1D,EAAMsM,kBAAkB9kD,QAAQ3vB,IAAiB,EACzD00E,EAAevM,EAAMsM,kBAAkBh7C,QAAQ+Y,GAAaA,IAAaxyC,IAE1E00E,IAAiB3sD,EAAAA,GAAAA,IAAU5U,EAAQqY,EAAO,EAAGsoD,GAAWptE,QAAU,KAIvEguE,EAAa9F,OAAOz7D,EAAQqY,GAASotB,EAAY,EAAI,GAAI,EAAG54C,GAC5D6sE,GAAU9mE,IAAO,IACZA,EACHqoE,aAAcj7D,EACduhE,mBACC,GACF,CAACZ,GAAWptE,OAAQkyC,EAAWuvB,EAAMsM,mBAElC5F,GAAgBrkE,EAAAA,EAAAA,KAAY,KAChCqiE,GAAU9mE,IACRyuE,EAAgB,CAAEV,UAAW/tE,EAAQ2uE,eAE9B,IACF3uE,EACH0uE,iBAAkB1uE,EAAQ2uE,aAC1BtG,kBAAcrrE,KAEhB,GACD,CAACyxE,IAEEY,GAAqB7wE,EAAAA,EAAAA,KAAQ,KACzBq0C,GAAap4C,OAAO02B,KAAK68C,GAAartE,OAASwtE,EAAa,GACnE,CAACH,EAAan7B,EAAWs7B,IAE5B,OACEhpE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXluE,KAAMmuE,EAAAA,IACNr/B,OAAQs/B,GAAAA,EAAAA,WACRlqE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAC/C/G,EAAK,wBAGPoqE,GACClqE,EAAAA,GAAAA,cAACK,EAAAA,EACD,CACEF,UAAU,iBACVG,MAAM,UACNrE,KAAK,UACLqkD,MAAI,EACJC,OAAK,EACL//C,QAASkpE,EACTzoD,MAAOnhB,EAAKmhB,OAEZjhB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBACZL,EAAK,qBAKZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,YAErFE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BAA8B3K,MAAQ,WA/KpC,IA+K+CozE,GAAWptE,QAAU,QAClFquE,GAAaruE,OAASquE,EAAYpqE,KAAI,CAACqnC,EAAQxiB,KAAM,IAAAgmD,EAAAC,EACpD,MAAMC,EAAYlmD,EAAI0kD,EAAa,EAC7BjF,EAAY9G,EAAMiG,eAAiB5+C,EACnC0/C,EAnLO,IAmLiD,QAA3CsG,EAACrN,EAAMsM,kBAAkB9kD,QAAQqiB,EAAOhyC,WAAG,IAAAw1E,EAAAA,EAAI,GAC5Dt3D,EApLO,IAoLsC,QAAvCu3D,EAACtN,EAAMuM,cAAc/kD,QAAQqiB,EAAOhyC,WAAG,IAAAy1E,EAAAA,EAAI,GAEvD,OAAIzjC,EAAOhyC,KAAOg1E,EAAAA,IAEd9pE,EAAAA,GAAAA,cAACkkE,GAAS,CACR3/D,IAAKuiC,EAAOhyC,GACZA,GAAIgyC,EAAOhyC,GACXoY,OAAQu2D,EACRjC,UAAWmC,EACXnuE,MAAQ,QAAOuuE,EAAYC,EAAahxD,OACxC0uD,WAAc5hE,EAAKmhB,MAAQ,OAAS,SAAxB,cACZ3lB,YAAaoyC,IAAc1jC,GAE3BhK,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKuiC,EAAOhyC,GACZqL,UAAU,gDACVsyD,QAAM,EACNgY,UAAQ,EACRjY,WAAS,EACTkY,UAAQ,GAER1qE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SACb2mC,EAAO1mC,OAEVJ,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,0BAOvCE,EAAAA,GAAAA,cAACkkE,GAAS,CACR3/D,IAAKuiC,EAAOhyC,GACZA,GAAIgyC,EAAOhyC,GACXoY,OAAQu2D,EACRjC,UAAWmC,EACXnuE,MAAQ,QAAOuuE,EAAYC,EAAahxD,OACxC0uD,WAAc5hE,EAAKmhB,MAAQ,OAAS,SAAxB,UACZ3lB,WAAYkvE,IAAcxgE,GAE1BhK,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,gDACVsyD,QAAM,EACNF,cAAc,OACdC,WAAS,EACT8B,eAAgB,CACd,CACE6P,QAASA,KACPl9B,EAA0B,CAAEK,SAAUR,EAAOhyC,IAAK,EAEpD2wC,aAAa,EACbrlC,MAAON,EAAK,UACZgE,KAAM,WAIVtD,QAASA,KACHgqE,EACFnB,EAAsB,CACpBxqD,MAAO,kBAGTqqD,EAAaL,EAAY/hC,EAAOhyC,IAClC,GAGFkL,EAAAA,GAAAA,cAAA,QAAMG,UAAU,UACbM,EAAAA,GAAAA,GAAWqmC,EAAO1mC,MAAO,CAAC,UAC1BoqE,GAAaxqE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wDAE7BH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACb2mC,EAAOkjC,YAAchqE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,wBAClC2mC,EAAOm9B,WAGF,IAEX4F,IAAgBA,EAAYruE,OAC/BwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAO,4BAGvD7G,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,QAId07C,GAA0BjwE,QAAQiwE,EAAuBvtE,SACzDwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,sBAGPipE,EAAuBtpE,KAAKqnC,GAC3B9mC,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,OACVsyD,QAAM,EAENjyD,QAASA,IAAMypE,EAAkCnjC,IAEjD9mC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,UAASM,EAAAA,GAAAA,GAAWqmC,EAAO1mC,MAAO,CAAC,WACnDJ,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY2mC,EAAOkB,cAGrChoC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,OACVG,MAAM,UACNrE,KAAK,OACLqkD,MAAI,EACJC,OAAK,EACLt/B,MAAOnhB,EAAKmhB,OAEXnhB,EAAK,aAOd,KClTV,GAzBqCvI,IAM/B,IANgC,MACpCgyC,EAAK,SACLohC,EAAQ,eACRC,EAAc,UACdjR,EAAS,QACTn5D,GACDjJ,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,iBACVG,MAAM,cACNrE,KAAK,UACLsE,QAAM,EACNo5D,UAAWA,EACX14C,MAAOnhB,EAAKmhB,MACZzgB,QAASA,GAETR,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmB,QAC1BopC,EAAM,SAAOA,EAAQ,EAAIqhC,GAAmB,GAAED,KAAcA,EAC3D,ECwBAE,GAAiB,0CACjBC,GAAiB,8BAyT9B,IAAertE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAA4B,IAA1B,MAAEq/D,GAAOr/D,EAChB,MAAM,QAAEiwB,GAAYlwB,EAAOgwB,OACrB,KAAEC,EAAI,QAAEm9C,GAAYptE,EAAO01D,YAEjC,MAAO,CACL2X,oBAAqBn9C,EAAQG,OAC7Bi9C,sBAAuBp9C,EAAQK,SAC/B68C,QAAS9N,EAAM31B,SAAYyjC,EAAQ9N,EAAM31B,WAAaud,GAAAA,OAAoBhtD,EAC1EqzE,eAA8BrzE,IAAnBolE,EAAM31B,WAA2B1Z,EAAKqvC,EAAM31B,UACvD6jC,gBAAgB3G,EAAAA,GAAAA,GAAmB7mE,EAAQ,mBAC5C,GAXeD,EAvTmCnG,IAiBjD,IAjBkD,MACtD0lE,EAAK,SACLmO,EAAQ,mBACRC,EAAkB,mBAClBC,EAAkB,cAClBC,EAAa,aACbC,EAAY,SACZxhE,EAAQ,QACRirD,EAAO,UACPiW,EAAS,OACT/wD,EAAM,oBACN6wD,EAAmB,cACnBS,EAAa,sBACbR,EAAqB,QACrBF,EAAO,eACPI,EAAc,aACdO,GACDn0E,EACC,MAAM,oBACJo0E,EAAmB,sBACnBtC,EAAqB,iBACrBp5C,IACE7wB,EAAAA,EAAAA,MAEEwsE,EAA4B,WAAf3O,EAAM4O,KACnBC,EAAoB7O,EAAMn2B,OAAOkjC,YAEhC+B,EAA6BC,IAAkCpmE,EAAAA,EAAAA,KAAS,IACxEqmE,EAA6BC,IAAkCtmE,EAAAA,EAAAA,KAAS,IAE/E9J,EAAAA,EAAAA,KAAU,KACJovE,GACFjW,GACF,GACC,CAACiW,EAAWjW,KAEfn5D,EAAAA,EAAAA,KAAU,KACJkO,GAAYizD,EAAM31B,UAAY21B,EAAMn2B,OAAOkjC,YAC7C2B,EAAoB,CAAErkC,SAAU21B,EAAM31B,UACxC,GACC,CAACt9B,EAAUizD,EAAMn2B,OAAOkjC,WAAY/M,EAAM31B,WAE7C,MACE6kC,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBtP,EAAO,aAE3BkP,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBtP,EAAO,aAE7BnhE,EAAAA,EAAAA,KAAU,KACRkwE,GAA+B,GAC/BE,GAA+B,EAAM,GACpC,CAACjP,EAAM31B,WAEV,MAAOolC,EAAwBC,IAA0BtzE,EAAAA,EAAAA,KAAQ,KAC/D,MAAMuzE,EAAoB,IAAIxsB,IAAI,IAC5B4qB,GAAuB,MACvBC,GAAyB,KAGzB4B,GAAwBC,EAAAA,GAAAA,IAAwBV,EAAiBQ,GACjEG,GAAwBD,EAAAA,GAAAA,IAAwBN,EAAiBI,GAEvE,MAAO,CACLb,EACIc,EACAA,EAAsBrhC,MAAM,EAzEV,EAyEmC8gC,EAAkB9wE,QAC3EywE,EACIc,EACAA,EAAsBvhC,MAAM,EA5EV,EA4EmCihC,EAAkBjxE,QAC5E,GACA,CACDgxE,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7Bf,EAAqBC,IAGjBnrE,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,WAGF,MAAMm6B,GAAeh1C,EAAAA,EAAAA,KAAa6e,IAChC,MAAM,cAAEnK,GAAkBmK,EAC1BitD,EAAS,CAAExpE,KAAM,WAAYs7D,QAASlpD,EAAcrE,MAAMyxB,QAAS,GAClE,CAACgqC,IAEE3xC,GAAen6B,EAAAA,EAAAA,KAAY,KAC/B8rE,EAAS,CAAExpE,KAAM,eAAgBs7D,SAAS,IAE1CwO,GAAa,KACXrvE,YAAW,KACT44D,GAAS,GAvGM,IAwGC,GAClB,GACD,CAACmW,EAAUM,EAAczW,IAEtB+X,GAA0B1tE,EAAAA,EAAAA,KAAY,KACrCyrE,GAQAkC,EAAAA,EAAAA,KAAqBn+C,EAAAA,EAAAA,MAAamuC,EAAM31B,UAKzCyjC,EAAQvvE,OAAS2vE,EACflO,EAAMiQ,UACRxB,EAAaH,GAEbA,IAGFlC,EAAsB,CACpBxqD,MAAO,oBAZToR,EAAiB,CAAEv6B,QAASoK,EAAK,oDAR7B8rE,GACFF,EAAaH,EAqBjB,GACC,CACDR,EAAS9N,EAAM31B,SAAU21B,EAAMiQ,UAAW/B,EAAgBS,EAAYF,EAAcH,EAAezrE,IAG/FqtE,GAAwB7tE,EAAAA,EAAAA,KAAY,CAACqH,EAAkCkB,KACvEo1D,EAAMiQ,UACRxB,GAAa,IAAMF,EAAa3jE,KAEhC2jE,EAAa3jE,EACf,GACC,CAAC6jE,EAAcF,EAAcvO,EAAMiQ,YAwBtC,SAASE,EAAYvB,GACnB,MAAMQ,EAA6B,aAATR,EAAsBS,EAAoBG,EAC9DY,EAA0B,aAATxB,EAAsBa,EAAyBC,EAEhEW,EAAsB,aAATzB,EAAsBE,EAA8BE,EAEjEsB,GADsB,aAAT1B,EAAsBO,EAAkBI,GACzBhxE,OAAS6xE,EAAe7xE,OACpDgyE,EAAwB,aAAT3B,EACjB,IAAMG,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACElsE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGqsE,EAAkB5sE,KAAK8E,GAnC9B,SAAwBA,EAAasnE,GACnC,MAAM4B,EAAoB,aAAT5B,EACb6B,GAAAA,GAAAA,MAAyBhuE,IAAA,IAAG6E,IAAKopE,GAASjuE,EAAA,OAAKiuE,IAAYppE,CAAG,IAC9DqpE,GAAAA,GAAAA,MAAyB/tE,IAAA,IAAG0E,IAAKopE,GAAS9tE,EAAA,OAAK8tE,IAAYppE,CAAG,IAElE,GAAKkpE,EAIL,OACEztE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKkpE,EAASlpE,IACdpE,UAAU,kCACV2D,KAAM2pE,EAAS3pE,KACf2uD,QAAM,EACNgY,UAAQ,GAEP3qE,EAAK2tE,EAASrtE,OAGrB,CAesCytE,CAAetpE,EAAKsnE,KACnDwB,EAAe5tE,KAAK3K,GACnBkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,kCACVsyD,QAAM,EACNgY,UAAQ,IAEPnsE,EAAAA,EAAAA,IAASxJ,GACRkL,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACknC,WAAW,QAAQhnC,OAAQ34B,IAE5CkL,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAAC+mC,WAAW,QAAQr2D,OAAQtJ,QAI7Cw4E,GAAcC,EAAiB,GAChCvtE,EAAAA,GAAAA,cAAC8tE,GAAc,CACbvkC,MAAOgkC,EACP5C,SAAS,OAETnqE,QAASgtE,IAKnB,CAEA,OACExtE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXluE,KAAMmuE,EAAAA,IACNr/B,OAAQs/B,GAAAA,EAAAA,WACRr/B,KAAM7U,OAAO8mC,EAAM31B,UACnBnnC,UAAU,0BAGXyrE,GACC5rE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACrEiI,EAAK,sBAIVE,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRtsB,UAAU,OACV+0B,MAAOp1B,EAAK,kBACZ6P,MAAOstD,EAAMn2B,OAAO1mC,MACpBwP,SAAU0kC,EACVnjB,MAAO8rC,EAAM9rC,OAAS8rC,EAAM9rC,QAAU05C,GAAiBA,QAAiBhzE,MAI1E4zE,GACAzrE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACZ88D,EAAM9rC,OAAS8rC,EAAM9rC,QAAU25C,IAC9B9qE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,8CAA8C0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAClFiI,EAAKm9D,EAAM9rC,QAIhBnxB,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,kBAErFE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,gDACV2D,KAAK,MACLtD,QAAS6qE,GAERvrE,EAAK,mBAGPstE,EAAY,cAIf3B,IAAkBK,GAClB9rE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,kBAErFE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,gDACV2D,KAAK,MACLtD,QAAS8qE,GAERxrE,EAAK,mBAGPstE,EAAY,aAIjBptE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,2BAGRE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,gDACV2D,KAAK,MACLtD,QAASwsE,GAERltE,EAAK,iCAGPirE,GAAStrE,KAAKsyB,GACb/xB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,kCACV2D,KAAK,OACL0uD,WAAS,EAEThyD,QAAS2sE,EACTjgD,SAAU6E,EAAOlqB,KAEjB7H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,QAAQ0G,IAAI,QAAQkrB,EAAO3xB,OAAS2xB,EAAOlqB,KAC3D7H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACbL,EAAK,oCAAqCiyB,EAAOk2B,QAAQzsD,OAAQ,WAQ5EwE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASp3B,QAAQmkE,EAAMiQ,WACvB/8D,SAAU8sD,EAAMtD,UAChBn5D,QAASi5B,EACTl2B,UAA0B,SAAf05D,EAAM4O,KAAkB,eAAiB,iBAEnD5O,EAAMtD,UACL35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCvHV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLowE,UAAUvJ,EAAAA,GAAAA,GAAmB7mE,EAAQ,yBAHvBD,EAtM0CnG,IAaxD,IAbyD,KAC7Ds0E,EAAI,QACJ58C,EAAO,YACP45B,EAAW,kBACXwjB,EAAiB,YACjB2B,EAAW,oBACXC,EAAmB,oBACnBrlB,EAAmB,0BACnBslB,EAAyB,eACzBC,EAAc,SACdJ,EAAQ,aACRK,EAAY,SACZpkE,GACDzS,EACC,MAAM,sBAAE8xE,IAA0BjqE,EAAAA,EAAAA,MAE5B48B,GAAWthC,EAAAA,EAAAA,IAAyB,MACpC2zE,EAAqB,aAATxC,EAAsB6B,GAAAA,GAAsBE,GAAAA,GACxDU,EAAiBzlB,EAAYrtD,OAAS6wE,EAAkB7wE,OAzBzC,IA0Bd0xE,EAAWqB,IAAgB3oE,EAAAA,EAAAA,KAAS,IAE3C9J,EAAAA,EAAAA,KAAU,KACHkO,GACHukE,GAAa,EACf,GACC,CAACvkE,KAEJlO,EAAAA,EAAAA,KAAU,KACRO,YAAW,MACT0M,EAAAA,EAAAA,KAAgB,KACdizB,EAASnhC,QAASiiC,OAAO,GACzB,GAxCe,IAyCD,GACjB,IAEH,MAAM0xC,GAAkBlvE,EAAAA,EAAAA,KAAaxK,IACnC,MAAM25E,EAAiB,IAAI5lB,GAC3B,GAAI4lB,EAAe15E,SAASD,GAC1B25E,EAAe/K,OAAO+K,EAAehqD,QAAQ3vB,GAAK,OAC7C,CACL,GAAI+zD,EAAYrtD,QAAUuyE,GAAqB,aAATlC,EAIpC,YAHAxC,EAAsB,CACpBxqD,MAAO,uBAIX4vD,EAAe5qE,KAAK/O,EACtB,CACAy5E,GAAa,GACb3lB,EAAoB6lB,EAAe,GAClC,CAAC5lB,EAAaD,EAAqBmlB,EAAUlC,EAAMxC,IAEhDqF,GAAsBpvE,EAAAA,EAAAA,KAAaiF,IACvC,MAAMoqE,EAAuB,IAAItC,GAC7BsC,EAAqB55E,SAASwP,GAChCoqE,EAAqBjL,OAAOiL,EAAqBlqD,QAAQlgB,GAAM,GAE/DoqE,EAAqB9qE,KAAKU,GAE5BgqE,GAAa,GACbL,EAA0BS,EAAqB,GAC9C,CAACtC,EAAmB6B,IAEjBU,GAAqBtvE,EAAAA,EAAAA,KAAaqH,IACtC,MAAM,MAAEgJ,GAAUhJ,EAAEqN,cACpBm6D,EAAex+D,EAAM,GACpB,CAACw+D,IAEEruE,GAAOC,EAAAA,EAAAA,MAiEN6qB,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBjzB,EAAWo3B,EAASn2B,QAAQk1E,IAE7E,OACEhuE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACZksE,EAAkB5sE,KApEzB,SAAgC8E,GAC9B,MAAMsqE,EAAeR,EAAUr/B,MAAKtvC,IAAA,IAAG6E,IAAKopE,GAASjuE,EAAA,OAAK6E,IAAQopE,CAAO,IACzE,GAAKkB,EAIL,OACE7uE,EAAAA,GAAAA,cAACi5D,GAAAA,EAAkB,CACjBn1D,KAAM+qE,EAAa/qE,KACnB1D,MAAON,EAAK+uE,EAAazuE,OACzB0uE,YAAaR,EACbS,UAAQ,EACRvuE,QAASkuE,EACTxhD,SAAU2hD,EAAatqE,KAG7B,IAqDOskD,EAAYppD,KAAI,CAAC3K,EAAIwvB,IACpBtkB,EAAAA,GAAAA,cAACi5D,GAAAA,EAAkB,CACjBC,aAAcpkE,EACdg6E,YAAaR,GAAkBhqD,EAAIukC,EAAYrtD,OApJ3B,EAqJpBuzE,UAAQ,EACRvuE,QAASguE,EACTthD,SAAUp4B,MAGdkL,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACLrsB,MAAOq+D,EACPp+D,SAAUg/D,EACVjiD,YAAa7sB,EAAK,aAGtBE,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,4BACV+5D,aAAa,aACbrtC,MAAOjC,EACP0C,WAAYzC,KAETD,IAAgBA,EAAYpvB,QAAUovB,EAAY71B,SAASk6B,EAAQ,MACpEjvB,EAAAA,GAAAA,cAAA,OAAKuE,IAAI,WACL0pE,GACAjuE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,oBAEPuuE,EAAU5uE,KAhFzB,SAAwBmC,GACtB,OACE5B,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAK3C,EAAK2C,IACVpE,UAAU,sDAEVK,QAASA,IAAMkuE,EAAoB9sE,EAAK2C,KACxCiL,QAAM,GAENxP,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAS,QAAO9E,EAAKkC,UAClD9D,EAAAA,GAAAA,cAAA,MAAIG,UAAU,YAAY0G,IAAI,QAAQ/G,EAAK8B,EAAKxB,QAChDJ,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAM,GACND,QAASo3C,EAAkBt3E,SAAS6M,EAAK2C,KACzCjB,OAAK,IAIb,IA+DctD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAGnBH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,iBAKX8qB,GAAapvB,OACZovB,EAAYnrB,KAvEpB,SAAoB3K,GAClB,MAAMmlD,EAAa4O,EAAY9zD,SAASD,GAExC,OACEkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,iDAEVK,QAASA,IAAMguE,EAAgB15E,GAC/B0a,QAAM,IAELlR,EAAAA,EAAAA,IAASxJ,GACRkL,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQ34B,IAEzBkL,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAACtvB,OAAQtJ,EAAIk6E,cAAY,IAEzChvE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAM,GACND,QAASglB,EACT32C,OAAK,IAIb,IAiDUsnB,IAAgBA,EAAYpvB,OAC9BwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaoE,IAAI,cAAa,yBAE3CvE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,CAAC9oB,IAAI,aAIjBvE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9C,EACT1sE,QAAS4tE,EACT7qE,UAAWzD,EAAK,SAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEX,KCrHV,IAAe1C,EAAAA,EAAAA,KArGkClG,IAO3C,IAP4C,KAChDs0E,EAAI,MACJ5O,EAAK,SACLmO,EAAQ,SACRphE,EAAQ,QACRirD,EAAO,aACPmZ,GACD72E,EACC,MAAM,WAAE03E,GAAehS,GACjB,gBAAEkP,EAAe,kBAAEE,IAAsBE,EAAAA,GAAAA,IAAkBtP,EAAO4O,GAAM,GAExE/rE,GAAOC,EAAAA,EAAAA,KAEPmvE,GAAsBC,EAAAA,GAAAA,IAA8BrF,EAAAA,KACpDsF,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KAEzDpB,EAAsBhR,EAAMn2B,OAAOkjC,WAEnCsF,GAAej2E,EAAAA,EAAAA,KAAQ,KAE3B,MAAM4wB,GAAY6E,EAAAA,EAAAA,MAAYnB,MAAMC,KAE9BqB,EAAU,IAAIigD,GAAuB,MAAOE,GAA4B,IAC9E,OAAOvgD,EAAAA,GAAAA,IAAO,IACTs9C,MACA78C,EAAAA,EAAAA,IAAkBxvB,EAAMmvB,EAAShF,EAAWglD,IAC/C,GACD,CAACC,EAAqBE,EAA0BjD,EAAiBrsE,EAAMmvE,IAEpEL,GAAqBtvE,EAAAA,EAAAA,KAAaiwE,IACtCnE,EAAS,CACPxpE,KAAM,gBACNs7D,QAASqS,GACT,GACD,CAACnE,IAEEoE,GAA0BlwE,EAAAA,EAAAA,KAAaqvB,IAEzCy8C,EADW,aAATS,EACO,CACPjqE,KAAM,oBACNs7D,QAAS,IAAKD,EAAMwS,eAAgBrD,gBAAiBz9C,IAG9C,CACP/sB,KAAM,oBACNs7D,QAAS,IAAKD,EAAMyS,eAAgBlD,gBAAiB79C,IAEzD,GACC,CAACk9C,EAAM5O,EAAOmO,IAEXuE,GAAgCrwE,EAAAA,EAAAA,KAAa0sB,IACjD,MAAM4jD,EAAsC,CAAC,EAC7C5jD,EAAKhkB,SAASzD,IACZqrE,EAAWrrE,IAAO,CAAI,IAItB6mE,EADW,aAATS,EACO,CACPjqE,KAAM,oBACNs7D,QAAS,CACPkP,gBAAiBD,KACdyD,IAIE,CACPhuE,KAAM,oBACNs7D,QAAS,CACPsP,gBAAiBL,KACdyD,IAGT,GACC,CAAC/D,EAAMM,EAAiBf,IAO3B,OALAlxD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGLqa,EAKHtvE,EAAAA,GAAAA,cAAC6vE,GAA0B,CACzBhE,KAAMA,EACN58C,QAASqgD,EACTzmB,YAAasjB,EACbE,kBAAmBA,EACnB2B,YAAaiB,EACbhB,oBAAqBA,EACrBrlB,oBAAqB4mB,EACrBtB,0BAA2ByB,EAC3BxB,eAAgBS,EAChBR,aAAcA,EACdpkE,SAAUA,IAfLhK,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,KAgBb,I,cC/HN,SAAgK,uBC6GhK,IAAe5vB,EAAAA,EAAAA,KAvFkBlG,IAK3B,IAL4B,MAChC6I,EAAK,WACL0vE,EAAU,SACVC,EAAQ,WACRz0E,GACD/D,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MACP,iBAAEkwB,EAAgB,kBAAEQ,IAAsBrxB,EAAAA,EAAAA,OAE1C,SAAEoD,IAAaC,EAAAA,EAAAA,MAEfutE,GAAW1wE,EAAAA,EAAAA,KAAa2wE,KAC5B7M,EAAAA,GAAAA,IAAoB6M,GACpBhgD,EAAiB,CACfv6B,QAASoK,EAAK,eACd,GACD,CAACA,IAEEowE,GAA2B5wE,EAAAA,EAAAA,KAAY,KAC3C0wE,EAASF,EAAW,GACnB,CAACE,EAAUF,IAERK,GAAc7wE,EAAAA,EAAAA,KAAY,KAC9BmxB,EAAkB,CAAElrB,KAAMuqE,GAAa,GACtC,CAACA,IAEEM,GAAyE/2E,EAAAA,EAAAA,KAAQ,IAC9EqG,IAAA,IAAC,UAAE2D,EAAS,OAAEvE,GAAQY,EAAA,OAC3BM,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cACNH,UAAWrB,EAAS,SAAW,GAC/B0B,QAAS6C,EACTE,UAAU,WAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,CAACqC,IAEJ,OACExC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACVL,EAAKM,GAAS,0BAEjBJ,EAAAA,GAAAA,cAAA,OAAKG,UDrEmB,wBCsEtBH,EAAAA,GAAAA,cAAA,SACEG,WAAWuG,EAAAA,GAAAA,GAAe,eDvEyB,wBCwEnDiJ,MAAOmgE,EACPpP,UAAQ,EACRlgE,QAAS0vE,IAEXlwE,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UD7EqF,uBC8ErFiE,QAASgsE,EACT/rE,UAAU,SAEVrE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS0vE,GAA2BpwE,EAAK,SAC9DiwE,GACC/vE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAStD,QAASuvE,EAAUtqC,aAAW,GAAE3lC,EAAK,mBAInEE,EAAAA,GAAAA,cAAA,OAAKG,UDvFqH,wBCwFxHH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLG,QAAS0vE,EACT/vE,UAAW9K,GACX4G,KAAK,UACLkU,SAAU7U,GAETwE,EAAK,oCAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLG,QAAS2vE,EACThwE,UAAW9K,GACX4G,KAAK,UACLkU,SAAU7U,GAETwE,EAAK,sCAGN,ICuFV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAE2pC,EAAQ,IAAEz/B,EAAG,UAAE8xD,IAActjD,EAAAA,EAAAA,IAAe1Y,GAAQ0yE,mBAAqB,CAAC,EAC5EvpC,EAASQ,GAAWmiB,EAAAA,EAAAA,IAAiB9rD,EAAQ2pC,QAAYzvC,EACzDk6B,EAASuV,EAAW3pC,EAAO01D,YAAY0X,QAAQzjC,IAAW0H,MAAM1qB,GAAMA,EAAEzc,MAAQA,SAAOhQ,EAE7F,MAAO,CACLyvC,WACAlnC,MAAO0mC,GAAQ1mC,MACfgsE,gBAAiBtlC,GAAQslC,gBACzBkE,cAAexpC,GAAQwpC,cACvBzoE,MACA8xD,YACA1R,QAASl2B,GAAQk2B,QAClB,GAdevqD,EAvJqCnG,IAUnD,IAVoD,SACxDyS,EAAQ,QACRirD,EAAO,SACP3tB,EAAQ,MACRlnC,EAAK,gBACLgsE,EAAe,cACfkE,EAAa,QACbroB,EAAO,IACPpgD,EAAG,UACH8xD,GACDpiE,EACC,MAAM,qBACJg5E,EAAoB,qBAAEC,EAAoB,mBAAEC,EAAkB,iBAAExgD,IAC9D7wB,EAAAA,EAAAA,MACEU,GAAOC,EAAAA,EAAAA,MAENmtE,EAAWqB,IAAgB3oE,EAAAA,EAAAA,KAAS,IAE3CsU,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,KAGVn5D,EAAAA,EAAAA,KAAU,KACH69D,GACH4U,GAAa,EACf,GACC,CAAC5U,KAEJ79D,EAAAA,EAAAA,KAAU,MACH+L,GAAOy/B,GAAYt9B,GACtBumE,EAAqB,CAAEjpC,YACzB,GACC,CAACA,EAAUt9B,EAAUnC,IAExB,MAAM6oE,GAAepxE,EAAAA,EAAAA,KAAY,KAC1BuI,GAAQy/B,IAEbkpC,EAAqB,CAAElpC,WAAUz/B,QACjCotD,IAAS,GACR,CAAC3tB,EAAU2tB,EAASptD,IAEjB6gD,GAAUrvD,EAAAA,EAAAA,KAAQ,KACd+yE,GAAmB,IAAI/mB,OAAOirB,GAAiB,KACtD,CAAClE,EAAiBkE,KAEdK,EAAahoB,IAAatvD,EAAAA,EAAAA,KAAQ,KACvC,MAAMsE,GAASmxB,EAAAA,EAAAA,MACf,OAAO8hD,EAAAA,GAAAA,IAAUloB,GAAU5zD,IAAO+7E,EAAAA,EAAAA,IAAsBlzE,EAAQ7I,IAAI,GACnE,CAAC4zD,KAEGG,EAAaioB,IAAkBlrE,EAAAA,EAAAA,IAAmBqiD,GAAW,IAE9D8oB,GAAmBr2E,EAAAA,EAAAA,KAAO,IAChCs2E,EAAAA,GAAAA,IAAsBtxE,IAAe,IAAbuxE,GAAQvxE,EAC1BuxE,IAAYppE,IACdkpE,EAAiBl2E,SAAU,GAExBk2E,EAAiBl2E,UACtBk2E,EAAiBl2E,SAAU,EACtBgN,EAEMogD,GACT6oB,EAAe7oB,GAFf6oB,EAAeH,GAGjB,GACC,CAAC9oE,EAAK8oE,EAAa1oB,IAEtB,MAAMipB,GAAsB5xE,EAAAA,EAAAA,KAAaxK,IACvC,MAAM6I,GAASmxB,EAAAA,EAAAA,MACT5M,GAAO1jB,EAAAA,EAAAA,IAAWb,EAAQ7I,GAC1BoJ,GAAOC,EAAAA,EAAAA,IAAWR,EAAQ7I,GAC5BotB,IAAQivD,EAAAA,EAAAA,IAAUjvD,GACpB+N,EAAiB,CACfv6B,QAASoK,EAAK,8CAEPoiB,EACT+N,EAAiB,CACfv6B,QAASoK,EAAK,+CAEP5B,IAAQssD,EAAAA,EAAAA,IAActsD,GAC/B+xB,EAAiB,CACfv6B,QAASoK,EAAK,wDAGhBmwB,EAAiB,CACfv6B,QAASoK,EAAK,qDAElB,GACC,CAACA,IAEE0vE,GAA0BlwE,EAAAA,EAAAA,KAAaqvB,IAC3CmiD,EAAeniD,GACf4/C,GAAa,EAAK,GACjB,IAEG90C,GAAen6B,EAAAA,EAAAA,KAAY,KAC1BgoC,GAAaz/B,GAClB4oE,EAAmB,CAAEnpC,WAAU2gB,QAASY,EAAahhD,OAAM,GAC1D,CAACy/B,EAAUuhB,EAAahhD,IAErBupE,EAAavoB,EAAYrtD,OACzBF,GAAc81E,GAAczX,EAElC,OACE35D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uEACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXluE,KAAMmuE,EAAAA,IACNr/B,OAAQs/B,GAAAA,EAAAA,aACRlqE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,SAC/CpG,EAAAA,GAAAA,GAAWX,EAAK,4CAA6C,CAACM,EAAOgxE,IACpE,CAAC,sBAIPpxE,EAAAA,GAAAA,cAACqxE,GAAU,CACTvB,WAAYnW,EAAY75D,EAAK,WAAa+H,EAC1CkoE,SAAUW,EACVp1E,WAAYA,IAGd0E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wCACbH,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAASA,EACTC,UAAWA,EACXC,oBAAqB4mB,EACrB3mB,YAAaA,EACbyoB,gBAAiBJ,EACjBK,iBAAe,KAInBvxE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASypC,GAAauT,EACtB/8D,SAAU7U,EACVkF,QAASi5B,EACTl2B,UAAU,gBAETo2D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCwCV,IAAe1C,EAAAA,EAAAA,KAxMuBlG,IAQhC,IARiC,cACrC4lE,EAAa,YACbqU,EAAW,MACXvU,EAAK,SACLmO,EAAQ,SACRphE,EAAQ,eACRqzD,EAAc,QACdpI,GACD19D,EACC,MAAM,yBACJk6E,EAAwB,eACxBC,EAAc,cACdtI,IACEhqE,EAAAA,EAAAA,MAEEuyE,GAAcryE,EAAAA,EAAAA,KAAY,KAE5B69D,IAAkBU,EAAAA,GAAAA,qBACfV,IAAkBU,EAAAA,GAAAA,mBAClBV,IAAkBU,EAAAA,GAAAA,+BAClBV,IAAkBU,EAAAA,GAAAA,0BAErBxhE,YAAW,KACT+uE,EAAS,CAAExpE,KAAM,SAAU,GAnCP,KAwCtBu7D,IAAkBU,EAAAA,GAAAA,sBACfV,IAAkBU,EAAAA,GAAAA,qBAUvB5I,IARqB,WAAfgI,EAAM4O,KACRxO,EAAeQ,EAAAA,GAAAA,qBAEfR,EAAeQ,EAAAA,GAAAA,kBAKV,GACR,CACDZ,EAAM4O,KAAMT,EACZjO,EAAelI,EAASoI,IAGpBuO,EAA4B,WAAf3O,EAAM4O,KAEnB+F,GAAYtyE,EAAAA,EAAAA,KAAauyE,IAC7B,MAAM,MAAEzxE,GAAUyxE,EAAS/qC,OAE3B,IAAK1mC,EAEH,OADAgrE,EAAS,CAAExpE,KAAM,WAAYs7D,QAAS2N,MAC/B,EAGT,MACEsB,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBsF,EAAU,YAEhC,OAAKzF,EAAgB5wE,QAAWlG,OAAO02B,KAAKsgD,GAAmB9wE,QAK1DowE,EAGHxC,EAAc,CAAEtiC,OAAQ+qC,EAAS/qC,SAFjC4qC,EAAe,CAAE58E,GAAI+8E,EAASvqC,SAAWwqC,aAAcD,EAAS/qC,SAKlEskC,EAAS,CAAExpE,KAAM,WAAYs7D,aAASrlE,IACtCuzE,EAAS,CAAExpE,KAAM,eAAgBs7D,SAAS,KAEnC,IAbLkO,EAAS,CAAExpE,KAAM,WAAYs7D,QAAS4N,MAC/B,EAYE,GACV,CAACM,EAAUQ,IAERmG,GAAmBzyE,EAAAA,EAAAA,KAAau1D,IAC/B+c,EAAU3U,IAGfpI,KAAM,GACL,CAAC+c,EAAW3U,IAET+U,GAAmB1yE,EAAAA,EAAAA,KAAY,KACnC,MAAMuyE,EAAWzG,EAAS,CAAExpE,KAAM,gBAClC+vE,IACAC,EAAUC,EAAS,GAClB,CAACzG,EAAUuG,EAAaC,IAErBlI,GAAqBpqE,EAAAA,EAAAA,KAAY,KACrC8rE,EAAS,CAAExpE,KAAM,UACjBy7D,EAAeQ,EAAAA,GAAAA,oBAAoC,GAClD,CAACR,EAAgB+N,IAEd6G,GAAmB3yE,EAAAA,EAAAA,KAAawnC,IACpCskC,EAAS,CAAExpE,KAAM,aAAcs7D,QAASp2B,IACxCu2B,EAAeQ,EAAAA,GAAAA,kBAAkC,GAChD,CAACuN,EAAU/N,IAER6U,GAAyB5yE,EAAAA,EAAAA,KAAY,KACzC8rE,EAAS,CAAExpE,KAAM,uBACjBy7D,EAAeF,IAAkBU,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBAAqC,GACxC,CAACV,EAAeiO,EAAU/N,IAEvB8U,GAAyB7yE,EAAAA,EAAAA,KAAY,KACzC8rE,EAAS,CAAExpE,KAAM,uBACjBy7D,EAAeF,IAAkBU,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBAAqC,GACxC,CAACV,EAAeiO,EAAU/N,IAEvB+U,GAAoB9yE,EAAAA,EAAAA,KAAY,KACpCmyE,EAAyB,CAAEnqC,SAAU21B,EAAM31B,SAAW+qC,qBAAqB,IAC3EjH,EAAS,CAAExpE,KAAM,gBAAiBs7D,SAAS,IAC3CG,EAAeQ,EAAAA,GAAAA,aAA6B,GAC3C,CAACuN,EAAU/N,EAAgBJ,EAAM31B,WAE9BgrC,GAAmBhzE,EAAAA,EAAAA,KAAauI,IACpC4pE,EAAyB,CAAEnqC,SAAU21B,EAAM31B,SAAWz/B,MAAKwqE,qBAAqB,IAChFhV,EAAeQ,EAAAA,GAAAA,aAA6B,GAC3C,CAACR,EAAgBJ,EAAM31B,WAE1B,OAAQ61B,GACN,KAAKU,EAAAA,GAAAA,QACH,OACE79D,EAAAA,GAAAA,cAACuyE,GAAmB,CAClBtJ,eAAgBS,EAChBR,aAAc+I,EACdjoE,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAGf,KAAK4I,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,yBACH,OACE79D,EAAAA,GAAAA,cAACwyE,GAAmB,CAClBvV,MAAOA,EACPmO,SAAUA,EACVC,mBAAoB6G,EACpB5G,mBAAoB6G,EACpB5G,cAAe6G,EACf5G,aAAc8G,EACdrd,QAAS0c,EACT3nE,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACX/F,cAAetO,IAAkBU,EAAAA,GAAAA,yBACjC1jD,OAAQ86C,EACRyW,aAAcqG,IAGpB,KAAKlU,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE79D,EAAAA,GAAAA,cAACyyE,GAA0B,CACzB5G,KAAK,WACL5O,MAAOA,EACPmO,SAAUA,EACVnW,QAAS0c,EACTvD,aAAc4D,EACdhoE,SAAUA,IAGhB,KAAK6zD,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE79D,EAAAA,GAAAA,cAACyyE,GAA0B,CACzB5G,KAAK,WACL5O,MAAOA,EACPmO,SAAUA,EACVnW,QAAS0c,EACTvD,aAAc4D,EACdhoE,SAAUA,IAIhB,KAAK6zD,EAAAA,GAAAA,aACH,OACE79D,EAAAA,GAAAA,cAAC0yE,GAAqB,CACpB1oE,SAAUA,EACVirD,QAAS0c,IAIf,QACE,OAAiB,I,4BC1LvB,MAAMgB,GAAsC,CAAC,CAC3Cz9C,MAAO,UACPvlB,MAAO,OACN,CACDulB,MAAO,UACPvlB,MAAO,QAuIT,IAAelS,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,MAAEkgC,EAAK,qBAAE+0C,GAAyBj1E,EAAOqpE,SAASC,MAExD,MAAO,KACFn0C,EAAAA,GAAAA,IAAKn1B,EAAOqpE,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,qBACA,qBACA,eAEFppC,QACA+0C,uBACD,GAfel1E,EApI+BnG,IAS7C,IAT8C,SAClDyS,EAAQ,eACRqzD,EAAc,QACdpI,EAAO,gBACP4d,EAAe,oBACfC,EAAmB,WACnBC,EAAU,MACVl1C,EAAK,qBACL+0C,GACDr7E,EACC,MAAM,iBACJwwE,IACE3oE,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KAEPizE,EAA2C,CAAC,CAChD99C,MAAOp1B,EAAK,8BACZ6P,MAAO,SACN,CACDulB,MAAOp1B,EAAK,6BACZ6P,MAAO,QACN,CACDulB,MAAOp1B,EAAK,+BACZ6P,MAAO,SAGHsjE,EAAyBjtE,EAAAA,QAO3BnO,EAP0C,CAC5C,CAAE8X,MAAO,QAASulB,MAAOp1B,EAAK,2BAA4BozE,SAAU,6BACpE,CACEvjE,MAAO,aACPulB,MAAOp1B,EAAKqzE,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,sBAIRE,GAA8B9zE,EAAAA,EAAAA,KAAa+zE,IAC/C//E,SAASggF,gBAAgB99E,MAAM85C,YAC7B,uBAAyB,GAAEtrC,KAAK2Y,IAAI02D,EAASlsE,EAAAA,GAAS,GAAK,SAE7D7T,SAASggF,gBAAgB99E,MAAM85C,YAAY,wBAA0B,GAAEtrC,KAAKyH,MAAgB,OAAV4nE,QAClF//E,SAASggF,gBAAgB99E,MAAM85C,YAAY,sBAAwB,GAAE+jC,OACrE//E,SAASggF,gBAAgBC,aAAa,yBAA0BF,EAAQ9jC,YAExEw4B,EAAiB,CAAE8K,gBAAiBQ,GAAU,GAC7C,CAACtL,IAEEyL,GAA8Bl0E,EAAAA,EAAAA,KAAaqQ,IAC/C,MAAM8jE,EAAqB,SAAV9jE,GAAmB+jE,EAAAA,EAAAA,MAAmB/jE,EAEvDo4D,EAAiB,CAAElqC,MAAO41C,IAC1B1L,EAAiB,CAAE6K,qBAAgC,SAAVjjE,GAAmB,GAC3D,CAACo4D,IAEE4L,GAAyBr0E,EAAAA,EAAAA,KAAas0E,IAC1C7L,EAAiB,CAAEgL,WAAYa,IAC/B7L,EAAiB,CAAE8L,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,EAA4B,GACzC,CAAC7L,IAEEgM,GAA+Bz0E,EAAAA,EAAAA,KAAa00E,IAChDjM,EAAiB,CAAE+K,oBAAqBkB,GAA+C,GACtF,CAACjM,IAOJ,OALA7tD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,aAEhFE,EAAAA,GAAAA,cAACyP,GAAAA,EAAW,CACVylB,MAAOp1B,EAAK,YACZsd,IAAK,GACLT,IAAK,GACLhN,MAAOkjE,EACPjjE,SAAUwjE,IAGZpzE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,QAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,wBAE7B/9D,EAAK,oBAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,UAERE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,QACL2mC,QAASikC,EACTkB,SAAUtB,EAAuB,OAAS/0C,EAC1CjuB,SAAU4jE,KAIdxzE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAW,eAG1EmI,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,aACL2mC,QAAS4jC,GACTuB,SAAUnB,EACVnjE,SAAU+jE,KAIbV,GACCjzE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,uBAEhFE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,yBACL2mC,QAASkkC,EACTrjE,SAAUmkE,EACVG,SAAUpB,KAIZ,K,wCClJV,MAqFA,IAAer1E,EAAAA,EAAAA,KArFqBlG,IAK9B,IAL+B,UACnC48E,EAAS,MACTt2C,EAAK,WACLoc,EAAU,QACVz5C,GACDjJ,EACC,MAAM,KAAEkpC,EAAI,SAAEntC,GAAa6gF,EACrBC,EAAkB,YAAW9gF,EAASwB,KACtCsF,EAAe9G,EAASwG,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEy6E,YAC7BC,GAAW5rC,EAAAA,GAAAA,GAAcn1C,EAAS+8C,WAAW71C,QAAS1B,QAAQgB,IAAiB,IAC/E,qBAAEwZ,IAAyBE,EAAAA,GAAAA,GAC/B1a,QAAQgB,GAAkBM,QAC1BvC,OACAA,EACA,QAEIy8E,GAAe55E,EAAAA,EAAAA,KAAO,IACrB65E,EAAeC,IAAoB5uE,EAAAA,EAAAA,KAAS,IAEjD7L,UAAW06E,EAAS,aAAEx6E,IACpBC,EAAAA,EAAAA,GAAyBk6E,GAAiBG,GACxCG,GAAiD,KAA/B7wD,EAAAA,EAAAA,GAAY0wD,IAC5BnhE,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpF+gE,IAAkBE,GAAch0C,IAASk0C,EAAAA,QAC1C98E,EACA68E,EACA,QAGIE,GAAcl6E,EAAAA,EAAAA,MACpBk6E,EAAY/5E,QAAUgjC,EAEtB,MAAM6zB,GAAepyD,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMu1E,QAAaC,EAAAA,EAAAA,IAAUL,SACvBM,GAASC,KAAKC,EAAAA,IAAsBL,EAAY/5E,QAAUg6E,GAChEr0E,EAAQigC,EACT,EAJD,EAII,GACH,CAACg0C,EAAWj0E,EAASigC,KAExB3kC,EAAAA,EAAAA,KAAU,KAEJ24E,GAAaH,EAAaz5E,UAC5B62D,IACA4iB,EAAaz5E,SAAU,EACzB,GACC,CAAC45E,EAAW/iB,IAEf,MAAM79C,GAAcvU,EAAAA,EAAAA,KAAY,KAC1Bm1E,EACF/iB,KAEA4iB,EAAaz5E,SAAU,EACvB25E,GAAkBU,IAAeA,IACnC,GACC,CAACT,EAAW/iB,IAETvxD,GAAYuG,EAAAA,GAAAA,GAChB,gBACAuzC,GAAc,YAGhB,OACEj6C,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAWK,QAASqT,GAClC7T,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,UACE8E,IAAKuvE,EACLl0E,UAAU,cAEZH,EAAAA,GAAAA,cAAA,OACEjM,IAAK+F,GAAkBM,EACvB+F,WAAWuG,EAAAA,GAAAA,GAAe,aAAc4M,GACxCsE,IAAI,KAELvE,GACCrT,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,oBAAqB6M,IAClDvT,EAAAA,GAAAA,cAACwE,GAAAA,EAAe,CAACC,SAAUxK,EAAcuG,QAASqT,MAIpD,ICrEJ+gD,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAO,GAkInD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMkgC,GAAQC,EAAAA,EAAAA,IAAYngC,IACpB,WAAEw3E,EAAU,UAAEC,GAAcz3E,EAAOqpE,SAASqO,OAAOx3C,IAAU,CAAC,GAC9D,iBAAEy3C,GAAqB33E,EAAOqpE,SAEpC,MAAO,CACLmO,aACAC,YACAE,mBACAz3C,QACD,GAXengC,EAhIyCnG,IAQvD,IARwD,SAC5DyS,EAAQ,eACRqzD,EAAc,QACdpI,EAAO,WACPkgB,EAAU,UACVC,EAAS,iBACTE,EAAgB,MAChBz3C,GACDtmC,EACC,MAAM,eACJg+E,EAAc,gBACdC,EAAe,iBACfC,IACEr2E,EAAAA,EAAAA,MAEEs2E,GAAWh7E,EAAAA,EAAAA,MACjBg7E,EAAS76E,QAAUgjC,GAGnB/hC,EAAAA,EAAAA,KAAU,KACR84D,IAAa,KACX2gB,GAAgB,GAChB,GACD,CAACA,IAEJ,MAAMI,GAAmBr2E,EAAAA,EAAAA,KAAaqH,IACpC,MAAM,MAAEgqB,GAAUhqB,EAAEwV,OAEdy5D,GAAiBC,EAAAA,EAAAA,IAAcllD,GACjCilD,GAAgBp6E,QAClBg6E,EAAgBI,EAAe,GACjC,GACC,CAACJ,IAEEM,GAAwBx2E,EAAAA,EAAAA,KAAY,MACxCy2E,EAAAA,GAAAA,GAvCoB,aAuCmBJ,GAAkB,EAAK,GAC7D,CAACA,IAEEK,GAAiB12E,EAAAA,EAAAA,KAAY,KACjC+9D,EAAeQ,EAAAA,GAAAA,2BAA2C,GACzD,CAACR,IAEE4Y,GAAuB32E,EAAAA,EAAAA,KAAY,KACvCm2E,EAAiB,CACf53C,QACAs3C,gBAAYt9E,EACZknC,qBAAiBlnC,EACjBu9E,WAAW,EACXc,aAAwB,SAAVr4C,EAAmBs4C,EAAAA,IAA2BC,EAAAA,KAC5D,GACD,CAACX,EAAkB53C,IAEhBw4C,GAAwB/2E,EAAAA,EAAAA,KAAamhC,IACzCg1C,EAAiB,CAAE53C,MAAO63C,EAAS76E,QAAUs6E,WAAY10C,IACzD,MAAM61C,EAAmBhB,GAAoBA,EAAiBtmC,MAAMmlC,GAAcA,EAAU1zC,OAASA,IACjG61C,GAAkBhjF,SAAS+8C,YAC7BkmC,EAAAA,GAAAA,IAAgBD,EAAiBhjF,SAAS+8C,UAAU71C,SACjDq0C,MAAMvuC,IACL,MAAM41E,GAAeM,EAAAA,GAAAA,IAAgBl2E,GAC/Bm2E,EAAY,KAAGC,EAAAA,GAAAA,IAAQp2E,KAC7Bm1E,EAAiB,CAAE53C,MAAO63C,EAAS76E,QAAUkkC,gBAAiB03C,EAAUP,gBAAe,GAE7F,GACC,CAACZ,EAAkBG,IAEhBkB,GAA4Br3E,EAAAA,EAAAA,KAAaqH,IAC7C8uE,EAAiB,CAAE53C,MAAO63C,EAAS76E,QAAUu6E,UAAWzuE,EAAEwV,OAAO8Y,SAAU,GAC1E,CAACwgD,IAEE31E,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM2hB,EAActB,IAAmB,IAAMA,EAAiB,GAAG70C,OAASk0C,EAAAA,GAE1E,OACE30E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4DACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,aACL3D,UAAU,OACVgQ,SAAUymE,EACVp2E,QAASs1E,GAERh2E,EAAK,gBAGRE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,WACL3D,UAAU,OACVK,QAASw1E,GAERl2E,EAAK,aAGRE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,WAAWtD,QAASy1E,GAChCn2E,EAAK,yBAGRE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,qBACZm1B,QAASn8B,QAAQs8E,GACjBxlE,SAAU+mE,KAIbrB,EACCt1E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACZm1E,EAAiB71E,KAAK00E,GACrBn0E,EAAAA,GAAAA,cAAC62E,GAAa,CACZtyE,IAAK4vE,EAAU1zC,KACf0zC,UAAWA,EACXt2C,MAAOA,EACPoc,WAAYk7B,IAAehB,EAAU1zC,KACrCjgC,QAAS61E,OAKfr2E,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAEN,KCxHJypD,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbrzE,KAAKV,MAAO6zE,EAAI,IAAOC,EAAME,UAAUx8E,MAAQ,IAC/CkJ,KAAKV,OAAO,EAAI6zE,EAAI,KAAOC,EAAME,UAAUn8E,OAAS,KAEtDo8E,YAAavzE,KAAKV,MAAM6zE,EAAI,IAAMC,EAAMI,QAAQ18E,MAAQ,IAE5D,CAEA,SAAS28E,GAAa/3E,EAEpB03E,GAC0B,IAF1B,cAAEC,EAAa,YAAEE,GAA+D73E,EAGhF,MAAO,CACL63E,GAAeH,EAAMI,QAAQ18E,MAAQ,GACrCu8E,EAAc,IAAMD,EAAME,UAAUx8E,MAAQ,GAC5C,EAAIu8E,EAAc,IAAMD,EAAME,UAAUn8E,OAAS,GAErD,CA4EA,UAAesC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMkgC,GAAQC,EAAAA,EAAAA,IAAYngC,IACpB,gBAAEohC,GAAoBphC,EAAOqpE,SAASqO,OAAOx3C,IAAU,CAAC,EAC9D,MAAO,CACLkB,kBACAlB,QACD,GAPengC,EAxSyCnG,IAKvD,IALwD,SAC5DyS,EAAQ,QACRirD,EAAO,MACPp3B,EAAK,gBACLkB,GACDxnC,EACC,MAAM,iBAAEk+E,IAAqBr2E,EAAAA,EAAAA,MAEvBs2E,GAAWh7E,EAAAA,EAAAA,MACjBg7E,EAAS76E,QAAUgjC,EAEnB,MAAMtlB,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCg9E,GAAiBh9E,EAAAA,EAAAA,IAAuB,MAExCi9E,GAAej9E,EAAAA,EAAAA,IAAuB,MACtCk9E,GAAgBl9E,EAAAA,EAAAA,KAAO,IAEtBy8E,EAAKU,IAAUjyE,EAAAA,EAAAA,IAiLxB,SAAuBm5B,GACrB,OAAOA,GAAmBA,EAAgBo5B,WAAW,MACjD4e,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQj4C,EAAgBpF,QAAQ,IAAK,MAC7Cm9C,EACN,CArLiCgB,CAAc/4C,IAEvCg5C,GAASr9E,EAAAA,EAAAA,IAAOy8E,IACtBr7E,EAAAA,EAAAA,KAAU,KACRi8E,EAAOl9E,QAAUs8E,CAAG,GACnB,CAACA,IAEJ,MAAOvV,EAAYoW,EAAgBC,IAAoB11E,EAAAA,EAAAA,MAChD21E,EAAUC,IAAevyE,EAAAA,EAAAA,IAAS,KAClCwyE,EAAUC,IAAezyE,EAAAA,EAAAA,IAAS,IAEnC0yE,GAAW59E,EAAAA,EAAAA,MACX69E,GAAc79E,EAAAA,EAAAA,OAGpBoB,EAAAA,EAAAA,KAAU,KAER,MAAMw7E,EAAY,CAChBkB,WAAYd,EAAe78E,QAAS29E,eACjC1lD,EAAAA,GAAAA,IAAK4kD,EAAe78E,QAASqR,wBAAyB,CAAC,MAAO,QAAS,YAEtEsrE,EAAU,CACdgB,WAAYb,EAAa98E,QAAS29E,eAC/B1lD,EAAAA,GAAAA,IAAK6kD,EAAa98E,QAASqR,wBAAyB,CAAC,WAK1D,SAASusE,EAAgB9xE,GACvB,MAAM0wE,EAAgB,CACpBrzE,KAAKoZ,IAAIpZ,KAAK2Y,IAAI,EAAGhW,EAAE0F,MAASirE,EAAUkB,YAAalB,EAAUx8E,MAAQ,GACzEkJ,KAAKoZ,IAAIpZ,KAAK2Y,IAAI,EAAGhW,EAAEkU,MAASy8D,EAAUtkE,IAAMuF,EAAa1d,QAAS5F,WAAYqiF,EAAUn8E,OAAS,KAGjG,YAAEo8E,GAAgBL,GAAca,EAAOl9E,QAASy9E,EAASz9E,SAK/D,OAHAg9E,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASz9E,UAC9Dm9E,KAEO,CACT,CAWA,SAASU,EAAc/xE,GACrB,MAAM,cAAE0wE,GAAkBH,GAAca,EAAOl9E,QAASy9E,EAASz9E,SAC3D08E,EAAcvzE,KAAKoZ,IAAIpZ,KAAK2Y,IAAI,EAAGhW,EAAE0F,MAASmrE,EAAQgB,YAAahB,EAAQ18E,MAAQ,GAKzF,OAHA+8E,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASz9E,UAC9Dm9E,KAEO,CACT,CAjCAM,EAASz9E,QAAU,CAAEy8E,YAAWE,YAgBhC1qE,EAAAA,GAAAA,IAAc4qE,EAAe78E,QAAU,CACrCkS,UAAW0rE,EACXvrE,OAAQurE,EACRxrE,UAAWgrE,EACXz3E,QAASy3E,EACTU,wBAAyB,kCACzBC,YAAY,KAad9rE,EAAAA,GAAAA,IAAc6qE,EAAa98E,QAAU,CACnCkS,UAAW2rE,EACXxrE,OAAQwrE,EACRzrE,UAAWgrE,EACXz3E,QAASy3E,EACTU,wBAAyB,kCACzBC,YAAY,GACZ,GACD,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAE,YAAEE,EAAc,GAAMe,EAASz9E,QAAUq8E,GAAcC,EAAKmB,EAASz9E,SAAW,CAAC,EACzGg+E,GAAMnC,EAAAA,GAAAA,KAAQoC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAAStC,EAAAA,GAAAA,KAAQoC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxCj9E,EAAAA,EAAAA,KAAU,KACR,MAAMm9E,GAAMH,EAAAA,GAAAA,IAAQ3B,GACd72E,EAAS,KAAGo2E,EAAAA,GAAAA,IAAQuC,KAK1B,GAHAd,EAAYc,EAAIjjE,KAAK,OACrBqiE,EAAY/3E,IAEPs3E,EAAc/8E,QAAS,CAC1B,MAAMq7E,GAAeM,EAAAA,GAAAA,IAAgByC,GACrCxD,EAAiB,CACf53C,MAAO63C,EAAS76E,QAChBs6E,gBAAYt9E,EACZknC,gBAAiBz+B,EACjB41E,gBAEJ,CACA0B,EAAc/8E,SAAU,CAAK,GAC5B,CAACs8E,EAAK1B,KAGT35E,EAAAA,EAAAA,KAAU,MA2GZ,SACEf,EACAg+E,EACAR,EACAD,GAEA,IAAIY,EACAC,EACAC,EAECb,EAAY19E,SAAYy9E,EAASz9E,SAWpCq+E,EAAIZ,EAASz9E,QAAQy8E,UAAUx8E,MAC/Bq+E,EAAIb,EAASz9E,QAAQy8E,UAAUn8E,OAC/Bi+E,EAAMb,EAAY19E,UAXlBq+E,EAAIn+E,EAAOirD,YACXmzB,EAAIp+E,EAAO7F,aACXkkF,EAAMr+E,EAAOG,WAAW,MAExBH,EAAOD,MAAQo+E,EACfn+E,EAAOI,OAASg+E,EAEhBZ,EAAY19E,QAAUu+E,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBJ,EAAGC,GAClCI,EAASF,EAAQ/vE,KACjBkwE,GAAMV,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAI9wE,EAAQ,EAEZ,IAAK,IAAI4Q,EAAI,EAAGA,EAAIsgE,EAAGtgE,IAAK,CAC1B,MAAM4gE,EAAO,EAAI5gE,GAAKsgE,EAAI,GACpBO,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAI7gE,EAAI,EAAGA,EAAIsgE,EAAGtgE,IAAK,CAC1B,MAAMghE,EAAOhhE,GAAKsgE,EAAI,GACtBK,EAAOtxE,KAAWyxE,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOtxE,KAAWyxE,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOtxE,KAAWyxE,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOtxE,KAAW,GACpB,CACF,CAEAmxE,EAAKS,aAAaR,EAAS,EAAG,EAChC,CAxJIS,CAAUpC,EAAe78E,QAAS1E,WAAiC4iF,EAAKR,EAAaD,EAAS,GAC7F,CAACS,KAGJj9E,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBf,GACf,MAAMm+E,EAAIn+E,EAAOirD,YAEjBjrD,EAAOD,MAAQo+E,EACfn+E,EAAOI,OAFG,EAGV,MAAMi+E,EAAMr+E,EAAOG,WAAW,MAExBm+E,EAAUD,EAAIE,gBAAgBJ,EAL1B,GAMJK,EAASF,EAAQ/vE,KAEvB,IAAIrB,EAAQ,EAEZ,IAAK,IAAI2Q,EAAI,EAAGA,EAAIsgE,EAAGtgE,IAAK,CAC1B,MAAMmgE,EAAMngE,GAAKsgE,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BQ,EAAOtxE,KAAWgxE,EAAI,GACtBM,EAAOtxE,KAAWgxE,EAAI,GACtBM,EAAOtxE,KAAWgxE,EAAI,GAEtBM,EAAOtxE,KAAW,GACpB,CAEAmxE,EAAIS,aAAaR,EAAS,EAAG,EAC/B,CA7KIU,CAAQpC,EAAa98E,QAAS1E,WAAgC,GAC7D,IAEH,MAAM6jF,GAAkB16E,EAAAA,EAAAA,KAAaqH,IACnC,MAAMszE,EAAWtzE,EAAEqN,cAAcrE,MAAMgqB,QAAQ,WAAY,IAAI6R,MAAM,EAAG,IAExE,GAAIyuC,EAASrkC,MAAM,mCAAoC,CACrD,MAAMqjC,EAAMgB,EAAS1hB,MAAM,KAAK94D,KAAKy6E,GAAYtlE,OAAOslE,EAAQ94C,UAChEy2C,GAAOd,EAAAA,GAAAA,IAAQkC,GACjB,CAEAtyE,EAAEqN,cAAcrE,MAAQsqE,CAAQ,GAC/B,IAEGE,GAAkB76E,EAAAA,EAAAA,KAAaqH,IACnC,MAAMyzE,EAAWzzE,EAAEqN,cAAcrE,MAAMgqB,QAAQ,gBAAiB,IAAI6R,MAAM,EAAG,GAEzE4uC,EAASxkC,MAAM,uBACjBiiC,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQoD,EAASzgD,QAAQ,IAAK,OAG/ChzB,EAAEqN,cAAcrE,MAAQyqE,CAAQ,GAC/B,IAEGC,GAA6B/6E,EAAAA,EAAAA,KAAaqH,IAC9CkxE,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQrwE,EAAEqN,cAAcsmE,QAAQh6E,MAAOq5B,QAAQ,IAAK,MAAM,GACxE,IAEGx5B,GAAYuG,EAAAA,GAAAA,GAChB,gEACAk7D,GAAc,eAQhB,OALA1nD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAWA,GACjCH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAK8E,IAAK4yE,EAAgBv3E,UAAU,gBAClCH,EAAAA,GAAAA,cAAA,eACAA,EAAAA,GAAAA,cAAA,OACEG,UAAU,SACV3K,MAAQ,wBAAuB6hF,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG74E,EAAAA,GAAAA,cAAA,OAAK8E,IAAK6yE,EAAcx3E,UAAU,cAChCH,EAAAA,GAAAA,cAAA,eACAA,EAAAA,GAAAA,cAAA,OACEG,UAAU,SACV3K,MAAQ,yBAAwB+hF,4BAAsCyB,QAG1Eh5E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CAAC9c,MAAOyoE,EAAUljD,MAAM,MAAMtlB,SAAUuqE,IAClDn6E,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CAAC9c,MAAOuoE,EAAUhjD,MAAM,MAAMtlB,SAAUoqE,MAGtDh6E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACZ82E,GAAkBx3E,KAAKa,GACtBN,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAe,mBAAoBpG,IAAW,IAAGu4E,IAAQ,cAAWhhF,GAC/E,aAAYyI,EACZ9K,MAAQ,qBAAoB8K,KAC5BE,QAAS65E,OAIX,K,4BCjNV,MA0NA,IAAe58E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL48E,6BAA8BzhF,QAAQ6E,EAAOqpE,SAASC,MAAMsT,8BAC5DC,8BAA+B1hF,QAAQ6E,EAAOqpE,SAASC,MAAMuT,+BAC7DC,sBAAuB3hF,QAAQ6E,EAAOqpE,SAASC,MAAMwT,uBACrDC,uBAAwB5hF,QAAQ6E,EAAOqpE,SAASC,MAAMyT,wBACtDC,0BAA2B7hF,QAAQ6E,EAAOqpE,SAASC,MAAM0T,2BACzDC,2BAA4B9hF,QAAQ6E,EAAOqpE,SAASC,MAAM2T,4BAC1DC,8BAA+B/hF,QAAQ6E,EAAOqpE,SAASC,MAAM4T,+BAC7DC,oBAAqBn9E,EAAOqpE,SAASC,MAAM6T,oBAC3CC,qBAAsBp9E,EAAOqpE,SAASC,MAAM8T,qBAC5CC,wBAAyBr9E,EAAOqpE,SAASC,MAAM+T,2BAZjCt9E,EA1NqCnG,IAanD,IAboD,SACxDyS,EAAQ,QACRirD,EAAO,6BACPslB,EAA4B,8BAC5BC,EAA6B,sBAC7BC,EAAqB,uBACrBC,EAAsB,0BACtBC,EAAyB,2BACzBC,EAA0B,8BAC1BC,EAA6B,qBAC7BE,EAAoB,oBACpBD,EAAmB,wBACnBE,GACDzjF,EACC,MAAM,yBACJ0jF,EAAwB,gCACxBC,EAA+B,2BAC/BC,EAA0B,8BAC1BC,IACEh8E,EAAAA,EAAAA,OAEJtD,EAAAA,EAAAA,KAAU,KACRm/E,GAA0B,GACzB,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAA4BC,EAAAA,GAAAA,MAC5BC,EAAmCF,KAA8BG,EAAAA,GAAAA,MAEjEC,GAAuBr8E,EAAAA,EAAAA,KAAY,CACvCqH,EACAi1E,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBrB,IACc,UAAbqB,EAAuBnB,EAAwBE,GAC/CoB,EAAyC,YAAbH,EAC9BpB,EACc,UAAboB,EAAuBlB,EAAyBE,EAErDO,EAA2B,CACzBS,cACgB,WAAZC,GAAwB,CAAE5wB,UAAWtkD,EAAEwV,OAAO8Y,QAAS+mD,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoBr1E,EAAEwV,OAAO8Y,QAASg2B,SAAU6wB,IACpF,GACD,CACDlB,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIc,GAA+B38E,EAAAA,EAAAA,KAAaqH,IAChD,MAAMy9B,EAAYz9B,EAAEwV,OAAO8Y,QAC3BmmD,EAA8B,CAC5BN,oBAAqB12C,MAChBA,GAAa,CAAE22C,sBAAsB,IAC1C,GACD,CAACK,IAEEc,GAAgC58E,EAAAA,EAAAA,KAAaqH,IACjDy0E,EAA8B,CAC5BL,qBAAsBp0E,EAAEwV,OAAO8Y,SAC/B,GACD,CAACmmD,IAEEe,GAAwC78E,EAAAA,EAAAA,KAAaqH,IACzDg1E,EAAqBh1E,EAAG,UAAW,SAAS,GAC3C,CAACg1E,IAEES,GAAkC98E,EAAAA,EAAAA,KAAaqH,IACnDg1E,EAAqBh1E,EAAG,UAAW,eAAe,GACjD,CAACg1E,IAEEU,GAAkC/8E,EAAAA,EAAAA,KAAaqH,IACnDg1E,EAAqBh1E,EAAG,QAAS,SAAS,GACzC,CAACg1E,IAEEW,GAA4Bh9E,EAAAA,EAAAA,KAAaqH,IAC7Cg1E,EAAqBh1E,EAAG,QAAS,eAAe,GAC/C,CAACg1E,IAEEY,GAAoCj9E,EAAAA,EAAAA,KAAaqH,IACrDg1E,EAAqBh1E,EAAG,YAAa,SAAS,GAC7C,CAACg1E,IAEEa,GAA8Bl9E,EAAAA,EAAAA,KAAaqH,IAC/Cg1E,EAAqBh1E,EAAG,YAAa,eAAe,GACnD,CAACg1E,IAEEc,GAAkCn9E,EAAAA,EAAAA,KAAaqH,IACnDu0E,EAAgC,CAC9BjwB,UAAWtkD,EAAEwV,OAAO8Y,SACpB,GACD,CAACimD,IAEE9mE,GAAqB9U,EAAAA,EAAAA,KAAayO,IACtCqtE,EAA8B,CAC5BJ,wBAAyBjtE,IAE3BstE,GAAa,KAAMqB,EAAAA,GAAAA,SAAgB7kF,EAAWkW,IAAQ,GACrD,CAACstE,EAAcD,IAEZt7E,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAW,qBAG1EmI,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAM,oBAENg+C,SAAUpzE,EAAKg7E,EAAsB,gCAAkC,kCACvE7lD,QAAS6lD,EACT3qE,UAAWorE,EACX3rE,SAAUqsE,IAEZj8E,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAM,wBACN/kB,UAAW2qE,IAAwBW,EAEnCvI,SAAUuI,EAAmC37E,EAAKi7E,EAAuB,gCAAkC,kCAAoC,gBAC/I9lD,QAAS8lD,EACTnrE,SAAUssE,IAEZl8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAACyP,GAAAA,EAAW,CACVylB,MAAM,QACN9X,IAAK,EACLT,IAAK,GACLxM,UAAWorE,EACX5rE,MAAOqrE,EACPprE,SAAUwE,MAIhBpU,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,6BAGRE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,gCAEZozE,SAAUpzE,EAAKy6E,EAA+B,gCAAkC,kCAChFtlD,QAASslD,EACT3qE,SAAUusE,IAEZn8E,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,kBACZqQ,UAAWoqE,EAEXrH,SAAUpzE,EAAK06E,EAAgC,gCAAkC,kCACjFvlD,QAASulD,EACT5qE,SAAUwsE,KAIdp8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,iBAEhFE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,0BACZozE,SAAUpzE,EAAK26E,EAAwB,gCAAkC,kCACzExlD,QAASwlD,EACT7qE,SAAUysE,IAEZr8E,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,kBACZqQ,UAAWsqE,EACXvH,SAAUpzE,EAAK46E,EAAyB,gCAAkC,kCAC1EzlD,QAASylD,EACT9qE,SAAU0sE,KAIdt8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,mBAEhFE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,4BAEZozE,SAAUpzE,EAAK66E,EAA4B,gCAAkC,kCAC7E1lD,QAAS0lD,EACT/qE,SAAU2sE,IAEZv8E,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,kBACZqQ,UAAWwqE,EAEXzH,SAAUpzE,EAAK86E,EAA6B,gCAAkC,kCAC9E3lD,QAAS2lD,EACThrE,SAAU4sE,KAIdx8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,eAEhFE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,iBACZm1B,QAAS4lD,EACTjrE,SAAU6sE,KAGV,KC+GV,IAAeh/E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEqpE,UACEC,OAAO,YACL0V,EAAW,mBAAEC,EAAkB,mBAAEC,EAAkB,kCAAEC,EAAiC,sBACtFC,GACD,QACDC,GACD,QACDC,EACAC,UAAU,YACRC,GACD,UACDzqC,GACE/0C,EAEJ,MAAO,CACLo+C,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GACjDg/E,cACAQ,YAAarkF,QAAQqkF,GACrBC,aAAcH,EAAQI,WACtBC,aAAc3/E,EAAO4/E,kBAAkBhf,cAAc/iE,OACrDohF,qBACAY,6BAA8B1kF,QAAQ45C,GAAW8qC,8BACjDV,oCACAD,qBACAY,mBAAoBT,EAAQzgD,YAC5BmhD,gBAAiBV,EAAQW,SACzBC,oBAAqBZ,EAAQa,aAC7BC,kBAAmBd,EAAQe,SAC3BC,qBAAsBhB,EAAQiB,cAC9BC,kBAAmBlB,EAAQmB,WAC3BC,iBAAkBpB,EAAQqB,UAC1BC,gBAAiBtB,EAAQuB,SACzBxB,wBACAyB,gBAAgBC,EAAAA,EAAAA,IAAqB9gF,GACtC,GArCeD,EA7T+BnG,IAuB7C,IAvB8C,SAClDyS,EAAQ,qBACR+xC,EAAoB,YACpB4gC,EAAW,YACXQ,EAAW,aACXC,EAAY,aACZE,EAAY,mBACZV,EAAkB,mBAClBC,EAAkB,6BAClBW,EAA4B,kCAC5BV,EAAiC,sBACjCC,EAAqB,mBACrBU,EAAkB,gBAClBC,EAAe,oBACfE,EAAmB,kBACnBE,EAAiB,qBACjBE,EAAoB,kBACpBE,EAAiB,iBACjBE,EAAgB,gBAChBE,EAAe,eACfjhB,EAAc,QACdpI,EAAO,eACPupB,GACDjnF,EACC,MAAM,oBACJmnF,EAAmB,oBACnBC,EAAmB,mBACnBlgB,EAAkB,oBAClBmgB,EAAmB,sBACnBC,EAAqB,0BACrBC,EAAyB,4BACzBC,EAA2B,sBAC3BC,EAAqB,iBACrB/uD,EAAgB,iBAChB83C,IACE3oE,EAAAA,EAAAA,OAEJtD,EAAAA,EAAAA,KAAU,KACR6iF,IACAlgB,IACAigB,IACAE,IACAI,GAAuB,GACtB,CAACL,EAAqBlgB,EAAoBigB,EAAqBE,EAAqBI,KAEvFljF,EAAAA,EAAAA,KAAU,KACJkO,GACF80E,GACF,GACC,CAAC90E,EAAU80E,IAEd,MAAMh/E,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMgqB,GAA6B3/E,EAAAA,EAAAA,KAAa8kC,IAC9C26C,EAA4B,CAC1BjC,kCAAmC14C,GACnC,GACD,CAAC26C,IAEEG,GAA2B5/E,EAAAA,EAAAA,KAAY,KACvCy8C,EACFshB,EAAeQ,EAAAA,GAAAA,sBAEf5tC,EAAiB,CACfv6B,QAASoK,EAAK,oCAElB,GACC,CAACi8C,EAAsBj8C,EAAMu9D,EAAgBptC,IAE1CkvD,GAA0B7/E,EAAAA,EAAAA,KAAakpE,IAC3CT,EAAiB,CACfgV,sBAAuBvU,GACvB,GACD,IAEG4W,GAA8B9/E,EAAAA,EAAAA,KAAakpE,IAC/CqW,EAAsBrW,EAAU,GAC/B,CAACqW,IAEJ,SAASQ,EAAmBxD,GAC1B,MAAM,WAAEyD,GAAezD,GAAW,CAAC,EAC7B0D,EAAa1D,EAAUA,EAAQ2D,aAAahkF,OAASqgF,EAAQ4D,aAAajkF,OAAS,EACnFkkF,EAAa7D,EAAUA,EAAQ8D,aAAankF,OAASqgF,EAAQ+D,aAAapkF,OAAS,EACnFqkF,EAAQ,GACVN,GAAYM,EAAMh8E,KAAM,IAAG07E,KAC3BG,GAAYG,EAAMh8E,KAAM,IAAG67E,KAE/B,MAAMI,EAAkBD,EAAMrkF,OAAU,IAAGqkF,EAAM7pE,KAAK,QAAU,GAEhE,OAAQspE,GACN,IAAK,YACH,MAAQ,GAAEx/E,EAAK,mBAAmBggF,IAEpC,IAAK,WACH,MAAQ,GAAEhgF,EAAK,kBAAkBggF,IAEnC,IAAK,SACH,MAAQ,GAAEhgF,EAAK,gBAAgBggF,IAIrC,CAEA,OACE9/E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,cAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,sBAE7B/9D,EAAK,gBACNE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCi9E,GAAgB,KAEjEoB,GACCx+E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,MACL2uD,QAAM,EAENjyD,QAASA,IAAM68D,EACb8f,EAActf,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,mBAGlD79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,aAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B/G,EAAKq9E,EAAc,aAAe,kBAK3Cn9E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OACL2uD,QAAM,EAENjyD,QAASA,IAAM68D,EACbsf,EAAc9e,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,wBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B/G,EAAK68E,EAAc,aAAe,kBAIxCW,EAAe,GACdt9E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,MAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,iBAE7B/9D,EAAK,+BACNE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCm9E,KAKtDt9E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,iBAErFE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,qBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,sBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmB5B,MAI1Bz9E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,kBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,kBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmB3B,MAI1B19E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,sBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,6BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBzB,MAI1B59E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,mBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,iBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBjB,MAI1Bp+E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,kBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,eAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBf,MAI1Bt+E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,oBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,yBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBvB,MAI1B99E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtiD,UAAW4rC,EACXgkC,oBAAkB,EAClBC,cAAejkC,GAAwB/7C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,8CACpDA,UAAU,UACVK,QAAS0+E,GAETl/E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,8BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBrB,MAI1Bh+E,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,UAAU,UAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,oBAE9B79D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,gBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bw4E,EAAmBnB,OAM3BV,GACCx9E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,4BAERE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,kBACZozE,SAAUpzE,EAAK,sBACfm1B,QAASn8B,QAAQgkF,GACjB1nD,QAAS6pD,KAKfj/E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,+BAERE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,gCACZm1B,QAASn8B,QAAQikF,GACjB3nD,QAAS+pD,KAIZtC,GACC78E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,iCAERE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,4CACZozE,SAAUpzE,EAAK,gCACfm1B,QAASn8B,QAAQ8jF,GACjBzsE,UAAW0sE,EACXznD,QAASgqD,KAIX,KCxMV,IAAe3hF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJsiF,EAAQ,UAAEC,EAAS,aAAEC,EAAY,eAAEC,GACjCziF,EAAOqpE,SAASC,MAEpB,MAAO,CACLvR,aAAc/3D,EAAO+3D,aACrBwqB,YACAD,WACAE,eACAC,iBACD,GAZe1iF,EA5HgCnG,IAS9C,IAT+C,SACnDyS,EAAQ,UACRk2E,EAAS,SACTD,EAAQ,aACRE,EAAY,eACZC,EAAc,aACd1qB,EAAY,eACZ2H,EAAc,QACdpI,GACD19D,EACC,MAAM,cACJ8oF,EAAa,eACbC,EAAc,iBACdvY,IACE3oE,EAAAA,EAAAA,OAEGmhF,EAAkBC,IAAuB56E,EAAAA,EAAAA,IAAiBq6E,IAC1DtmB,EAAW8mB,EAAeC,IAAmBn+E,EAAAA,EAAAA,KAE9CzC,GAAOC,EAAAA,EAAAA,MAEbjE,EAAAA,EAAAA,KAAU,KACJ45D,IAAiBwqB,GAAW1kF,QAC9B6kF,GACF,GACC,CAACH,EAAWxqB,EAAc2qB,IAE7B,MAAM/rC,GAAeh1C,EAAAA,EAAAA,KAAayyD,IAChCyuB,EAAoBzuB,GACpB0uB,KAEKE,EAAAA,GAAAA,IAAY5uB,GAAsB,KACrC2uB,IAEA3Y,EAAiB,CAAEkY,SAAUluB,IAE7BuuB,GAAgB,GAChB,GACD,CAACG,EAAeC,EAAiB3Y,EAAkBuY,IAEhDvxC,GAAU11C,EAAAA,EAAAA,KAAQ,IACf6mF,EAsEX,SAAsBA,GACpB,MAAMU,GAAmBxkF,OAAOykF,UAAUZ,UAAY,MAAMv0D,cACtDo1D,EAAgBF,EAAgBG,OAAO,EAAG,GAEhD,OAAOb,EAAUzgF,KAAIC,IAAA,IAAC,SAAEqyD,EAAQ,WAAEivB,EAAU,KAAE54E,GAAM1I,EAAA,MAAM,CACxDiQ,MAAOoiD,EACP78B,MAAO8rD,EACP9N,SAAU9qE,EACX,IAAG4lD,MAAMwK,IACDooB,GAAoBpoB,EAAE7oD,QAAUixE,GAAmBpoB,EAAE7oD,QAAUmxE,EAAsB,GAAJ,GAE5F,CAjFuBG,CAAaf,QAAaroF,GAC5C,CAACqoF,IAEEgB,GAA8B5hF,EAAAA,EAAAA,KAAa6hF,IAC/CpZ,EAAiB,CAAEoY,aAAcgB,GAAW,GAC3C,CAACpZ,IAEEqZ,GAAqB/nF,EAAAA,EAAAA,KAAQ,KACjC,GAAKgoF,EAAAA,IAA6BjB,EAAe5kF,OAIjD,OAA8B,IAA1B4kF,EAAe5kF,OACK,IAAIy2D,KAAKC,aAAa,CAAC+tB,GAAW,CAAEr+E,KAAM,aAC3CuwD,GAAGiuB,EAAe,IAGlCtgF,EAAK,YAAasgF,EAAe5kF,OAAO,GAC9C,CAAC4kF,EAAgBtgF,EAAMmgF,IAEpBqB,GAAwBhiF,EAAAA,EAAAA,KAAY,KACxC+9D,EAAeQ,EAAAA,GAAAA,eAA+B,GAC7C,CAACR,IAOJ,OALAnjD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oDACZkhF,EAAAA,IACCrhF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP70B,UAAU,OACV+0B,MAAOp1B,EAAK,uBACZm1B,QAASkrD,EACT/qD,QAAS8rD,IAEVf,GACCngF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPzsB,QAAS8gF,GAERxhF,EAAK,kBACNE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCihF,IAGpDphF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uCACVL,EAAK,kCAIZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,6BAA6BL,EAAK,mCAC/CivC,EACC/uC,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,oBACL2mC,QAASA,EACTmlC,SAAUqM,EACVgB,cAAe5nB,EAAY4mB,OAAmB1oF,EAC9C+X,SAAU0kC,IAGZt0C,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAGR,KCxIH,SAASm0D,GAAcC,GAC5B,OAAQA,GACN,KAAK5jB,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,MAAO,gBACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,aACT,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,MAAO,YACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WAIb,C,gBCvCA,MCqDA,IAAepgE,EAAAA,EAAAA,KAxCoBlG,IAG7B,IAH8B,SAClCqY,EAAQ,SACRosB,GACDzkC,EACC,MAAOmqF,EAAcC,IAAmB/7E,EAAAA,EAAAA,MAalCg8E,GAAmBtiF,EAAAA,EAAAA,KAAauiF,IACpCF,OAAgB9pF,GAChB+X,EAASiyE,EAAW,GACnB,CAACjyE,IAEEkyE,GAAmBxiF,EAAAA,EAAAA,KAAY,KACnCqiF,OAAgB9pF,EAAU,GACzB,IAEH,OACEmI,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLgO,SAxBN,SAA0BuO,GACxB,MAAMhC,EAASgC,EAAMhC,OAEhBA,GAAQwU,QAAQ,KAIrBgxD,EAAgBxlE,EAAOwU,MAAM,IAC7BxU,EAAOxM,MAAQ,GACjB,EAgBMoyE,OAAO,wBACPj9E,IAAKk3B,EACL77B,UD9CgB,yBCgDlBH,EAAAA,GAAAA,cAACgiF,GAAAA,EAAS,CAACC,KAAMP,EAAcziF,QAAS6iF,EAAkBlyE,SAAUgyE,IACnE,ICuDP,IAAenkF,EAAAA,EAAAA,KAjFyClG,IAIlD,IAJmD,YACvD08B,EAAW,uBACXiuD,EAAsB,yBACtBC,GACD5qF,EACC,MAAM,aACJ6qF,EAAY,mBAAEC,EAAkB,mBAAE1hF,EAAkB,iBAAEsvB,IACpD7wB,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAENuiF,EAAgCC,EAA8BC,IAAiCjgF,EAAAA,EAAAA,IAAQ,GAGxGy5B,GAAWthC,EAAAA,EAAAA,IAAyB,OAE1CoB,EAAAA,EAAAA,KAAU,KACHomF,GACHE,EAAa,CAAE30D,OAAQwG,EAAYn/B,IACrC,GACC,CAACotF,EAAwBjuD,EAAYn/B,GAAIstF,IAE5C,MAAMK,GAAmBnjF,EAAAA,EAAAA,KAAa2iF,IACpCI,EAAmB,CACjBJ,OACAS,YAAY,IAEdzyD,EAAiB,CACfv6B,QAASoK,EAAK,4CACd,GACD,CAACA,EAAMmwB,EAAkBoyD,IAEtBM,GAAsBrjF,EAAAA,EAAAA,KAAY,KACtCkjF,IACA7hF,EAAmB,CAAEhJ,MAAOwqF,GAA4B,GACvD,CAACK,EAA+B7hF,EAAoBwhF,IAEjDS,GAAyBtjF,EAAAA,EAAAA,KAAY,KACzC08B,EAASnhC,SAASgoF,OAAO,GACxB,IAEH,OACE7iF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,aACLtD,QAASoiF,GAET5iF,EAAAA,GAAAA,cAAC8iF,GAAY,CACXlzE,SAAU6yE,EACVzmD,SAAUA,IAEXl8B,EAAKqiF,EACF,yCACA,wCAELA,GACCniF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP8xC,YAAa/+D,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAACtqB,MAAOwqF,EAA0BlmF,KAAK,OAAOkE,UChFJ,yBDiF9DK,QAAS+hF,EACT98C,aAAW,GAEV3lC,EAAKqiF,EAAyBppF,QAC3B,yCACA,0CACJiH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQwjF,EACRrjF,QAASujF,EACTj9E,KAAMzF,EAAK,8BACXg0B,aAAch0B,EAAK,UACnBi0B,eAAgB4uD,EAChB98C,sBAAoB,KAI1B7lC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmC0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACvEiI,EAAK,yCAEJ,IEyIV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAC9BqjF,GADG,OAAEtB,GAAQ/hF,EAGjB,MACEiuB,OAASC,KAAM3D,GACf+8C,UAAU,QAAEgW,IACVr/E,EAEEs2B,GAAcz1B,EAAAA,EAAAA,IAAWb,EAAQA,EAAO4kB,eACxCoiD,GAAsB7hD,EAAAA,EAAAA,IAAmBnlB,EAAQA,EAAO4kB,eAE9D,OAAQk/D,GACN,KAAK5jB,EAAAA,GAAAA,mBACHklB,EAAkB/F,EAAQzgD,YAC1B,MAEF,KAAKshC,EAAAA,GAAAA,gBACHklB,EAAkB/F,EAAQW,SAC1B,MAEF,KAAK9f,EAAAA,GAAAA,oBACHklB,EAAkB/F,EAAQa,aAC1B,MAEF,KAAKhgB,EAAAA,GAAAA,iBACHklB,EAAkB/F,EAAQqB,UAC1B,MAEF,KAAKxgB,EAAAA,GAAAA,gBACHklB,EAAkB/F,EAAQuB,SAC1B,MAEF,KAAK1gB,EAAAA,GAAAA,kBACHklB,EAAkB/F,EAAQe,SAC1B,MAEF,KAAKlgB,EAAAA,GAAAA,qBACHklB,EAAkB/F,EAAQiB,cAC1B,MAEF,KAAKpgB,EAAAA,GAAAA,kBACHklB,EAAkB/F,EAAQmB,WAI9B,OAAK4E,EAQE,IACFA,EACH94D,YACAgK,cACAiuD,uBAAwBppF,QAAQ6rE,GAChCwd,yBAA0Bxd,GAAqB5hD,eAZxC,CACLkR,cACAiuD,uBAAwBppF,QAAQ6rE,GAChCwd,yBAA0Bxd,GAAqB5hD,cAUlD,GA5DerlB,EA7MyCnG,IAcvD,IAdwD,OAC5DkqF,EAAM,SACNz3E,EAAQ,eACRqzD,EAAc,QACdpI,EAAO,WACPqqB,EAAU,aACVM,EAAY,aACZD,EAAY,aACZF,EAAY,aACZD,EAAY,UACZv1D,EAAS,YACTgK,EAAW,uBACXiuD,EAAsB,yBACtBC,GACD5qF,EACC,MAAM,qBAAEyrF,IAAyB5jF,EAAAA,EAAAA,MAE3BU,GAAOC,EAAAA,EAAAA,KAEPkjF,GAAoB5pF,EAAAA,EAAAA,KAAQ,IACzB,CACL,CAAEsW,MAAO,YAAaulB,MAAOp1B,EAAK,iBAClC,CAAE6P,MAAO,WAAYulB,MAAOp1B,EAAK,gBACjC,CAAE6P,MAAO,SAAUulB,MAAOp1B,EAAK,gBAEhC,CAACA,IAEEojF,EAAiB,CACrBC,iBAAiC,WAAf7D,EAClB8D,kBAAkC,cAAf9D,GAGf+D,EAAa7B,GAAcC,GAE3B6B,GAAajqF,EAAAA,EAAAA,KAAQ,KACzB,OAAQooF,GACN,KAAK5jB,EAAAA,GAAAA,mBACH,OAAO/9D,EAAK,qBACd,KAAK+9D,EAAAA,GAAAA,gBACH,OAAO/9D,EAAK,iBACd,KAAK+9D,EAAAA,GAAAA,oBACH,OAAO/9D,EAAK,4BACd,KAAK+9D,EAAAA,GAAAA,kBACH,OAAO/9D,EAAK,wBACd,KAAK+9D,EAAAA,GAAAA,qBACH,OAAO/9D,EAAK,6BACd,KAAK+9D,EAAAA,GAAAA,kBACH,OAAO/9D,EAAK,eACd,KAAK+9D,EAAAA,GAAAA,iBACH,OAAO/9D,EAAK,gBACd,KAAK+9D,EAAAA,GAAAA,gBACH,OAAO/9D,EAAK,cACd,QACE,OAAiB,GAEpB,CAACA,EAAM2hF,KAEVvnE,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM9L,GAAkB9vD,EAAAA,EAAAA,KAAQ,KAC9B,GAAQooF,IACD5jB,EAAAA,GAAAA,gBACH,OAAO/9D,EAAK,aAEK,GAEpB,CAACA,EAAM2hF,IAEJ8B,EAAwB,MAC5B,OAAQ9B,GACN,KAAK5jB,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,oCACT,QACE,OAAOA,EAAAA,GAAAA,iCAEZ,EAnB6B,GAqBxB2lB,EAAuB,MAC3B,OAAQ/B,GACN,KAAK5jB,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,mCACT,QACE,OAAOA,EAAAA,GAAAA,gCAEZ,EAnB4B,GAqBvB4lB,GAAepqF,EAAAA,EAAAA,KAAQ,IACtBumF,GAAiBD,GAAiB11D,EAIhC01D,EAAa/zD,QAAO,CAACriB,EAAQnL,IAC3BmL,GAAU0gB,EAAU7rB,GAAU6rB,EAAU7rB,GAAQslF,aAAgB,IACtE9D,EAAapkF,QALP,GAMR,CAACmkF,EAAcC,EAAc31D,IAE1Bs1D,GAAalmF,EAAAA,EAAAA,KAAQ,IACpBomF,GAAiBD,GAAiBv1D,EAIhCu1D,EAAa5zD,QAAO,CAACriB,EAAQnL,IAC3BmL,GAAU0gB,EAAU7rB,GAAU6rB,EAAU7rB,GAAQslF,aAAgB,IACtEjE,EAAajkF,QALP,GAMR,CAACgkF,EAAcC,EAAcx1D,IAE1B05D,GAAyBrkF,EAAAA,EAAAA,KAAaqQ,IAC1CqzE,EAAqB,CACnBK,WAAYA,EACZ/D,WAAY3vE,GACZ,GACD,CAAC0zE,EAAYL,IAEhB,OACEhjF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYyrF,GAE3EtjF,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAO,cAAai7E,IACpBt0C,QAASk0C,EACTrzE,SAAU+zE,EACVzP,SAAUoL,IAGXn2B,GACCnpD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmC0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYsxD,IAI1FnpD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAYiI,EAAK,sBAEpFojF,EAAeE,mBACdpjF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACN3uD,KAAK,WAELtD,QAASA,KACP68D,EAAekmB,EAAsB,GAGvCvjF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZsjF,EAAe,GAAKzjF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,OAAO0G,IAAI,QAAO,IAAE48E,GACzDzjF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,gBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,wBAItCojF,EAAeC,kBACdnjF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACN3uD,KAAK,cAELtD,QAASA,KACP68D,EAAemmB,EAAqB,GAGtCxjF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZo/E,EAAa,GAAKv/E,EAAAA,GAAAA,cAAA,QAAMG,UAAU,OAAO0G,IAAI,QAAO,IAAQ04E,GAC7Dv/E,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,eAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,yBAMxC2hF,IAAW5jB,EAAAA,GAAAA,qBAAuCqlB,EAAeE,mBAChEpjF,EAAAA,GAAAA,cAAC4jF,GAAiC,CAChC3vD,YAAaA,EACbiuD,uBAAwBA,EACxBC,yBAA0BA,IAG1B,KCxOK,SAAS0B,GAAeC,GACrC,MAAMC,EAAWD,EAAQC,SAASr4D,cAC5Bs4D,EAASF,EAAQG,YAAYv4D,cAC7Bw4D,EAAgBJ,EAAQI,cAAcx4D,cAE5C,OAAIs4D,EAAOjvF,SAAS,QACX,OAGLivF,EAAOjvF,SAAS,YAAcivF,EAAOjvF,SAAS,cACzC,SAELivF,EAAOjvF,SAAS,SACX,QAELivF,EAAOjvF,SAAS,WACX,UAELivF,EAAOjvF,SAAS,UACX,SAELivF,EAAOjvF,SAAS,WACX,UAELivF,EAAOjvF,SAAS,SACX,QAELivF,EAAOjvF,SAAS,kBACX,UAELgvF,EAAShvF,SAAS,WACb,UAGPivF,EAAOjvF,SAAS,WACbivF,EAAOjvF,SAAS,SAChBgvF,EAAShvF,SAAS,QAClBgvF,EAAShvF,SAAS,UAClBmvF,EAAcnvF,SAAS,SAEnB,QAELgvF,EAAShvF,SAAS,WAAamvF,EAAcnvF,SAAS,UACjD,SAELgvF,EAAShvF,SAAS,UAAYmvF,EAAcnvF,SAAS,SAChD,QAELgvF,EAAShvF,SAAS,YAAcmvF,EAAcnvF,SAAS,WAClD,UAGF,SACT,C,gBCtDA,UAAgB,sBAAwB,uBAAuB,sBAAwB,uBAAuB,WAAa,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,MAAQ,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,IAAM,uBAAuB,aAAe,uBAAuB,WAAa,uBAAuB,aAAe,wBCwIzmD,IAAe0I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAM+B,KAAe,IAAb,KAAEsyB,GAAMtyB,EACxD,MAAO,CACLokF,QAAS9xD,EAAOr0B,EAAO2gE,eAAe6lB,OAAOnyD,QAAQn6B,EACtD,GAHiB6F,EA5GqCnG,IAEnD,IAFoD,OACxDuH,EAAM,QAAEglF,EAAO,QAAE7kF,GAClB1H,EACC,MAAM,sBAAE6sF,EAAqB,uBAAEC,IAA2BjlF,EAAAA,EAAAA,MACpDU,GAAOC,EAAAA,EAAAA,KAEPukF,GAAmB50D,EAAAA,GAAAA,GAAiBo0D,GAAS,GAE7CS,GAA+BjlF,EAAAA,EAAAA,KAAY,KAC/C8kF,EAAsB,CACpBpyD,KAAM8xD,EAAS9xD,KACfwyD,uBAAwBV,EAASU,uBACjC,GACD,CAACJ,EAAuBN,IAErBW,GAAyBnlF,EAAAA,EAAAA,KAAY,KACzC8kF,EAAsB,CACpBpyD,KAAM8xD,EAAS9xD,KACf0yD,iBAAkBZ,EAASY,iBAC3B,GACD,CAACN,EAAuBN,IAErBa,GAA8BrlF,EAAAA,EAAAA,KAAY,KAC9C+kF,EAAuB,CAAEryD,KAAM8xD,EAAS9xD,OACxC/yB,GAAS,GACR,CAACA,EAAS6kF,EAASO,IAEtB,GAAKC,EAqBL,OACEtkF,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJuyB,OAjBAxyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChEmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAWzD,EAAK,SAAUU,QAASvB,GAClFe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,yBACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNE,QAASmkF,EACTxkF,WAAWuG,EAAAA,GAAAA,GAAe,sBAAuBrR,GAAAA,eAEhDyK,EAAK,qCAQVhB,OAAQA,EACRgnC,gBAAc,EACd7mC,QAASA,EACTkB,UAAW9K,GAAAA,uBAEX2K,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GACdrR,GAAAA,WACAivF,GAAoBjvF,GAAQ,eAAcwuF,GAAeS,SAG3DtkF,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,GAAAA,MAAcwR,IAAI,QAAQy9E,GAAkBL,aAC3DjkF,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,KAAa,aAAYyK,EAAK,8BAC3C8kF,EAAAA,GAAAA,IAAqD,IAA9BN,EAAiBO,WAAmB/kF,EAAKw5B,OAGnEt5B,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,GAAAA,KACb2K,EAAAA,GAAAA,cAAA,UAAKF,EAAK,uBACVE,EAAAA,GAAAA,cAAA,UACGskF,GAAkBQ,QAAQ,IAAER,GAAkBS,WAAW,IAAE,IAC3DT,GAAkBP,SAAS,IAAEO,GAAkBJ,eAGlDlkF,EAAAA,GAAAA,cAAA,UAAKF,EAAK,sBACVE,EAAAA,GAAAA,cAAA,UAAKskF,GAAkBU,IAEvBhlF,EAAAA,GAAAA,cAAA,UAAKF,EAAK,4BACVE,EAAAA,GAAAA,cAAA,UAAKskF,GA2Bb,SAAqBR,GACnB,MAAO,CAACA,EAAQmB,OAAQnB,EAAQoB,SAAS32D,OAAOz1B,SAASkd,KAAK,KAChE,CA7BiCmvE,CAAYb,KAGvCtkF,EAAAA,GAAAA,cAAA,KAAGG,UAAW9K,GAAAA,MAAcyK,EAAK,0BAEjCE,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,GAAAA,cAAsByK,EAAK,kCAE1CE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACzsB,QAAS+jF,GACjBvkF,EAAAA,GAAAA,cAAA,QAAMG,UAAW9K,GAAAA,YAAoByK,EAAK,iCAC1CE,EAAAA,GAAAA,cAAColF,GAAAA,EAAQ,CACPtwF,GAAG,iBACHogC,MAAM,KACND,QAASqvD,EAAiBE,yBAG9BxkF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACzsB,QAASikF,GACjBzkF,EAAAA,GAAAA,cAAA,QAAMG,UAAW9K,GAAAA,YAAoByK,EAAK,gCAC1CE,EAAAA,GAAAA,cAAColF,GAAAA,EAAQ,CACPtwF,GAAG,eACHogC,MAAM,KACND,QAASqvD,EAAiBI,mBAGxB,KCgIZ,SAASS,GAAYrB,GACnB,MAAO,CAACA,EAAQmB,OAAQnB,EAAQoB,SAAS32D,OAAOz1B,SAASkd,KAAK,KAChE,CAEA,UAAevY,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,GAAuBA,EAAO2gE,gBADb5gE,EApOsCnG,IAMpD,IANqD,SACzDyS,EAAQ,QACRirD,EAAO,OACPkvB,EAAM,cACN5lB,EAAa,QACb8mB,GACD9tF,EACC,MAAM,uBACJ8sF,EAAsB,2BACtBiB,EAA0B,iBAC1BC,IACEnmF,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACNylF,EAAiCC,EAA+BC,IAAkCnjF,EAAAA,EAAAA,MAClGojF,EAAmBC,IAAwBhgF,EAAAA,EAAAA,OAC3C8rB,EAAaC,EAAWC,IAAcrvB,EAAAA,EAAAA,KAEvCsjF,GAAqBxsF,EAAAA,EAAAA,KAAQ,KAGjC,QAAgBxB,IAAZwtF,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,CAIgB,GACf,CAACA,IAEES,GAAyBzsF,EAAAA,EAAAA,KAAQ,KACrC,MAAM01C,EAAU,CAAC,CACf7Z,MAAOp1B,EAAK,QAAS,EAAG,KACxB6P,MAAO,KACN,CACDulB,MAAOp1B,EAAK,SAAU,EAAG,KACzB6P,MAAO,MACN,CACDulB,MAAOp1B,EAAK,SAAU,EAAG,KACzB6P,MAAO,MACN,CACDulB,MAAOp1B,EAAK,SAAU,EAAG,KACzB6P,MAAO,QAQT,OANI01E,GAAWA,GAAW,KACxBt2C,EAAQlrC,KAAK,CACXqxB,MAAOp1B,EAAK,QAAS,EAAG,KACxB6P,MAAO,QAGJo/B,CAAO,GACb,CAACjvC,EAAMulF,IAEJV,GAA8BrlF,EAAAA,EAAAA,KAAa0yB,IAC/CqyD,EAAuB,CAAEryD,QAAO,GAC/B,CAACqyD,IAEE0B,GAA6BzmF,EAAAA,EAAAA,KAAY,KAC7ComF,IACAJ,GAA4B,GAC3B,CAACI,EAAgCJ,IAE9BU,GAAyB1mF,EAAAA,EAAAA,KAAa0yB,IAC1C4zD,EAAqB5zD,GACrBL,GAAW,GACV,CAACA,IAEEs0D,GAA0B3mF,EAAAA,EAAAA,KAAY,KAC1CsmF,OAAqB/tF,GACrB+5B,GAAY,GACX,CAACA,IAEEs0D,GAAyB5mF,EAAAA,EAAAA,KAAaqQ,IAC1C41E,EAAiB,CAAEY,KAAMvxE,OAAOjF,IAAS,GACxC,CAAC41E,IAEEa,GAAiB/sF,EAAAA,EAAAA,KAAQ,KAC7B,MAAMgtF,EAAqB9nB,EAAcvvB,MAAMhd,GAASmyD,EAAOnyD,GAAMs0D,YAErE,OAAOD,EAAqBlC,EAAOkC,QAAsBxuF,CAAS,GACjE,CAACssF,EAAQ5lB,IAENgoB,GAAqBltF,EAAAA,EAAAA,KAAQ,IAC1BklE,EAAchwC,QAAQyD,IAAUmyD,EAAOnyD,GAAMs0D,aACnD,CAACnC,EAAQ5lB,IACNioB,EAAmB1tF,QAAQytF,EAAmB/qF,QAoGpD,OAlGA0e,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAiGRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yDACZimF,IA/FyBtC,EA+FcsC,EA7FxCpmF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,gCAGRE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACwlC,QAAM,EAACgY,UAAQ,EAAC3mE,KAAO,UAAS+/E,GAAeC,kBACvD9jF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBAAsB0G,IAAI,QACvC7G,EAAAA,GAAAA,cAAA,QAAMG,UAAU,QAAQ0G,IAAI,QAAQi9E,EAAQG,aAC5CjkF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,wBACb2jF,EAAQgB,QAAQ,IAAEhB,EAAQiB,WAAW,KAAGjB,EAAQC,SAAS,IAAED,EAAQI,eAEtElkF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY2jF,EAAQkB,GAAG,MAAIG,GAAYrB,MAI1D0C,GACCxmF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,2BACV2D,KAAK,OACL0L,QAAM,EACNijD,QAAM,EACNjyD,QAASilF,GAER3lF,EAAK,2BAuEX0mF,IAhEwBC,EAgEgBF,EA9DzCvmF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,kBAGP2mF,EAAchnF,KAuBrB,SAAuBinF,GACrB,MAAM5C,EAAUK,EAAOuC,GAEvB,OACE1mF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKu/E,EAAQ9xD,KACbxiB,QAAM,EACNijD,QAAM,EACN6B,eAAgB,CAAC,CACfl0D,MAAO,YACP0D,KAAM,OACN2hC,aAAa,EACb0+B,QAASA,KACPwgB,EAA4Bb,EAAQ9xD,KAAK,IAG7CluB,KAAO,UAAS+/E,GAAeC,iBAC/BtjF,QAASA,KAAQwlF,EAAuBlC,EAAQ9xD,KAAK,GAErDhyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCAAgC0G,IAAI,QACjD7G,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ+1D,EAAAA,GAAAA,IAAoBp2D,EAA2B,IAArBgkF,EAAQe,aAC1D7kF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAS2jF,EAAQG,aACjCjkF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,wBACb2jF,EAAQgB,QAAQ,IAAEhB,EAAQiB,WAAW,KAAGjB,EAAQC,SAAS,IAAED,EAAQI,eAEtElkF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY2jF,EAAQkB,GAAG,IAAEG,GAAYrB,KAI7D,MA7CI9jF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,8BAGRE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,kBACTE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,cACL2mC,QAAS+2C,EACT5R,SAAU2R,EACVj2E,SAAUs2E,KA0CbM,GACCxmF,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQ0mF,EACRvmF,QAASymF,EACTngF,KAAMzF,EAAK,sBACXg0B,aAAch0B,EAAK,wBACnBi0B,eAAgBgyD,EAChBlgD,sBAAoB,EACpB8gD,oBAAkB,IAGtB3mF,EAAAA,GAAAA,cAAC4mF,GAAqB,CAAC9nF,OAAQ4yB,EAAaM,KAAM2zD,EAAmB1mF,QAASgnF,KA7ElF,IAA6BQ,EAhCC3C,CA8GtB,KC5PV,GAAoH,uBCqGpH,IAAermF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAM+B,KAA2B,IAAzB,KAAEsyB,GAAMtyB,EACxD,MAAMokF,EAAU9xD,EAAOr0B,EAAO4/E,kBAAkB4G,OAAOnyD,QAAQn6B,EAG/D,MAAO,CACLisF,UACA/yD,IAJU+yD,EAAUnmF,EAAOqxB,MAAMpB,KAAKk2D,EAAQnvD,YAAS98B,EAKxD,GAPiB6F,EAzEqCnG,IAKnD,IALoD,OACxDuH,EAAM,QACNglF,EAAO,IACP/yD,EAAG,QACH9xB,GACD1H,EACC,MAAM,0BAAEsvF,IAA8BznF,EAAAA,EAAAA,MAChCU,GAAOC,EAAAA,EAAAA,KAEPukF,GAAmB50D,EAAAA,GAAAA,GAAiBo0D,GAAS,GAC7Cn9C,GAAejX,EAAAA,GAAAA,GAAiBqB,GAAK,GAErC4zD,GAA8BrlF,EAAAA,EAAAA,KAAY,KAC9CunF,EAA0B,CAAE70D,KAAM8xD,EAAS9xD,OAC3C/yB,GAAS,GACR,CAACA,EAAS6kF,EAAS+C,IAEtB,GAAKvC,EAqBL,OACEtkF,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJuyB,OAjBAxyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChEmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAWzD,EAAK,SAAUU,QAASvB,GAClFe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,qBACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNE,QAASmkF,EACTxkF,WAAWuG,EAAAA,GAAAA,GAAe,sBD3DgV,yBC6DzW5G,EAAK,yBAQVhB,OAAQA,EACRgnC,gBAAc,EACd7mC,QAASA,EACTkB,UDxEiB,wBC0EjBH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACL9hB,UD3E+C,uBC4E/C+hB,KAAMykB,EACN1qC,KAAK,UAEN0qC,GAAgB3mC,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAAC5vD,UD/EgD,uBC+EvB6vD,KAAMrpB,IAC/D3mC,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACbivF,GAAkB5vD,QAGrB10B,EAAAA,GAAAA,cAAA,MAAIG,UDpFuI,wBCqFzIH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,8BACVE,EAAAA,GAAAA,cAAA,UACGskF,GAAkBwC,SAGrB9mF,EAAAA,GAAAA,cAAA,UAAKF,EAAK,sBACVE,EAAAA,GAAAA,cAAA,UAAKskF,GAAkBU,IAEvBhlF,EAAAA,GAAAA,cAAA,UAAKF,EAAK,4BACVE,EAAAA,GAAAA,cAAA,UAAKskF,GAAkBW,SAEzBjlF,EAAAA,GAAAA,cAAA,KAAGG,UAAW9K,IAAcyK,EAAK,mCAC3B,KCjGZ,IAAgB,OAAS,uBAAuB,aAAa,uBAAuB,UAAY,wBC4JhG,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEwmF,EAAM,cAAE5lB,GAAkB5gE,EAAO4/E,kBACzC,MAAO,CACL4G,SACA5lB,gBACD,GANe7gE,EA5HsCnG,IAKpD,IALqD,SACzDyS,EAAQ,OACRm6E,EAAM,cACN5lB,EAAa,QACbtJ,GACD19D,EACC,MAAM,0BACJsvF,EAAyB,8BACzBE,IACE3nF,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACNylF,EAAiCC,EAA+BC,IAAkCnjF,EAAAA,EAAAA,MAClGykF,EAAmBC,IAAwBrhF,EAAAA,EAAAA,OAC3C8rB,EAAaC,EAAWC,IAAcrvB,EAAAA,EAAAA,KAEvC2kF,GAA2B5nF,EAAAA,EAAAA,KAAa0yB,IAC5C60D,EAA0B,CAAE70D,QAAO,GAClC,CAAC60D,IAEEM,GAAyB7nF,EAAAA,EAAAA,KAAY,KACzComF,IACAqB,GAA+B,GAC9B,CAACrB,EAAgCqB,IAE9Bf,GAAyB1mF,EAAAA,EAAAA,KAAa0yB,IAC1Ci1D,EAAqBj1D,GACrBL,GAAW,GACV,CAACA,IAEEy1D,GAA0B9nF,EAAAA,EAAAA,KAAY,KAC1C2nF,OAAqBpvF,GACrB+5B,GAAY,GACX,CAACA,IAcJ,IAAwB60D,EA6CxB,IAxDA3qF,EAAAA,EAAAA,KAAU,KACHyiE,EAAc/iE,QACjBy5D,GACF,GACC,CAACA,EAASsJ,KAEbrkD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAgDLsJ,EAAc/iE,OAEnB,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,2BACV2D,KAAK,OACL0L,QAAM,EACNijD,QAAM,EACNjyD,QAASilF,GAER3lF,EAAK,oCAERE,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,4BAA6BrR,GAAAA,YACvDyK,EAAK,gCA5DU2mF,EA+DJloB,EA7DhBv+D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjEiI,EAAK,qBAGP2mF,EAAchnF,KAKrB,SAAuBinF,GACrB,MAAM5C,EAAUK,EAAOuC,GACjB31D,GAAMjC,EAAAA,EAAAA,MAAYE,MAAMpB,KAAKk2D,EAAQnvD,OAE3C,OACE30B,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKu/E,EAAQ9xD,KACbxiB,QAAM,EACNijD,QAAM,EACN6B,eAAgB,CAAC,CACfl0D,MAAO,YACP0D,KAAM,OACN2hC,aAAa,EACb0+B,QAASA,KACP+iB,EAAyBpD,EAAQ9xD,KAAK,IAI1CxxB,QAASA,IAAMwlF,EAAuBlC,EAAQ9xD,OAE9ChyB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAC9hB,UAAW9K,GAAAA,OAAe6sB,KAAM6O,EAAK90B,KAAK,SAClD+D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCAAgC0G,IAAI,QACjD7G,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ+1D,EAAAA,GAAAA,IAAoBp2D,EAA2B,IAArBgkF,EAAQe,aACzD9zD,GAAO/wB,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAAC5vD,UAAW9K,GAAAA,MAAc26D,KAAMj/B,IACtD/wB,EAAAA,GAAAA,cAAA,QAAMG,WAAWuG,EAAAA,GAAAA,GAAe,WAAY,QAAS,QAASrR,GAAAA,WAC3DyuF,EAAQpvD,OAAO,KAAGovD,EAAQgD,QAAQ,KAAGhD,EAAQC,UAEhD/jF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY2jF,EAAQkB,GAAG,IAAElB,EAAQmB,SAIzD,MAqBIjlF,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQ0mF,EACRvmF,QAASymF,EACTtlF,MAAON,EAAK,mCACZyF,KAAMzF,EAAK,yBACXi0B,eAAgBozD,EAChBthD,sBAAoB,IAEtB7lC,EAAAA,GAAAA,cAACqnF,GAAqB,CAACvoF,OAAQ4yB,EAAaM,KAAMg1D,EAAmB/nF,QAASmoF,IAC1E,KCjEV,IAAe3pF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEqxB,OACEpB,KAAMmB,GAERkuD,SACEtuD,IAAK24D,GACN,YACDj5D,EAAW,cACX9L,GACE5kB,EAEJ,MAAO,CACLoxB,YACAu4D,aACAl5D,WAAYC,GAAaC,QACzBuoC,iBAAiBxgD,EAAAA,EAAAA,IAAe1Y,GAAQ4pF,WAAWlwB,aACnD90C,gBACD,GAnBe7kB,EA5D8BnG,IAQ5C,IAR6C,UACjDw3B,EAAS,WACTu4D,EAAU,WACVl5D,EAAU,gBACVyoC,EAAe,cACft0C,EAAa,OACbzjB,EAAM,QACNG,GACD1H,EACC,MAAM,mBACJiwF,EAAkB,aAClBC,IACEroF,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACNmqB,EAAQwE,IAAa9oB,EAAAA,EAAAA,IAAS,KAErC9J,EAAAA,EAAAA,KAAU,KACR0rF,EAAmB,CAAE3lD,MAAO3X,GAAS,GACpC,CAACA,EAAQs9D,IAEZ,MAAME,GAAqBruF,EAAAA,EAAAA,KAAQ,KACjC,MAAMsuF,GAAsB94D,EAAAA,GAAAA,IAAO,IAC7BT,GAAc,MACdyoC,GAAmB,IACvBtoC,QAAQq5D,GACDA,IAAcrlE,IAAkB+kE,EAAWvyF,SAAS6yF,MAG7D,OAAOr4D,EAAAA,EAAAA,IAAkBo4D,EAAqB54D,EAAW7E,GACtD8jC,MAAK,CAAC65B,EAASC,KACd,MAAM7rD,GAAY9G,EAAAA,EAAAA,IAAgBpG,EAAU84D,KAAa,GACnDE,GAAa5yD,EAAAA,EAAAA,IAAgBpG,EAAU+4D,KAAc,GAE3D,OAAO7rD,EAAU+rD,cAAcD,EAAW,GAC1C,GACH,CAACT,EAAYl5D,EAAY7L,EAAe2H,EAAQ2sC,EAAiB9nC,IAE9Dk5D,GAAmB3oF,EAAAA,EAAAA,KAAamuB,IACpC,MAAQ34B,GAAI8yF,EAAS,WAAEvoC,GAAetwB,EAAUtB,IAAW,CAAC,EACvDm6D,GAAcvoC,IAGnBooC,EAAa,CAAEG,YAAWvoC,eAC1BpgD,IAAS,GACR,CAACwoF,EAAcxoF,EAAS8vB,IAE3B,OACE/uB,EAAAA,GAAAA,cAAC2vB,GAAgB,CACf7wB,OAAQA,EACRkrB,cAAe09D,EACfv9D,kBAAmBrqB,EAAK,0BACxBoqB,OAAQA,EACRG,eAAgBqE,EAChBpE,mBAAoB29D,EACpBhpF,QAASA,GACT,KCiEN,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEgwB,OACEC,KAAMs6D,GAERl5D,OACEpB,KAAMu6D,GAERlL,SAAS,IACPtuD,GAEF0M,aACEC,WAAYF,IAEZz9B,EAEJ,MAAO,CACLuqF,aACAC,aACAb,WAAY34D,EACZyM,gBACD,GAtBe19B,EApH2CnG,IAOzD,IAP0D,SAC9DyS,EAAQ,QACRirD,EAAO,WACPizB,EAAU,WACVC,EAAU,WACVb,EAAU,cACVlsD,GACD7jC,EACC,MAAM,eAAE6wF,IAAmBhpF,EAAAA,EAAAA,MAErBU,GAAOC,EAAAA,EAAAA,MACNsoF,EAAsBC,EAAoBC,IAAuBhmF,EAAAA,EAAAA,KAClEimF,GAAqBlpF,EAAAA,EAAAA,KAAasoF,IACtCQ,EAAe,CAAER,aAAY,GAC5B,CAACQ,KAEJluE,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMwzB,GAAuBpvF,EAAAA,EAAAA,KAAQ,IAC5BiuF,EAAW17D,QAAO,CAACC,EAAK+7D,KAC7B,MACM1lE,GADY5jB,EAAAA,EAAAA,IAASspF,GACFO,EAAWP,QAAa/vF,EAC3C6wF,EAAexmE,IAASA,EAAKqa,cAAeosD,EAAAA,EAAAA,IAAgBzmE,GAMlE,OAJIwmE,IACF78D,EAAI+7D,GAAac,GAGZ78D,CAAG,GACT,CAAC,IACH,CAACy7D,EAAYa,IA8ChB,OACEnoF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,6CAA6C0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjFiI,EAAK,sBAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACZmnF,GAAY9rF,OACXwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACZmnF,EAAY7nF,KAAI,CAACmoF,EAAWtjE,IAxDzC,SAAuBsjE,EAAmBtjE,EAAW6G,GACnD,MAAMy9D,GAAYtqF,EAAAA,EAAAA,IAASspF,GACrB1lE,EAAO0mE,EAAYT,EAAWP,QAAa/vF,EAC3CqG,EAAQ0qF,OAAoC/wF,EAAxBqwF,EAAWN,GAC/BiB,EAAa3mE,GAAQhkB,EAErBiC,GAAYuG,EAAAA,GAAAA,GAChB,wDACAkiF,EAAY,UAAY,SAGpBE,EAAmBL,EAAqBb,GAE9C,OACE5nF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAM,WAAUqjF,IAChBznF,UAAWA,EACXqP,QAAM,EACNijD,QAAM,EACN6B,eAAgB,CAAC,CACfl0D,MAAO,UACP0D,KAAM,SACNqgE,QAASA,KACPqkB,EAAmBZ,EAAU,IAGjCpyF,MAAQ,SA8B6D,EA9BpC8uB,GAAK0I,EAAAA,UAEtChtB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,SACLimB,KAAMA,EACNhkB,KAAMA,IAER8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe0G,IAAI,QAC/BgiF,GAAc7oF,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAACC,KAAM64B,IACnC3mE,GAAMqa,aACLv8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBAAgB0G,IAAI,SAAQo2B,EAAAA,GAAAA,IAA0B7B,EAAelZ,EAAKqa,cAE1FusD,GAAqB9oF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmB0G,IAAI,QAAO,IAAEiiF,IAI7E,CAc+CC,CAAcnB,EAAWtjE,MAE5DgjE,IAAeA,EAAW9rF,OAC5BwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAa0G,IAAI,QAAQ/G,EAAK,cAE7CE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,CAAC9oB,IAAI,cAKnBvE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,SAAO,EACP1vB,QAAS8nF,EACT/kF,UAAWzD,EAAK,iBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAEfH,EAAAA,GAAAA,cAACgpF,GAAc,CACblqF,OAAQupF,EACRppF,QAASspF,IAEP,K,eC5HV,MAoDA,IAAe9qF,EAAAA,EAAAA,KApD4BlG,IAErC,IAFsC,SAC1CyS,EAAQ,QAAEirD,EAAO,eAAEoI,GACpB9lE,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACs7C,GAAAA,EAAuB,CACtBvQ,OAAQs/B,GAAAA,EAAAA,KACR4e,WAAYC,GACZjtF,KAAM,IACNkE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,SAC/CpG,EAAAA,GAAAA,GAAWX,EAAK,uBAAwB,CAAC,SAI9CE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,6BAE7B/9D,EAAK,mBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,eAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,eAE7B/9D,EAAK,oBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,QAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,oCAE7B/9D,EAAK,sBAGN,I,4BC9CV,MAiEA,IAAerC,EAAAA,EAAAA,KA/D4BlG,IAYrC,IAZsC,SAC1CyS,EAAQ,QACRirD,EAAO,MACP9jC,EAAK,UACLwoC,EAAS,6BACTwvB,EAA4B,iBAC5BC,EAAgB,YAChBz8D,EAAc,mBAAkB,KAChCmwC,EAAI,YACJ1jC,EAAW,WACXiwD,EAAU,SACVvyD,GACDv/B,EACC,MAAO+xF,EAAiBC,IAAsB3jF,EAAAA,EAAAA,IAAiB,KACxD4jF,EAAoBC,IAAyB7jF,EAAAA,EAAAA,KAAS,GAEvD6zB,GAAen6B,EAAAA,EAAAA,KAAaoqF,IAC5BN,GAAoBM,IAAgBN,EACtCG,EApBuB,6BAsBvBzyD,EAAS4yD,EACX,GACC,CAAC5yD,EAAUsyD,IAERO,GAAmBrqF,EAAAA,EAAAA,KAAY,KAC/B+pF,GACFA,IAEFE,EAAmB,GAAG,GACrB,CAACF,IAEEvpF,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC4pF,GAAAA,EAAc,CAACC,OAAK,EAACC,kBAAmBN,KAG3CxpF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAC+pF,GAAAA,EAAY,CACX54D,MAAOm4D,GAAmBn4D,EAC1B2rC,KAAMA,EACNnwC,YAAaA,EACbw8D,6BAA8BA,EAC9B/vD,YAAaA,GAAet5B,EAAK,QACjCupF,WAAYM,EACZhwB,UAAWA,EACXmwB,kBAAmBN,EACnBQ,iBAAkBhgF,EAClBigF,2BAA4BR,EAC5B3yD,SAAU2C,KAGV,IClCV,IAAeh8B,EAAAA,EAAAA,KAhC0BlG,IAEnC,IAFoC,SACxCyS,EAAQ,QAAEirD,EAAO,QAAEi1B,GACpB3yF,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACs7C,GAAAA,EAAuB,CACtBvQ,OAAQs/B,GAAAA,EAAAA,KACR4e,WAAYC,GACZjtF,KAAM,IACNkE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAC/C/G,EAAK,+BAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS0pF,GAAUpqF,EAAK,kCAE9B,I,gBCRV,MAiIA,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,EAAM+B,KAAe,IAAb,KAAEoE,GAAMpE,EACxD,MAAO,CACLyqF,eAAeC,EAAAA,EAAAA,IAAoBzsF,EAAiB,UAATmG,EAAmB,KAAO,MACtE,GAHiBpG,EA/H0CnG,IAWxD,IAXyD,cAC7D4yF,EAAa,KACbvoF,EAAO,OAAM,UACb+3D,EAAS,MACTxoC,EAAK,YACLxE,EAAW,cACX09D,EAAa,WACbhB,EAAU,SACVvyD,EAAQ,SACR9sB,EAAQ,QACRirD,GACD19D,EAEC,MAAMykC,GAAWthC,EAAAA,EAAAA,IAAyB,OACpC,SAAE8H,IAAaC,EAAAA,EAAAA,MAEf6nF,EAAsB9nF,EAAW,IAAM,KACtCmN,EAAO46E,IAAY3kF,EAAAA,EAAAA,IAAiB,KACpC4kF,EAAgBC,EAAoBC,IAAwBnoF,EAAAA,EAAAA,IAAQ,IAE3EzG,EAAAA,EAAAA,KAAU,KACHkK,EAAAA,IACH3J,YAAW,KACT2/B,EAASnhC,QAASiiC,OAAO,GACxBwtD,EACL,GACC,CAACA,IAEJ,MAAMK,GAAoBrrF,EAAAA,EAAAA,KAAaqH,IACjCwqB,GAASk4D,GACXA,IAGFkB,EAAS5jF,EAAEwV,OAAOxM,MAAM,GACvB,CAAC05E,EAAYl4D,IAYVy5D,GAAatrF,EAAAA,EAAAA,KAAY,KAC7Bw3B,GAAU,GACT,CAACA,IAEE+zD,GAAoBvrF,EAAAA,EAAAA,KAAY,KACpCorF,IACA5zD,GAAU,GACT,CAACA,EAAU4zD,IAER5qF,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC8qF,GAAAA,EAAuB,CAAC5gD,QAASigD,EAAeluF,KAnEvC,IAmEwDkE,UAAU,2BAG9EH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,QAAMoX,OAAO,GAAG0f,SAjCAnwB,IACpBA,EAAEoO,iBAEGinB,EAASnhC,SAIdi8B,EAASnnB,EAAM,GA2BT3P,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACLrsB,MAAOA,EACP6qB,UAAW54B,EACXszB,MAAOvI,EACPwE,MAAOA,EACPvhB,SAAU+6E,IAGXh7E,EACC3P,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACuB,KAAK,SAAS+3D,UAAWA,EAAWnqD,QAAM,GAAE1P,EAAK,aAEzDE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNo5D,UAAWA,EACXnqD,QAAM,EACNhP,QAAS6pF,EAAgBI,EAAqBG,GAE7C9qF,EAAK,mBAIXuqF,GACCrqF,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,SACVrB,OAAQ0rF,EACRpqF,MAAON,EAAK,wBACZb,QAASyrF,IAERjqF,EAAAA,GAAAA,GAAWX,EAAK,4BAA6B,CAAC,KAAM,oBACrDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNkP,QAAM,EACNjP,QAAM,EACNJ,UAAU,wBACVK,QAASqqF,GAER/qF,EAAK,kBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,UACNkP,QAAM,EACNjP,QAAM,EACNJ,UAAU,wBACVK,QAASkqF,GAER5qF,EAAK,cAMZ,KC7GV,IAAerC,EAAAA,EAAAA,KAnCoClG,IAE7C,IAF8C,SAClDyS,EAAQ,QAAEirD,EAAO,eAAEoI,GACpB9lE,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEP8T,GAAcvU,EAAAA,EAAAA,KAAY,KAC9B+9D,EAAeQ,EAAAA,GAAAA,QAAwB,GACtC,CAACR,IAOJ,OALAnjD,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXluE,KAAM8uF,EAAAA,IACNhgD,OAAQs/B,GAAAA,EAAAA,gBACRlqE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAC/C/G,EAAK,wCAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAASqT,GAAc/T,EAAK,+CAElC,ICoDV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLwsF,eAAeC,EAAAA,EAAAA,IAAoBzsF,EAAQ,MAC3CqtF,WAAYrtF,EAAOstF,cAAcC,0BAHjBxtF,EApEsCnG,IASpD,IATqD,cACzD4yF,EAAa,WACba,EAAU,UACVrxB,EAAS,MACTxoC,EAAK,WACLk4D,EAAU,SACVvyD,EAAQ,SACR9sB,EAAQ,QACRirD,GACD19D,EAEC,MAAMykC,GAAWthC,EAAAA,EAAAA,IAAyB,OACpC,SAAE8H,IAAaC,EAAAA,EAAAA,MACf6nF,EAAsB9nF,EAAW,IAAM,KAEtCmN,EAAO46E,IAAY3kF,EAAAA,EAAAA,IAAiB,KAE3C9J,EAAAA,EAAAA,KAAU,KACHkK,EAAAA,IACH3J,YAAW,KACT2/B,EAASnhC,QAASiiC,OAAO,GACxBwtD,EACL,GACC,CAACA,IAEJ,MAAMxqF,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM01B,GAAoBrrF,EAAAA,EAAAA,KAAaqH,IACjCwqB,GAASk4D,GACXA,IAGF,MAAMlI,EAAWx6E,EAAEwV,OAAOxM,MAAM67B,MAAM,EAAGw/C,GAErC7J,EAAS3lF,SAAWwvF,GACtBl0D,EAASqqD,GAGXoJ,EAASpJ,GACTx6E,EAAEwV,OAAOxM,MAAQwxE,CAAQ,GACxB,CAACkI,EAAY2B,EAAY75D,EAAO2F,IAEnC,OACE92B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC8qF,GAAAA,EAAuB,CAAC5gD,QAASigD,EAAeluF,KApDvC,IAoDwDkE,UAAU,2BAG9EH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOA,EACP7K,IAAKk3B,EACLxB,UAAU,UACVtF,MAAOp1B,EAAK,iBACZqxB,MAAOA,EACPvhB,SAAU+6E,IAEXhxB,GAAa35D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAEpB,KCkTV,IAAe5vB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOstF,iBADnBvtF,EAvX6BnG,IAY3C,IAZ4C,cAChD4lE,EAAa,YACbqU,EAAW,MACXvU,EAAK,KACLH,EAAI,UACJnD,EAAS,MACTxoC,EAAK,uBACL+5D,EAAsB,SACtB9f,EAAQ,SACRphE,EAAQ,eACRqzD,EAAc,QACdpI,GACD19D,EACC,MAAM,eACJ4zF,EAAc,cACdC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,sBACnBC,EAAqB,cACrBC,IACEpsF,EAAAA,EAAAA,OAEJtD,EAAAA,EAAAA,KAAU,KACJovF,IACE/tB,IAAkBU,EAAAA,GAAAA,sBACpBR,EAAeQ,EAAAA,GAAAA,2BACNV,IAAkBU,EAAAA,GAAAA,oBAC3BR,EAAeQ,EAAAA,GAAAA,wBAEnB,GACC,CAACV,EAAeE,EAAgB6tB,IAEnC,MAAMO,GAAoBnsF,EAAAA,EAAAA,KAAY,KACpC8rE,EAAS,CAAExpE,KAAM,UACjBy7D,EAAeQ,EAAAA,GAAAA,iBAAiC,GAC/C,CAACuN,EAAU/N,IAERquB,GAAoBpsF,EAAAA,EAAAA,KAAaqQ,IACrCy7D,EAAS,CAAExpE,KAAM,cAAes7D,QAASvtD,IACzC0tD,EAAeQ,EAAAA,GAAAA,wBAAwC,GACtD,CAACuN,EAAU/N,IAERsuB,GAA2BrsF,EAAAA,EAAAA,KAAY,KAC3C+9D,EAAeQ,EAAAA,GAAAA,qBAAqC,GACnD,CAACR,IAEEuuB,GAAwBtsF,EAAAA,EAAAA,KAAaqQ,IACzCy7D,EAAS,CAAExpE,KAAM,UAAWs7D,QAASvtD,IACrC0tD,EAAeQ,EAAAA,GAAAA,sBAAsC,GACpD,CAACuN,EAAU/N,IAERwuB,GAAyBvsF,EAAAA,EAAAA,KAAaqQ,IAC1Cy7D,EAAS,CAAExpE,KAAM,WAAYs7D,QAASvtD,IACtCw7E,EAAe,IACVluB,EACHF,MAAOptD,EACPm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACuN,EAAU/N,EAAgBJ,EAAOkuB,IAE/BY,GAA8BzsF,EAAAA,EAAAA,KAAaqQ,IAC/Cy7D,EAAS,CAAExpE,KAAM,qBAAsBs7D,QAASvtD,IAChDy7E,EAAc,CACZxuB,gBAAiBjtD,EACjBm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,uBAAuC,GAExD,GACD,CAACutB,EAAehgB,EAAU/N,IAEvB2uB,GAA0B1sF,EAAAA,EAAAA,KAAaqQ,IAC3Cy7D,EAAS,CAAExpE,KAAM,cAAes7D,QAASvtD,IACzC0tD,EAAeQ,EAAAA,GAAAA,2BAA2C,GACzD,CAACuN,EAAU/N,IAER4uB,GAA8B3sF,EAAAA,EAAAA,KAAY,KAC9C+9D,EAAeQ,EAAAA,GAAAA,wBAAwC,GACtD,CAACR,IAEE6uB,GAA2B5sF,EAAAA,EAAAA,KAAaqQ,IAC5Cy7D,EAAS,CAAExpE,KAAM,UAAWs7D,QAASvtD,IACrCw7E,EAAe,IACVluB,EACHH,KAAMntD,EACNm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACuN,EAAU/N,EAAgBJ,EAAOkuB,IAE/BgB,GAAgB7sF,EAAAA,EAAAA,KAAaqQ,IACjC67E,EAAc,CACZ5uB,gBAAiBjtD,EACjBm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,QAAwB,GAEzC,GACD,CAAC2tB,EAAenuB,IAEb+uB,GAAqC9sF,EAAAA,EAAAA,KAAaqQ,IACtDy7D,EAAS,CAAExpE,KAAM,qBAAsBs7D,QAASvtD,IAChDy7E,EAAc,CACZxuB,gBAAiBjtD,EACjBm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,mBAAmC,GAEpD,GACD,CAACutB,EAAehgB,EAAU/N,IAEvBgvB,GAAsB/sF,EAAAA,EAAAA,KAAaqQ,IACvCy7D,EAAS,CAAExpE,KAAM,WAAYs7D,QAASvtD,IACtC27E,EAAoB,IACfruB,EACHF,MAAOptD,EACPm8E,UAAWA,KACTzuB,EAAeQ,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACuN,EAAU/N,EAAgBJ,EAAOquB,IAE/BgB,GAAkBhtF,EAAAA,EAAAA,KAAag6B,IACnCiyD,EAAsB,CAAEjyD,QAAO,GAC9B,CAACiyD,IAEEzrF,GAAOC,EAAAA,EAAAA,KAEb,OAAQo9D,GACN,KAAKU,EAAAA,GAAAA,cACH,OACE79D,EAAAA,GAAAA,cAACusF,GAAkB,CACjBrC,QAASuB,EACTzhF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,iBACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpB7/D,YAAa7sB,EAAK,uBAClBs5B,YAAat5B,EAAK,YAClBg3B,SAAU40D,EACV1hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpBpD,iBAAkBnsB,EAAMJ,SACxBlwC,YAAa7sB,EAAK,yBAClBs5B,YAAat5B,EAAK,YAClBg3B,SAAU60D,EACV3hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,qBACH,OACE79D,EAAAA,GAAAA,cAACysF,GAA0B,CACzB3oF,KAAK,OACL6oB,YAAa7sB,EAAK,2BAClBg3B,SAAU80D,EACV5hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,sBACH,OACE79D,EAAAA,GAAAA,cAACysF,GAA0B,CACzB3oF,KAAK,QACLlC,KAAK,QACL+3D,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZ1+D,YAAa7sB,EAAK,sBAClBuqF,eAAa,EACbvzD,SAAU+0D,EACV7hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,0BACH,OACE79D,EAAAA,GAAAA,cAAC0sF,GAAsB,CACrB/yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZv0D,SAAUw1D,EACVtiF,SAAUA,GAAYwnE,IAAgB3T,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,qBACH,OACE79D,EAAAA,GAAAA,cAAC2sF,GAA4B,CAC3BtvB,eAAgBA,EAChBrzD,SAAUA,EACVirD,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,aACH,OACE79D,EAAAA,GAAAA,cAAC4sF,GAAoB,CACnBvvB,eAAgBA,EAChBrzD,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpB7yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZvuB,KAAMA,EACNhmC,SAAUi1D,EACV/hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,uBACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpB7/D,YAAa7sB,EAAK,+BAClBg3B,SAAUk1D,EACVhiF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpBpD,iBAAkBnsB,EAAMJ,SACxBlwC,YAAa7sB,EAAK,yBAClBg3B,SAAUm1D,EACVjiF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE79D,EAAAA,GAAAA,cAACysF,GAA0B,CACzB9yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZvnF,KAAK,OACL6oB,YAAa7sB,EAAK,2BAClBg3B,SAAUo1D,EACVliF,SAAUA,GAAYwnE,IAAgB3T,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,aACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpB7yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZvuB,KAAMA,EACNhmC,SAAUq1D,EACVniF,SAAUA,EACVirD,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,kCACH,OACE79D,EAAAA,GAAAA,cAACwsF,GAAqB,CACpB7yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZvuB,KAAMA,EACNhmC,SAAUs1D,EACVpiF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,mBACH,OACE79D,EAAAA,GAAAA,cAACysF,GAA0B,CACzB3oF,KAAK,QACLlC,KAAK,QACL+qB,YAAa7sB,EAAK,sBAClBg3B,SAAUu1D,EACVriF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,uBACH,OACE79D,EAAAA,GAAAA,cAAC0sF,GAAsB,CACrB/yB,UAAWA,EACXxoC,MAAOA,EACPk4D,WAAYgC,EACZv0D,SAAUw1D,EACVtiF,SAAUA,GAAYwnE,IAAgB3T,EAAAA,GAAAA,qBACtC5I,QAASA,IAIf,QACE,OAAiB,KCnRvB,SAAS43B,GAA0BlvF,EAAqB8jF,GACtD,MAAM,QAAEzE,GAAYr/E,EAAOqpE,SAC3B,OAAQya,GACN,KAAK5jB,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOmf,EAAQzgD,YACjB,KAAKshC,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOmf,EAAQW,SACjB,KAAK9f,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAOmf,EAAQa,aACjB,KAAKhgB,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,OAAOmf,EAAQqB,UACjB,KAAKxgB,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOmf,EAAQuB,SACjB,KAAK1gB,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAOmf,EAAQe,SACjB,KAAKlgB,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,OAAOmf,EAAQiB,cACjB,KAAKpgB,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOmf,EAAQmB,WAIrB,CAEA,UAAe1gF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAE+hF,GAAQ/hF,EACjB,MAAO,CACL6iB,cAAe5kB,EAAO4kB,cACtBykD,SAAU6lB,GAA0BlvF,EAAQ8jF,GAC7C,GALe/jF,EA3HsDnG,IAQpE,IARqE,YACzEu1F,EAAW,OACXrL,EAAM,SACNz3E,EAAQ,eACRqzD,EAAc,QACdpI,EAAO,cACP1yC,EAAa,SACbykD,GACDzvE,EACC,MAAM,mBAAEw1F,IAAuB3tF,EAAAA,EAAAA,MAEzBU,GAAOC,EAAAA,EAAAA,KAEPitF,GAAqB3zF,EAAAA,EAAAA,KAAQ,IAC5B2tE,EAID8lB,EACK,IAAI9lB,EAAS4Y,gBAAiB5Y,EAAS2Y,cAEvC,IAAI3Y,EAASyY,gBAAiBzY,EAASwY,cANvC,IAQR,CAACsN,EAAa9lB,KACVrR,EAAas3B,IAAkBrnF,EAAAA,EAAAA,IAAiB,KAChDsnF,EAAeC,IAAoBvnF,EAAAA,EAAAA,KAAkB,IACrDwnF,EAAuBC,IAA4BznF,EAAAA,EAAAA,IAAmBonF,GAEvE9d,GAAsBC,EAAAA,GAAAA,IAA8BrF,EAAAA,KACpDsF,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KACzDC,GAAej2E,EAAAA,EAAAA,KAAQ,KAE3B,MAAM4wB,GAAY6E,EAAAA,EAAAA,MAAYnB,MAAMC,KAE9BqB,GAAUJ,EAAAA,GAAAA,IAAO,IAAIqgD,GAAuB,MAAOE,GAA4B,KAClF7gD,QAAQnwB,IACP,MAAMF,EAAO+rB,EAAU7rB,GAEvB,OAAOF,IAAQI,EAAAA,EAAAA,IAASJ,EAAKpJ,KAAOoJ,EAAKpJ,KAAOytB,CAAa,IAGjE,OAAOsM,EAAAA,GAAAA,IAAO,IACTm+D,MACA19D,EAAAA,EAAAA,IAAkBxvB,EAAMmvB,EAAShF,EAAW0rC,IAC/C,GACD,CAACuZ,EAAqBE,EAA0B4d,EAAoBltF,EAAM61D,EAAapzC,IAEpF+qE,GAAiChuF,EAAAA,EAAAA,KAAaqQ,IAClD09E,EAAyB19E,GACzBw9E,GAAiB,EAAK,GACrB,IAEG1zD,GAAen6B,EAAAA,EAAAA,KAAY,KAC/BytF,EAAmB,CACjB1J,WAAY7B,GAAcC,GAC1BqL,YAAah0F,QAAQg0F,GACrBS,YAAaH,IAGf/vB,EAAeQ,EAAAA,GAAAA,QAAwB,GACtC,CAACivB,EAAaM,EAAuB/vB,EAAgBokB,EAAQsL,IAOhE,OALA7yE,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAAS4mB,GAAgB,GACzBzmB,YAAaukC,EACbpf,YAAarY,EACb63B,kBAAiC1tF,EAAdgtF,EAAmB,yBAAiC,yBACvEW,cAAc,0BACdC,cAAY,EACZ9kC,oBAAqB0kC,EACrBnf,eAAgB8e,IAGlBjtF,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9D,EACT1sF,QAASi5B,EACTl2B,UAAyBzD,EAAdgtF,EAAmB,cAAsB,eAEpD9sF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEX,KCxDV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,mBAAEq8C,EAAkB,OAAE2zC,GAAWhwF,EAEvC,MAAO,CACLq8C,qBACA4zC,iBAAkBD,GAAQE,gBAC3B,GAPenwF,EA5CqCnG,IAKnD,IALoD,SACxDyS,EAAQ,mBACRgwC,EAAkB,iBAClB4zC,EAAgB,QAChB34B,GACD19D,EACC,MAAM,mBAAEu2F,IAAuB1uF,EAAAA,EAAAA,OAE/B8a,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMlmB,GAAU11C,EAAAA,EAAAA,KAAQ,KACrB2gD,GAAsB,IAAIzrB,QAAQgsB,IAAuBA,EAAkBwzC,aACzEtuF,KAAK86C,IAAiB,CACrBrlB,MACEl1B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC0vD,GAAAA,EAAmB,CAAC3V,SAAUQ,EAAkBR,SAAUC,mBAAoBA,IAC9EO,EAAkBn6C,OAGvBuP,MAAO4qC,EAAkBR,SAASi0C,cAErC,CAACh0C,IAEE1F,GAAeh1C,EAAAA,EAAAA,KAAay6C,IAChC+zC,EAAmB,CACjB/zC,SAAU,CAAEi0C,SAAUj0C,IACtB,GACD,CAAC+zC,IAEJ,OACE9tF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wEACbH,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,0BACL2mC,QAASA,EACTmlC,SAAU0Z,EACVh+E,SAAU0kC,IAER,K,gBC1CV,MAiCA,IAAe72C,EAAAA,EAAAA,KAjC6BlG,IAEtC,IAFuC,SAC3CyS,EAAQ,QAAEirD,EAAO,QAAEi1B,GACpB3yF,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAIb,OAFAma,EAAAA,GAAAA,GAAe,CAAElQ,WAAUmQ,OAAQ86C,IAGjCj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACs7C,GAAAA,EAAuB,CACtBvQ,OAAQs/B,GAAAA,EAAAA,KACR4e,WAAYC,GACZjtF,KAAMgyF,EAAAA,IACN9tF,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAI,QAAO,qIAIpD7G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAO,wGAK3D7G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS0pF,GAAUpqF,EAAK,oBAE9B,ICcV,IAAerC,EAAAA,EAAAA,KA1C+BlG,IAExC,IAFyC,SAC7CyS,EAAQ,QAAEirD,EAAO,eAAEoI,GACpB9lE,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAIb,OAFAma,EAAAA,GAAAA,GAAe,CAAElQ,WAAUmQ,OAAQ86C,IAGjCj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACs7C,GAAAA,EAAuB,CACtBvQ,OAAQs/B,GAAAA,EAAAA,KACR4e,WAAYC,GACZjtF,KAAM,IACNkE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAO,+BAK3D7G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,gCAE7B/9D,EAAK,oBAERE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,eAELtD,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,kBAE7B/9D,EAAK,sBAGN,ICPV,IAAerC,EAAAA,EAAAA,KAnCuClG,IAEhD,IAFiD,SACrDyS,EAAQ,QAAEirD,GACX19D,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPmuF,GAAY5uF,EAAAA,EAAAA,KAAY,KAC5B21D,GAAQ,EAAK,GACZ,CAACA,IAIJ,OAFA/6C,EAAAA,GAAAA,GAAe,CAAElQ,WAAUmQ,OAAQ86C,IAGjCj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXluE,KAAMgyF,EAAAA,IACNljD,OAAQs/B,GAAAA,EAAAA,gBACRlqE,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAO,oBAGzD7G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAO,2EAK3D7G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS0tF,GAAYpuF,EAAK,UAEhC,IC+KV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOu/E,YADnBx/E,EAnMgCnG,IAU9C,IAV+C,SACnD2lF,EAAQ,cACR/f,EAAa,YACbqU,EAAW,MACXrgD,EAAK,SACLnnB,EAAQ,UACR2vD,EAAS,eACT0D,EAAc,cACd8wB,EAAa,QACbl5B,GACD19D,EACC,MAAM,YACJ62F,EAAW,cACXC,EAAa,iBACbC,EAAgB,mBAChBC,IACEnvF,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,KAEP0rF,GAAoBnsF,EAAAA,EAAAA,KAAY,KACpC6uF,EAAc,IACd9wB,EAAeQ,EAAAA,GAAAA,oBAAoC,GAClD,CAACR,EAAgB8wB,IAEdzC,GAAoBpsF,EAAAA,EAAAA,KAAaqQ,IACrCw+E,EAAcx+E,GACd0tD,EAAeQ,EAAAA,GAAAA,2BAA2C,GACzD,CAACR,EAAgB8wB,IAEdxC,GAA2BrsF,EAAAA,EAAAA,KAAY,KAC3C8uF,EAAY,CAAElR,aACdiR,EAAc,IACd9wB,EAAeQ,EAAAA,GAAAA,wBAAwC,GACtD,CAACR,EAAgB8wB,EAAejR,EAAUkR,IAEvCrC,GAA8BzsF,EAAAA,EAAAA,KAAakvF,IAC/CL,EAAc,KACdM,EAAAA,GAAAA,IAAeD,GAAiB3/C,MAAK,KACnCwuB,EAAeQ,EAAAA,GAAAA,0BAA0C,IACxD,KACDywB,EAAiB,CACfn9D,MAAOrxB,EAAK,qCACZ,GACF,GACD,CAACA,EAAMu9D,EAAgB8wB,EAAeG,IAEnCtC,GAA0B1sF,EAAAA,EAAAA,KAAaqQ,IAC3Cw+E,EAAcx+E,GACd0tD,EAAeQ,EAAAA,GAAAA,8BAA8C,GAC5D,CAACR,EAAgB8wB,IAEdhC,GAAgB7sF,EAAAA,EAAAA,KAAakvF,KACjCC,EAAAA,GAAAA,IAAeD,GAAiB3/C,MAAK,KACnCw/C,IACAhxB,EAAeQ,EAAAA,GAAAA,QAAwB,IACtC,KACDywB,EAAiB,CACfn9D,MAAOrxB,EAAK,qCACZ,GACF,GACD,CAACuuF,EAAevuF,EAAMu9D,EAAgBixB,IAEzC,OAAQnxB,GACN,KAAKU,EAAAA,GAAAA,iBACH,OACE79D,EAAAA,GAAAA,cAAC0uF,GAAqB,CACpBxE,QAASuB,EACTzhF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,oBACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5Bx8D,YAAa7sB,EAAK,oBAClBs5B,YAAat5B,EAAK,YAClBg3B,SAAU40D,EACV1hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,2BACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5BC,iBAAkBlM,EAClBvwD,YAAa7sB,EAAK,uBAClBs5B,YAAat5B,EAAK,YAClB65D,UAAWA,EACX7iC,SAAU60D,EACV3hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,wBACH,OACE79D,EAAAA,GAAAA,cAAC4uF,GAA+B,CAC9B5kF,SAAUA,EACVirD,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,gBACH,OACE79D,EAAAA,GAAAA,cAAC6uF,GAAuB,CACtBxxB,eAAgBA,EAChBrzD,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,iBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,8BACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5Bh4D,MAAOA,EACPk4D,WAAYkF,EACZ5hE,YAAa7sB,EAAK,0CAClBg3B,SAAUi1D,EACV/hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,0BACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5Bx8D,YAAa7sB,EAAK,+BAClBg3B,SAAUk1D,EACVhiF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,8BACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5BC,iBAAkBlM,EAClBvwD,YAAa7sB,EAAK,kDAClB65D,UAAWA,EACX7iC,SAAU60D,EACV3hF,SAAUA,GAAY,CACpB6zD,EAAAA,GAAAA,yBACA9oE,SAASy8E,GACXvc,QAASA,IAIf,KAAK4I,EAAAA,GAAAA,gBACH,OACE79D,EAAAA,GAAAA,cAAC2uF,GAAoB,CACnBxF,8BAA4B,EAC5Bh4D,MAAOA,EAAQrxB,EAAKqxB,QAASt5B,EAC7BwxF,WAAYkF,EACZ5hE,YAAa7sB,EAAK,0CAClBg3B,SAAUq1D,EACVniF,SAAUA,EACVirD,QAASA,IAIf,QACE,OAAiB,KC5HvB,IAAex3D,EAAAA,EAAAA,KApEsBlG,IAM/B,IANgC,WACpCkkD,EAAU,OACVnrC,EAAM,UACNnQ,EAAS,oBACTg6C,EAAmB,QACnB35C,GACDjJ,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPumD,EAAe7K,GAAYtQ,WAAW,GAEtC2jD,GAAkBxvF,EAAAA,EAAAA,KAAY,KAC9BgnD,GAAc9lD,EAAQ8lD,EAAa,GACtC,CAACA,EAAc9lD,IAElB,GAAKi7C,GAAeA,EAAWtQ,SAqC/B,OACEnrC,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPwlC,QAAM,EACNtyD,WAAWuG,EAAAA,GAAAA,GAAe,iBAAkBvG,GAC5CsqE,UAAWnkB,EACX9lD,QAASsuF,GAtCb,WACE,GAAKrzC,EACL,OAAIA,EAAWgG,eAAiB6E,EAE5BtmD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkD,UAAWk4C,EAAWr7C,MACtBE,MAAM,cACN2gB,MAAOnhB,EAAKmhB,OAEZjhB,EAAAA,GAAAA,cAAC4mD,GAAe,CACdnL,WAAYA,EACZx/C,KAAM8yF,EAAAA,IACNz+E,OAAQA,EACR6pC,oBAAqBA,KAMzBn6C,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ/W,QAASoc,EACTrqD,KAAM8yF,EAAAA,IACN3uF,MAAOq7C,EAAWr7C,MAClBkQ,OAAQA,EACR6pC,oBAAqBA,EACrB0M,eAAa,EACb9K,sBAAoB,EACpB7uB,cAAUr1B,GAIlB,CASKm3F,GACDhvF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASs7C,EAAWr7C,OACnCJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YAAYL,EAAK,2BAA4B27C,EAAWlS,MAAO,OAEvE,IC7DT0lD,GAAwB,IAAM7oF,EAAAA,GAyIpC,IAAe3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,KACFm1B,EAAAA,GAAAA,IAAKn1B,EAAOqpE,SAASC,MAAO,CAC7B,wBACA,gCAEFioB,YAAavxF,EAAOwtC,SAAS6Y,MAAMC,OACnCkrC,kBAAmBxxF,EAAOylD,aAAaY,MAAMC,OAC7Cd,gBAAiBxlD,EAAOwtC,SAAS+X,SACjC2qC,gBAAiBlwF,EAAOgwF,QAAQE,gBAChC7zC,mBAAoBr8C,EAAOq8C,mBAC3Bo1C,uBAAuBjrC,EAAAA,EAAAA,IAA4BxmD,MAZrCD,EArHgCnG,IAY9C,IAZ+C,SACnDyS,EAAQ,YACRklF,EAAW,kBACXC,EAAiB,gBACjBhsC,EAAe,gBACf0qC,EAAe,sBACfwB,EAAqB,4BACrBC,EAA2B,mBAC3Bt1C,EAAkB,sBAClBo1C,EAAqB,QACrBn6B,EAAO,eACPoI,GACD9lE,EACC,MAAM,iBACJwwE,EAAgB,eAChBwnB,IACEnwF,EAAAA,EAAAA,MACEU,GAAOC,EAAAA,EAAAA,KAGPyvF,GAAqB90F,EAAAA,EAAAA,IAAuB,OAC1Cm9C,QAASqB,IAAiCf,EAAAA,GAAAA,IAAwB,CAAEC,QAASo3C,IAE/EC,GAAwBnwF,EAAAA,EAAAA,KAAa4qC,IACzCqlD,EAAe,CACb5wC,eAAgBzU,EAAQyU,gBACxB,GACD,CAAC4wC,IAEEG,GAAqCpwF,EAAAA,EAAAA,KAAa6hF,IACtDpZ,EAAiB,CAAEunB,4BAA6BnO,GAAW,GAC1D,CAACpZ,IAEE4nB,GAA8BrwF,EAAAA,EAAAA,KAAa6hF,IAC/CpZ,EAAiB,CAAEsnB,sBAAuBlO,GAAW,GACpD,CAACpZ,IAEE6nB,GAAcv2F,EAAAA,EAAAA,KAAQ,IAC1B61F,GAAe55F,OAAOq2B,QAAOmH,EAAAA,GAAAA,IAAKqwB,EAAiB+rC,KAClD,CAACA,EAAa/rC,IAOjB,OALAjpC,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,mBACZm1B,QAASo6D,EACTj6D,QAASu6D,IAEX3vF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,OAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,aAC9B/5D,KAAK,SAEJhE,EAAK,0BACLqvF,GAAqBnvF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCgvF,EAAkB3zF,SAEzFqyF,GACC7tF,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,0BAEVK,QAASA,IAAM68D,EAAeQ,EAAAA,GAAAA,gBAE9B79D,EAAAA,GAAAA,cAAC0vD,GAAAA,EAAmB,CAClB3V,SAAU8zC,EACV1tF,UAAU,2BACVlE,KAAMgzF,GACNj1C,mBAAoBA,IAEtBh6C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASL,EAAK,uBAInCE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,uCAERE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,sCACZm1B,QAASq6D,EACTl6D,QAASs6D,IAEX1vF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAC/C/G,EAAK,4CAGT8vF,GACC5vF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DiI,EAAK,+BAERE,EAAAA,GAAAA,cAAA,OAAK8E,IAAK0qF,GACPI,EAAYnwF,KAAKg8C,GAChBz7C,EAAAA,GAAAA,cAAC6vF,GAAc,CACbtrF,IAAKk3C,EAAW3mD,GAChB2mD,WAAYA,EACZtB,oBAAqBjB,EACrB14C,QAASivF,EACTn/E,QAAS8+E,OAIfpvF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,SAC/CpG,EAAAA,GAAAA,GAAWX,EAAK,mBAAoB,CAAC,YAIxC,KClEV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,KACFm1B,EAAAA,GAAAA,IAAKn1B,EAAOqpE,SAASC,MAAO,CAC7B,6BAEFkoB,kBAAmBxxF,EAAOylD,aAAaY,MAAMC,OAC7Cd,gBAAiBxlD,EAAOwtC,SAAS+X,SACjCksC,uBAAuBjrC,EAAAA,EAAAA,IAA4BxmD,MARrCD,EA/DmCnG,IAOjD,IAPkD,SACtDyS,EAAQ,kBACRmlF,EAAiB,gBACjBhsC,EAAe,yBACf2sC,EAAwB,sBACxBV,EAAqB,QACrBn6B,GACD19D,EACC,MAAM,eAAEg4F,EAAc,iBAAExnB,IAAqB3oE,EAAAA,EAAAA,MACvCU,GAAOC,EAAAA,EAAAA,KAGPyvF,GAAqB90F,EAAAA,EAAAA,IAAuB,OAC1Cm9C,QAASqB,IAAiCf,EAAAA,GAAAA,IAAwB,CAAEC,QAASo3C,KAErFt1E,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMw6B,GAAwBnwF,EAAAA,EAAAA,KAAa4qC,IACzCqlD,EAAe,CACb5wC,eAAgBzU,EAAQyU,gBACxB,GACD,CAAC4wC,IAEEQ,GAAiCzwF,EAAAA,EAAAA,KAAa6hF,IAClDpZ,EAAiB,CAAE+nB,yBAA0B3O,GAAW,GACvD,CAACpZ,IAEEioB,GAAkB32F,EAAAA,EAAAA,KAAQ,IAC9B81F,GAAqB75F,OAAOq2B,QAAOmH,EAAAA,GAAAA,IAAKqwB,EAAiBgsC,KACxD,CAACA,EAAmBhsC,IAEvB,OACEnjD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZ6vF,GACChwF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,wBACZm1B,QAAS66D,EACT16D,QAAS26D,IAEX/vF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,OAAO2E,IAAK0qF,GACxBQ,EAAgBvwF,KAAKg8C,GACpBz7C,EAAAA,GAAAA,cAAC6vF,GAAc,CACbtrF,IAAKk3C,EAAW3mD,GAChB2mD,WAAYA,EACZtB,oBAAqBjB,EACrB14C,QAASivF,EACTn/E,QAAS8+E,OAIfpvF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,SAC/CpG,EAAAA,GAAAA,GAAWX,EAAK,gBAAiB,CAAC,YAIrC,KCrEJmwF,GAAsC,CAC1C,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KACzD,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MACzD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACvD,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACvD,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACxD,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MACxD,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAC1D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,KAAM,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAC7D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAC5D,KAAM,KAAM,MAAO,MAGfC,GAAsBp+B,EAAAA,IAAAA,QAAwChyD,GAClEmwF,GAAoCl7F,SAAS+K,KAyH/C,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJsiF,EAAQ,eAAEG,GACRziF,EAAOqpE,SAASC,MAEpB,MAAO,CACLgZ,WACAG,iBACD,GATe1iF,EA/GsCnG,IAKpD,IALqD,SACzDyS,EAAQ,SACRi2E,EAAQ,eACRG,EAAc,QACdnrB,GACD19D,EACC,MAAM,iBAAEwwE,IAAqB3oE,EAAAA,EAAAA,MAEvBU,GAAOC,EAAAA,EAAAA,MACNowF,EAAkBC,IAAuBxqF,EAAAA,EAAAA,IAAyB,KAClEskB,EAAQwE,IAAa9oB,EAAAA,EAAAA,IAAS,IAE/BmpC,GAA0B11C,EAAAA,EAAAA,KAAQ,IAC/B62F,GAAoBzwF,KAAKsyD,IAOvB,CACLA,WACAC,eARsB,IAAIC,KAAKC,aAAa,CAAC+tB,GAAW,CAAEr+E,KAAM,aAC3BuwD,GAAGJ,GAQxCK,aANoB,IAAIH,KAAKC,aAAa,CAACH,GAAW,CAAEnwD,KAAM,aAC7BuwD,GAAGJ,OAOrCtyD,KAAIC,IAAA,IAAC,SAAEqyD,EAAQ,eAAEC,EAAc,aAAEI,GAAc1yD,EAAA,MAAM,CACtDw1B,MAAO88B,EACPkhB,SAAU9gB,EACVziD,MAAOoiD,EACR,KACA,CAACkuB,KAEJnkF,EAAAA,EAAAA,KAAU,KACHkO,GAAU0kB,EAAU,GAAG,GAC3B,CAAC1kB,KAEJgnE,EAAAA,GAAAA,IAAsBnxE,IAAoB,IAAlBwwF,GAAaxwF,EACnC,GAAIwwF,IAAiBrmF,EAAU,OAC/B,GAAIA,GAAYmmF,EAAiB30F,OAAQ,OAEzC,MAAMX,EAAUk0C,EAAQC,MAAMC,GAAWA,EAAOt/B,QAAUswE,IACpDqQ,EAAiBvhD,EAAQxgB,QAAQ0gB,GAAWA,EAAOt/B,QAAUswE,KAE5D/L,EAAUqc,IAAc3f,EAAAA,GAAAA,IAAU0f,GAAiBrhD,GAAWmxC,EAAerrF,SAASk6C,EAAOt/B,SAEpGygF,EAAoB,CAACv1F,KAAaq5E,KAAaqc,GAAY,GAC1D,CAACvmF,EAAUo2E,EAAgB+P,EAAiB30F,OAAQykF,EAAUlxC,IAEjE,MAAMuF,GAAeh1C,EAAAA,EAAAA,KAAa6e,IAChC,MAAM,MAAExO,EAAK,QAAEslB,GAAY9W,EAAMnK,cACjC,IAAIw8E,EAEFA,EADEv7D,GACkBpG,EAAAA,GAAAA,IAAO,IAAIuxD,EAAgBzwE,IAE3BywE,EAAe7xD,QAAQkiE,GAAMA,IAAM9gF,IAGzDo4D,EAAiB,CACfqY,eAAgBoQ,GAChB,GACD,CAACpQ,EAAgBrY,IAEdnW,GAAetyD,EAAAA,EAAAA,KAAaqH,IAChC+nB,EAAU/nB,EAAEwV,OAAOxM,MAAM,GACxB,IAEG+gF,GAA2Br3F,EAAAA,EAAAA,KAAQ,IAClC6wB,EAAOkX,OAIL+uD,EAAiB5hE,QAAQ0gB,GAC9BA,EAAO/Z,MAAMxJ,cAAc32B,SAASm1B,EAAOwB,gBACxCujB,EAAOikC,UAAUxnD,cAAc32B,SAASm1B,EAAOwB,gBAC/CujB,EAAOt/B,MAAM+b,cAAc32B,SAASm1B,EAAOwB,iBANvCykE,GAQR,CAACA,EAAkBjmE,IAOtB,OALAhQ,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GC1IG,uBD0IyB,mCAC1C1G,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GC3I+B,uBD2IH,kBAC1C1G,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRloB,IAAI,SACJoL,MAAOua,EACPta,SAAUgiD,EACVjlC,YAAa7sB,EAAK,UAClBwyD,2BAAyB,IAE3BtyD,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GCnJkG,uBDmJjE,8BAC9CgqF,EAAyBjxF,KAAKwvC,GAC7BjvC,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP70B,UCtJyE,uBDuJzE+0B,MAAO+Z,EAAO/Z,MACdg+C,SAAUjkC,EAAOikC,SACjBj+C,QAASmrD,EAAerrF,SAASk6C,EAAOt/B,OACxCA,MAAOs/B,EAAOt/B,MACdpL,IAAK0qC,EAAOt/B,MACZC,SAAU0kC,QAKd,KE9FV,IAAe72C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLgzF,8BAA+BhzF,EAAOqpE,SAASC,MAAM0pB,iCAHvCjzF,EA7CoCnG,IAIlD,IAJmD,SACvDyS,EAAQ,QACRirD,EAAO,8BACP07B,GACDp5F,EACC,MAAM,gBAAE07C,EAAe,iBAAE80B,IAAqB3oE,EAAAA,EAAAA,MACxCU,GAAOC,EAAAA,EAAAA,KAOb,OALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAIRj1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXp/B,OAAQs/B,GAAAA,EAAAA,aACRpuE,KAAM,IACNkE,UAAU,oBACVywF,gBAAc,EACd1lD,QAAQ,IAEVlrC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiC0G,IAAI,QAAQ/G,EAAK,qCAEjEE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACitB,GAAAA,EACC,CACAzsB,QAASA,IAAMyyC,IACfnvC,KAAK,cAEL9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAAQ,0BAGzBH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAM,+BACND,QAASn8B,QAAQ63F,GAEjBv7D,QAASA,IAAM2yC,EAAiB,CAAE4oB,+BAAgCA,OAGlE,K,4BCxBV,MAAME,GAA0B,CAC9B,eACA,gBACA,iBAGIC,GAAiC,CACrC,eACA,SACA,iBAGIC,GAA4C,CAChD,CAAC,gCAAiC,CAChC,CAAExsF,IAAK,kBAAmB2wB,MAAO,oBACjC,CAAE3wB,IAAK,2BAA4B2wB,MAAO,6BAC1C,CAAE3wB,IAAK,wBAAyB2wB,MAAO,2BACvC,CAAE3wB,IAAK,4BAA6B2wB,MAAO,+BAC3C,CAAE3wB,IAAK,wBAAyB2wB,MAAO,0BACvC,CAAE3wB,IAAK,kBAAmB2wB,MAAO,oBAAqB/kB,UAAW6gF,EAAAA,IACjE,CAAEzsF,IAAK,wBAAyB2wB,MAAO,4BAEzC,CAAC,qBAAsB,CACrB,CAAE3wB,IAAK,gBAAiB2wB,MAAO,wBAC/B,CAAE3wB,IAAK,uBAAwB2wB,MAAO,0BACtC,CAAE3wB,IAAK,kBAAmB2wB,MAAO,oBACjC,CAAE3wB,IAAK,iBAAkB2wB,MAAO,2CAElC,CAAC,gBAAiB,CAChB,CAAE3wB,IAAK,eAAgB2wB,MAAO,eAC9B,CAAE3wB,IAAK,iBAAkB2wB,MAAO,oBAkJpC,IAAez3B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLszF,qBAAqBC,EAAAA,EAAAA,IAA0BvzF,MAF/BD,EA9IpB,SAA4BnG,GAIF,IAJG,SAC3ByS,EAAQ,oBACRinF,EAAmB,QACnBh8B,GACsB19D,EACtB,MAAM,iBACJwwE,EAAgB,0BAChBopB,IACE/xF,EAAAA,EAAAA,OAEJ8a,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMn1D,GAAOC,EAAAA,EAAAA,MACNqxF,EAAuBC,IAA4BzrF,EAAAA,EAAAA,IAAkC,CAAC,GAEvF0rF,GAAuBj4F,EAAAA,EAAAA,KAAQ,IAC5B03F,GAAoBnlE,QAAO,CAACC,EAAGnsB,EAAeuI,KAAU,IAAtB,CAAE8mC,GAAQrvC,EAGjD,OAFAmsB,EAAI5jB,GAAS8mC,EAAQwiD,OAAM1xF,IAAA,IAAC,IAAE0E,GAAK1E,EAAA,OAAKoxF,EAAoB1sF,EAAI,IAEzDsnB,CAAG,GACT,CAAC,IACH,CAAColE,IAEEO,GAAsBn4F,EAAAA,EAAAA,KAAQ,KAC9Bo4F,EAAAA,GAAAA,GAAaR,EAAqBS,GAAAA,IAC7BC,EAAAA,KAELF,EAAAA,GAAAA,GAAaR,EAAqBW,GAAAA,IAC7BC,EAAAA,KAELJ,EAAAA,GAAAA,GAAaR,EAAqBa,GAAAA,IAC7BC,EAAAA,IAGFC,EAAAA,KACN,CAACf,IACEgB,EAAwBT,IAAwBQ,EAAAA,IAClDlB,GACAD,GAEEqB,GAAsB5yF,EAAAA,EAAAA,KAAY,CAACqH,EAAqBsB,KAC5DtB,EAAEoO,iBACF,MAAMo9E,EAAev9E,OAAO3M,GAE5BopF,GAA0Be,IAAI,IACzBA,EACH,CAACD,IAAgBC,EAAKD,MACrB,GACF,IAEGE,GAA6B/yF,EAAAA,EAAAA,KAAagzF,IAC9C,MAAMC,EAAcD,IAAaT,EAAAA,IAC7BD,GAAAA,GACCU,IAAaP,EAAAA,IAAsBD,GAAAA,GAAgCJ,GAAAA,GAExE3pB,EAAiB,CAAEyqB,eAAgBF,IACnCnB,EAA0BoB,EAAY,GACrC,CAACxqB,IAEE0qB,GAA4BnzF,EAAAA,EAAAA,KAAaqH,IAC7C,MAAM,KAAEyB,EAAI,QAAE6sB,GAAYtuB,EAAEwV,OACtBu2E,EAAoB3B,GAAoB/hD,MAAKpxC,IAAA,IAAE+0F,GAAY/0F,EAAA,OAAK+0F,IAAgBvqF,CAAI,IAC1F,IAAKsqF,EACH,OAGF,MAAME,EAAcF,EAAkB,GAAG9mE,QAAO,CAACC,EAAG3L,KAAc,IAAZ,IAAE3b,GAAK2b,EAE3D,OADA2L,EAAItnB,GAAO0wB,EACJpJ,CAAG,GACT,CAAC,GAEJslE,EAA0ByB,EAAY,GACrC,IAEGC,GAAuBvzF,EAAAA,EAAAA,KAAaqH,IACxC,MAAM,KAAEyB,EAAI,QAAE6sB,GAAYtuB,EAAEwV,OAE5Bg1E,EAA0B,CAAE,CAAC/oF,GAA6B6sB,GAAU,GACnE,IAEH,OACEj1B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAW,mBAG1EmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAAW,yCAI9EmI,EAAAA,GAAAA,cAACyP,GAAAA,EAAW,CACVs/B,QAASkjD,EACTtiF,MAAO6hF,IAAwBQ,EAAAA,IAAyBD,EAAAA,IAAsBP,EAC9E5hF,SAAUyiF,KAIdryF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6DACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAI,QAAO,gCAE/CkqF,GAAoBtxF,KAAI,CAAAqzF,EAAyB7qF,KAAU,IAAjC0qF,EAAa5jD,GAAQ+jD,EAC9C,OACE9yF,EAAAA,GAAAA,cAAA,OACEuE,IAAKouF,EACLxyF,UAAU,6BAEVH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAMuqF,EACNhjF,MAAO1H,EAAMsnC,WACbta,QAASq8D,EAAqBrpF,GAC9BitB,MAAOp1B,EAAK6yF,GACZI,UAAW3B,EAAsBnpF,GAAS,KAAO,OACjD2H,SAAU6iF,EACVO,aAAcd,KAGjBp5F,QAAQs4F,EAAsBnpF,KAC7BjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mCACZ4uC,EAAQtvC,KAAIwzF,IAAA,IAAC,IAAE1uF,EAAG,MAAE2wB,EAAK,SAAE/kB,GAAU8iF,EAAA,OACpCjzF,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPzwB,IAAKA,EACL6D,KAAM7D,EACN0wB,QAASg8D,EAAoB1sF,GAC7B2wB,MAAOp1B,EAAKo1B,GACZ/kB,SAAUA,EACVP,SAAUijF,GACV,KAIJ,KAMlB,KC/KMt3B,GAA0BjmE,OAAO02B,KAAK6xC,EAAAA,IAAiBriE,OAAS,EAGhE03F,GAAiB,CACrBr1B,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGIs1B,GAAmB,CACvBt1B,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,iBAGIu1B,GAAkB,CACtBv1B,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,cAGIw1B,GAAkB,CACtBx1B,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,gBAGIy1B,GAA+B,CACnCz1B,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGI01B,GAAkC,CACtC11B,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGI21B,GAAgC,CACpC31B,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGI41B,GAA6B,CACjC51B,EAAAA,GAAAA,gCACAA,EAAAA,GAAAA,gCAGI61B,GAA4B,CAChC71B,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGI81B,GAA6B,CACjC91B,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGI+1B,GAAiC,CACrC/1B,EAAAA,GAAAA,oCACAA,EAAAA,GAAAA,oCAGIg2B,GAA8B,CAClCh2B,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAoWF,IAAepgE,EAAAA,EAAAA,KAvVgBlG,IAQzB,IAR0B,SAC9ByS,EAAQ,cACRmzD,EAAa,aACb22B,EAAY,gBACZC,EAAe,eACf12B,EAAc,QACdpI,EAAO,qBACP++B,GACDz8F,EACC,MAAM,0BAAE08F,IAA8B70F,EAAAA,EAAAA,OAC/B80F,EAAYC,IhEpFZC,EAAAA,GAAAA,GAAWp3B,GAAcL,KgEqFzB03B,EAAiBC,IAAsB1uF,EAAAA,EAAAA,IAAiB,IAEzD+rE,GAAcryE,EAAAA,EAAAA,KAAai1F,IAC/B,MAAMC,GAAiBn+E,EAAAA,EAAAA,KAAeyY,EAAAA,EAAAA,OAAauhD,mBAAmBmkB,eAElEr3B,IAAkBU,EAAAA,GAAAA,cACpBo2B,KAG4B,IAA1BM,QAAsD18F,IAAnB28F,IAAiCA,EACtEv/B,GAAQ,IAKRkI,IAAkBU,EAAAA,GAAAA,qBACfV,IAAkBU,EAAAA,GAAAA,mBAClBV,IAAkBU,EAAAA,GAAAA,+BAClBV,IAAkBU,EAAAA,GAAAA,0BAErBxhE,YAAW,KACT03F,EAAgB,CAAEnyF,KAAM,SAAU,GA9Hd,KAmItBu7D,IAAkBU,EAAAA,GAAAA,sBACfV,IAAkBU,EAAAA,GAAAA,qBAUvB5I,IAR4B,WAAtB6+B,EAAajoB,KACfxO,EAAeQ,EAAAA,GAAAA,qBAEfR,EAAeQ,EAAAA,GAAAA,mBAKV,GACR,CACDi2B,EAAajoB,KAAMkoB,EACnB52B,EAAelI,EAASoI,IAyQ1B,SAASo3B,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE50F,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC60F,GAAc,CACb13B,cAAeA,EACflI,QAAS0c,EACTtU,eAAgBA,EAChBD,eAAgB02B,EAAaxsD,WA7QrC,SAAqCotD,EAAyBjT,GAC5D,MAAMqT,EAA+C,CACnD,CAACj3B,EAAAA,GAAAA,oBAAqCy1B,GAA6Bv+F,SAAS0sF,GAC5E,CAAC5jB,EAAAA,GAAAA,iBAAkC01B,GAAgCx+F,SAAS0sF,GAC5E,CAAC5jB,EAAAA,GAAAA,qBAAsC21B,GAA8Bz+F,SAAS0sF,GAC9E,CAAC5jB,EAAAA,GAAAA,kBAAmC41B,GAA2B1+F,SAAS0sF,GACxE,CAAC5jB,EAAAA,GAAAA,iBAAkC61B,GAA0B3+F,SAAS0sF,GACtE,CAAC5jB,EAAAA,GAAAA,mBAAoC81B,GAA2B5+F,SAAS0sF,GACzE,CAAC5jB,EAAAA,GAAAA,sBAAuC+1B,GAA+B7+F,SAAS0sF,GAChF,CAAC5jB,EAAAA,GAAAA,mBAAoCg2B,GAA4B9+F,SAAS0sF,IAGtEsT,EAAgB7B,GAAen+F,SAAS0sF,GACxCuT,EAAmB7B,GAAiBp+F,SAAS0sF,GAC7CwT,EAAkB7B,GAAgBr+F,SAAS0sF,GAC3CyT,EAAkB7B,GAAgBt+F,SAAS0sF,IAC5CsT,GACAC,GACA1/F,OAAO02B,KAAK8oE,GAAqB//F,SAAS0sF,EAAOlyC,aACjDj6C,OAAOq2B,OAAOmpE,GAAqB9lD,MAAMzqC,IAAgB,IAARA,IAEtD,OAAQ44D,GACN,KAAKU,EAAAA,GAAAA,KACH,OACE79D,EAAAA,GAAAA,cAACm1F,GAAY,CAAC93B,eAAgBA,EAAgBrzD,SAAUA,EAAUirD,QAAS0c,IAE/E,KAAK9T,EAAAA,GAAAA,YACH,OACE79D,EAAAA,GAAAA,cAACo1F,GAAmB,CAClBprF,SAAUA,GAAY0qF,EACtBz/B,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,QACH,OACE79D,EAAAA,GAAAA,cAACq1F,GAAe,CACdh4B,eAAgBA,EAChBrzD,SAAU0qF,GACLjT,IAAW5jB,EAAAA,GAAAA,4BACX4jB,IAAW5jB,EAAAA,GAAAA,uBACX4jB,IAAW5jB,EAAAA,GAAAA,eACX4jB,IAAW5jB,EAAAA,GAAAA,aACXq3B,GAAmBD,EACxBhgC,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,cACH,OACE79D,EAAAA,GAAAA,cAACs1F,GAAqB,CAACtrF,SAAU0qF,EAAgBz/B,QAAS0c,IAE9D,KAAK9T,EAAAA,GAAAA,YACH,OACE79D,EAAAA,GAAAA,cAACu1F,GAAmB,CAACvrF,SAAU0qF,EAAgBz/B,QAAS0c,IAE5D,KAAK9T,EAAAA,GAAAA,cACH,OACE79D,EAAAA,GAAAA,cAACw1F,GAAqB,CAACxrF,SAAU0qF,EAAgBz/B,QAAS0c,IAE9D,KAAK9T,EAAAA,GAAAA,YACH,OACE79D,EAAAA,GAAAA,cAACy1F,GAAmB,CAACzrF,SAAU0qF,EAAgBz/B,QAAS0c,IAE5D,KAAK9T,EAAAA,GAAAA,QACH,OACE79D,EAAAA,GAAAA,cAAC01F,GAAe,CACdr4B,eAAgBA,EAChBrzD,SAAU0qF,GAAkBQ,EAC5BjgC,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,SACH,OACE79D,EAAAA,GAAAA,cAAC21F,GAAgB,CACf3rF,SAAU0qF,GAAkBjT,IAAW5jB,EAAAA,GAAAA,eACvC5I,QAAS0c,EACTtU,eAAgBA,IAGtB,KAAKQ,EAAAA,GAAAA,eACH,OACE79D,EAAAA,GAAAA,cAAC41F,GAAsB,CAAC5rF,SAAU0qF,EAAgBz/B,QAAS0c,IAE/D,KAAK9T,EAAAA,GAAAA,SACH,OACE79D,EAAAA,GAAAA,cAAC61F,GAAgB,CAAC7rF,SAAU0qF,EAAgBz/B,QAAS0c,EAAatU,eAAgBA,IAEtF,KAAKQ,EAAAA,GAAAA,aACH,OACE79D,EAAAA,GAAAA,cAAC81F,GAAoB,CAAC9rF,SAAU0qF,EAAgBz/B,QAAS0c,IAE7D,KAAK9T,EAAAA,GAAAA,sBACH,OACE79D,EAAAA,GAAAA,cAAC+1F,GAAyB,CACxB14B,eAAgBA,EAChBrzD,SAAU0qF,GAAkBjT,IAAW5jB,EAAAA,GAAAA,2BACvC5I,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,2BACH,OACE79D,EAAAA,GAAAA,cAACg2F,GAA8B,CAC7BhsF,SAAU0qF,EACVz/B,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,eACH,OACE79D,EAAAA,GAAAA,cAACi2F,GAAsB,CACrBjsF,SAAU0qF,EACVz/B,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,eACH,OACE79D,EAAAA,GAAAA,cAACk2F,GAAsB,CACrBlsF,SAAU0qF,EACVz/B,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,oBACH,OACE79D,EAAAA,GAAAA,cAACm2F,GAA2B,CAC1BnsF,SAAU0qF,EACVz/B,QAAS0c,IAGf,KAAK9T,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE79D,EAAAA,GAAAA,cAACo2F,GAAyB,CACxB3U,OAAQtkB,EACRE,eAAgBA,EAChBrzD,SAAU0qF,GAAkBI,EAAoB33B,GAChDlI,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE79D,EAAAA,GAAAA,cAACq2F,GAAsC,CACrCvJ,aAAW,EACXrL,OAAQtkB,EACRE,eAAgBA,EAChBrzD,SAAU0qF,GAAkBI,EAAoB33B,GAChDlI,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE79D,EAAAA,GAAAA,cAACq2F,GAAsC,CACrC5U,OAAQtkB,EACRE,eAAgBA,EAChBrzD,SAAU0qF,EACVz/B,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,yBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,aACH,OACE79D,EAAAA,GAAAA,cAACs2F,GAAe,CACdn5B,cAAeA,EACfqU,YAAaiQ,EACbxkB,MAAO62B,EACP1oB,SAAU2oB,EACV/pF,SAAU0qF,EACVr3B,eAAgBA,EAChBpI,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE79D,EAAAA,GAAAA,cAACu2F,GAAa,CACZp5B,cAAeA,EACfF,MAAOi3B,EACP9oB,SAAU+oB,EACV3iB,YAAaiQ,EACbz3E,SAAU0qF,EACVr3B,eAAgBA,EAChBpI,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE79D,EAAAA,GAAAA,cAACw2F,GAAgB,CACfr5B,cAAeA,EACf+f,SAAUmX,EACVlG,cAAemG,EACf9iB,YAAaiQ,EACbz3E,SAAU0qF,EACVr3B,eAAgBA,EAChBpI,QAAS0c,IAIf,KAAK9T,EAAAA,GAAAA,YACH,OACE79D,EAAAA,GAAAA,cAACy2F,GAAmB,CAClBzsF,SAAU0qF,EACVz/B,QAAS0c,IAIf,QACE,OAEN,CAWO+kB,CAA4BhC,EAAgBE,GAGnD,CAEA,OACE50F,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACT10B,GAAG,WACHsT,KAAM4rF,EAAuB,OAAS2C,EAAAA,GACtCltE,UAAW0zC,EACXf,YAAab,GACbq7B,YAAU,GAETnC,EACU,ICrXjB,IAAeh3F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2wB,QAASF,GAAezwB,EAAO0wB,aAAe,CAAC,GAC/CT,KAAMmB,EAAW8nE,aAAcC,GAAqBn5F,EAAOqxB,MAEnE,MAAO,CACLD,YACA+nE,mBACA1oE,aACD,GATe1wB,EAtE2BnG,IAOzC,IAP0C,SAC9CyS,EAAQ,OACRukB,EAAM,UACNQ,EAAS,iBACT+nE,EAAgB,WAChB1oE,EAAU,QACV6mC,GACD19D,EACC,MAAM,SACJgnC,EAAQ,qBACRw4D,IACE33F,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACP,SAAEyC,IAAaC,EAAAA,EAAAA,OAErByX,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMphD,GAAcvU,EAAAA,EAAAA,KAAaxK,IAC/BypC,EAAS,CAAEzpC,KAAIwgE,sBAAsB,GAAO,GAC3C,CAAC/2B,IAEE1Q,GAAUx0B,EAAAA,EAAAA,KAAQ,KACtB,IAAK+0B,EACH,OAGF,MAAM4oE,GAAcznE,EAAAA,EAAAA,IAAkBnB,EAAYW,EAAWR,GAE7D,OAAO0oE,EAAAA,EAAAA,IAAYD,EAAajoE,EAAW+nE,EAAiB,GAC3D,CAAC1oE,EAAYG,EAAQQ,EAAW+nE,KAE5BlsE,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBjzB,EAAWg2B,EAAS/0B,QAAQy1B,IAE7E,OACEvuB,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CAACC,MAAOjC,EAAa0C,WAAYzC,EAAS1qB,UAAU,2BAChEyqB,GAAapvB,OACZovB,EAAYnrB,KAAK3K,GACfkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,sBAEVK,QAASA,IAAMqT,EAAY/e,GAC3B0a,QAAShN,GAETxC,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQ34B,EAAI8pE,eAAa,EAACnK,WAAW,aAGxD7pC,IAAgBA,EAAYpvB,OAC9BwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaoE,IAAI,aAAasC,IAAI,QAC5C0nB,EAAO/yB,OAAS,mCAAqC,0BAGxDwE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,CAAC9oB,IAAI,YAEfvE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnBxiE,IAAI,qBACJ2rB,SAAO,EACP1vB,QAASu2F,EACTxzF,UAAWzD,EAAK,qBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BAEA,KCmCrB,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2wB,QAASuoC,GAAoBl5D,EAAO0wB,aAAe,CAAC,GACpDT,KAAM3D,GAActsB,EAAOgwB,OAGjCkU,MAAO8zB,EAAW,eAClBmB,EAAc,cACdC,EAAa,aACbC,IACE3gD,EAAAA,EAAAA,IAAe1Y,GAAQs5D,cACnB3oC,QAAS6oC,GAAkBJ,GAAiB,CAAC,GAC7CzoC,QAAS+oC,GAAiBL,GAAgB,CAAC,EAEnD,MAAO,CACL/sC,YACA4sC,kBACAlB,cACAuhC,YAAapgC,GAAgBnpC,MAC7BwpC,gBACAE,eACD,GArBe35D,EAjG4BnG,IAa1C,IAb2C,UAC/C46B,EAAS,SACTnoB,EAAQ,kBACRmtF,EAAiB,0BACjBC,EAAyB,WACzBC,EAAU,QACVpiC,EAAO,UACPhrC,EAAS,gBACT4sC,EAAe,YACflB,EAAW,YACXuhC,EAAW,aACX7/B,EAAY,cACZF,GACD5/D,EACC,MAAM,qBACJ+/F,IACEl4F,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAM2Z,GAAqBtvE,EAAAA,EAAAA,KAAauiC,IACtCy1D,EAAqB,CAAEz1D,SAAQ,GAC9B,IAEGytC,GAAej2E,EAAAA,EAAAA,KAAQ,KAE3B,MAAM01B,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9ByqC,EAAkBxB,GAAkBtnC,EAAAA,EAAAA,IAAkBsnC,EAAiB9nC,EAAW4mC,GAAe,GAEvG,OAAOtmC,EAAAA,EAAAA,KACLR,EAAAA,GAAAA,IAAO,IACFwpC,KACChB,GAAgB,MAChBF,GAAiB,KACpB5oC,QAAQq5D,IACT,MAAM1lE,EAAO6M,EAAU64D,GACvB,OAAK1lE,IAIGA,EAAK+zC,SAAW/zC,EAAKq1E,uBAAwBpmB,EAAAA,EAAAA,IAAUjvD,GAAM,IAEvE+H,GACA,EACAktE,EACD,GACA,CAACtgC,EAAiB5sC,EAAW0rC,EAAa0B,EAAcF,EAAeggC,IAEpEK,GAAiBl4F,EAAAA,EAAAA,KAAY,KACjCg4F,EAAqB,CAAEz1D,MAAO,KAC9Bw1D,GAAY,GACX,CAACA,IAEJ,OACEr3F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASy0D,EACT1xD,UAAU,uBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEfH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBAEZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAACyoD,GAAAA,EAAM,CACLC,QAAS4mB,EACTzmB,YAAasuC,EACbnpB,YAAarY,EACb63B,kBAAmB1tF,EAAK,iBACxB2tF,cAAc,0BACd9zB,UAAWu9B,EACXxJ,cAAY,EACZ9kC,oBAAqBwuC,EACrBjpB,eAAgBS,IAGlB5uE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,SAAO,EACP1vB,QAASg3F,EACTj0F,UAAW4uB,EAAY,2BAA6B,0BAEpDnyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAGb,KCqEV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE8G,SAAUgzF,EACVtmE,MAAOumE,IACLrhF,EAAAA,EAAAA,IAAe1Y,GAAQg6F,cAAgB,CAAC,EAE5C,MAAO,CACLF,mBACAC,gBACAE,aAAcj6F,EAAOgwF,QAAQiK,aAC9B,GAXel6F,EAnK6BnG,IAQ3C,IAR4C,UAChD46B,EAAS,SACTnoB,EAAQ,UACR+jD,EAAS,aACT6pC,EAAY,iBACZH,EAAgB,cAChBC,EAAa,QACbziC,GACD19D,EACC,MAAM,gBACJsgG,EAAe,cACfC,IACE14F,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAO70D,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAAS,KAC5BqsB,EAAO+lE,IAAYpyF,EAAAA,EAAAA,IAAS,KAC5BjO,EAAO2tE,IAAY1/D,EAAAA,EAAAA,OACnBurB,EAAOk0C,IAAYz/D,EAAAA,EAAAA,MAEpBqyF,EAAsB,4BACtBC,EAAyB,+BAGzBv+B,EAAY89B,IAAqBU,EAAAA,GAAAA,WAEjCC,GAAoB94F,EAAAA,EAAAA,KAAaqH,IACrC,MAAM,MAAEgJ,GAAUhJ,EAAEqN,cACdmtE,EAAWxxE,EAAMgqB,QAAQ,OAAQ,IAEvCo+D,EAAS5W,GAELA,IAAaxxE,IACfhJ,EAAEqN,cAAcrE,MAAQwxE,EAC1B,GACC,IAEGkX,GAA0B/4F,EAAAA,EAAAA,KAAaqH,IAC3CqxF,EAASrxF,EAAEqN,cAAcrE,MAAM,GAC9B,IAEG2oF,GAAoBh5F,EAAAA,EAAAA,KAAY,KAC/Bc,EAAM5E,OAKPo8F,GAAgB7pC,EAAUvyD,QAAUo8F,EACtCvyB,EA1B0B,oDA8B5BwyB,EAAgB,CACdz3F,QACAzI,QACAo2D,cAZAsX,EAAS4yB,EAaT,GACD,CAAC73F,EAAO2tD,EAAW6pC,EAAcC,EAAiBlgG,IAE/C4gG,GAAsBj5F,EAAAA,EAAAA,KAAY,KACjCc,EAAM5E,OAKXs8F,EAAc,CACZ13F,QACA6xB,QACAt6B,QACAo2D,cARAsX,EAAS6yB,EAST,GACD,CAAC93F,EAAO03F,EAAe7lE,EAAOt6B,EAAOo2D,EAAWmqC,KAEnDp8F,EAAAA,EAAAA,KAAU,KACJ27F,IAAqBU,EAAAA,GAAAA,UACvBljC,GAAQ,EACV,GACC,CAACwiC,EAAkBxiC,IAEtB,MAAMujC,EAAiBd,GAAiB53F,EAAK43F,KAC3CvmE,IAAU8mE,GAAuB9mE,IAAU+mE,EACvC/mE,OACAt5B,GAGN,OACEmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cAENE,QAASA,IAAMy0D,IACf1xD,UAAU,8BAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEfH,EAAAA,GAAAA,cAAA,UAAKF,EAAKqyB,EAAY,aAAe,cAEvCnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAACsmE,GAAAA,EAAc,CACb12D,SAAU01D,EACVllE,MAAON,EAAK,cAEdE,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOvP,EACPwP,SAAUwoF,EACVljE,MAAOp1B,EAAKqyB,EAAY,mBAAqB,aAC7ChB,MAAOA,IAAU8mE,GAAuB9mE,IAAU+mE,EAAyB/mE,OAAQt5B,IAEpFs6B,GACCnyB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOsiB,EACPriB,SAAUyoF,EACVnjE,MAAOp1B,EAAK,oCAEdE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,QAAQL,EAAK,qBAI7B04F,GACCx4F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,SAASq4F,GAGvBzqC,EAAUvyD,OAAS,GAClBwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,MAAIG,UAAU,wBAAwBL,EAAK,6BAA8BiuD,EAAUvyD,OAAQ,MAE3FwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mCACZ4tD,EAAUtuD,KAAK3K,GACdkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACw9C,UAAQ,EAACtqE,UAAU,uBAC3BH,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQ34B,UAQrCkL,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAA0B,IAAjB9vB,EAAM5E,OACfgF,QAAS2xB,EAAYomE,EAAsBD,EAC3CnoF,SAAUwpD,EACVp2D,UAAW4uB,EAAYryB,EAAK,8BAAgC,gBAE3D65D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,2BAGb,KC3KJs4F,GAAenjG,OAAO02B,KAAK0sE,EAAAA,IAAmBl9F,OAAS,EAsD7D,IAAeiC,EAAAA,EAAAA,KApDelG,IAMxB,IANyB,SAC7ByS,EAAQ,UACRmoB,GAAY,EAAK,QACjBhb,EAAO,gBACPwhF,EAAe,QACf1jC,GACD19D,EACC,MAAOqhG,EAAkBC,IAAuBjzF,EAAAA,EAAAA,IAAmB,IAE7D4xF,GAAiBl4F,EAAAA,EAAAA,KAAY,KACjCq5F,EAAgBxmE,EAAYumE,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,cAAgC,GAC/F,CAACvmE,EAAWwmE,IAEf,OACE34F,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACT10B,GAAG,UACHsT,KAAMuuF,EAAAA,GACNv6B,YAAaq8B,GACbhvE,UAAWtS,IAET2hF,IACA,OAAQ3hF,GACN,KAAKuhF,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE14F,EAAAA,GAAAA,cAAC+4F,GAAY,CACX5mE,UAAWA,EACXnoB,SAAUA,EACVmtF,kBAAmByB,EACnBxB,0BAA2ByB,EAC3BxB,WAAYG,EACZviC,QAASA,IAGf,KAAKyjC,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE14F,EAAAA,GAAAA,cAACg5F,GAAY,CACX7mE,UAAWA,EACXnoB,SAAU8uF,GAAgB9uF,EAC1B+jD,UAAW6qC,EACX3jC,QAASA,IAGf,QACE,OAAiB,GAGZ,I,wCCrCjB,MA2FA,IAAex3D,EAAAA,EAAAA,KA3FqBlG,IAS9B,IAT+B,SACnCyS,EAAQ,iBACRivF,EAAgB,gBAChBC,EAAe,QACfjkC,EAAO,cACPkkC,EAAa,uBACbC,EAAsB,0BACtBC,EAAyB,gBACzBtF,GACDx8F,EACC,MAAM,sBAAE+hG,IAA0Bl6F,EAAAA,EAAAA,MAC5BU,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQ86C,IAGV,MAAMskC,GAA8Bj6F,EAAAA,EAAAA,KAAY,KAC9Cg6F,EAAsB,CAAExzF,UAAU,GAAQ,GACzC,CAACwzF,KAEE,uCACJE,EAAsC,gCACtCC,GCtDW,SAA+CC,GAC5D,MAAM/9F,GAAcC,EAAAA,EAAAA,KACd49F,GAAyC9+F,EAAAA,EAAAA,IAAOg/F,GAChDC,GAAuB91E,EAAAA,EAAAA,GAAY61E,GAWzC,OAJyB,IAArBA,GAA8BC,IAAyBD,IACzDF,EAAuC3+F,SAAU,GAG5C,CAAE2+F,yCAAwCC,gCATjD,WACED,EAAuC3+F,QAAU/B,QAAQ4gG,GACzD/9F,GACF,EAOF,CDwCMi+F,CAAsCX,IAGxC7lF,aAAcymF,EACdvmF,qBAAsBwmF,IACpBtmF,EAAAA,GAAAA,IAAmBylF,IAEjB,uBACJc,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBlB,GAClBmB,EAAsBnB,GAAoBiB,EAEhD,OACEl6F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAKmhB,OAASjhB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAC9BH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASy0D,EACT1xD,UAAU,sBACVpD,WAAWuG,EAAAA,GAAAA,GACT5G,EAAKmhB,OAAS,MACdm5E,GAAuBt6F,EAAKmhB,OAAS,gBACrCu4E,EAAuC3+F,SAAWiF,EAAKmhB,OAAS,sBAElEo5E,gBAAiBZ,GAEjBz5F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEd05F,GAAqB75F,EAAAA,GAAAA,cAAA,MAAIG,UAAW25F,GAAkBh6F,EAAK,kBAC3Do5F,EAAgBpzF,UACf9F,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,2BACVkE,UAAU,QACVg2F,gBAAiBv6F,EAAKmhB,MAAQw4E,OAAkC5hG,GAEhEmI,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,oBAAoBtD,QAAS+4F,GACzCz5F,EAAK,kCAKdE,EAAAA,GAAAA,cAACs6F,GAAAA,EAAQ,CACPC,WAAW,WACXvwF,SAAUA,EACVivF,iBAAkBmB,EAClBhB,uBAAwBA,EACxBC,0BAA2BA,EAC3BtF,gBAAiBA,EACjBmF,gBAAiBA,IAElBa,GACC/5F,EAAAA,GAAAA,cAACw6F,GAAAA,EAAU,CACT17F,OAAQm6F,EACRE,cAAeA,EACfsB,qBAAsBR,EACtB1vE,oBAAqByvE,IAGrB,I,gBE9FV,MAyEA,IAAev8F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQiwB,KAAMi7C,EAAavV,WAAYonC,GAAqB/8F,EAAO01D,YAEnE,MAAO,CACLwV,cACA6xB,mBACD,GAPeh9F,EAzE+BnG,IAO7C,IAP8C,OAClDuH,EAAM,OACNV,EAAM,YACNyqE,EAAW,iBACX6xB,EAAgB,QAChBz7F,EAAO,oBACPsrB,GACDhzB,EACC,MAAM,gBAAEojG,IAAoBv7F,EAAAA,EAAAA,MAEtBU,GAAOC,EAAAA,EAAAA,KAEP66F,GAA2BvhG,EAAAA,EAAAA,KAAQ,IAClCwvE,EAIEvzE,OAAO02B,KAAK68C,GAAaj9C,QAAO,CAACriB,EAAQ+9B,KAC9C,MAAM,gBAAE8kC,EAAe,cAAEkE,GAAkBzH,EAAYj0D,OAAO0yB,IAK9D,OAJI8kC,EAAgBr3E,SAASqJ,IAAWkyE,GAAev7E,SAASqJ,KAC9DmL,EAAO1F,KAAKyjC,GAGP/9B,CAAM,GACZ,IAVM,IAWR,CAACnL,EAAQyqE,KAELgyB,EAAmBC,IAAwBl1F,EAAAA,EAAAA,IAAmBg1F,GAE/DG,GAAU1hG,EAAAA,EAAAA,KAAQ,IACfqhG,GAAkBnsE,QAAQ+Y,GAAaA,IAAawiC,EAAAA,MAAerqE,KAAK6nC,IAAQ,CACrFpS,MAAO2zC,EAAcA,EAAYvhC,GAAUlnC,MAAQ,GACnDuP,MAAOwmB,OAAOmR,QACT,IACN,CAACozD,EAAkB7xB,IAEhBpvC,GAAen6B,EAAAA,EAAAA,KAAY,KAC/B,MAAM07F,EAAcJ,EAAyBrsE,QAAQz5B,IAAQ+lG,EAAkB9lG,SAASD,KAAK2K,IAAImV,QAC3FqmF,EAAWJ,EAAkBtsE,QAAQz5B,IAAQ8lG,EAAyB7lG,SAASD,KAAK2K,IAAImV,QAE9F+lF,EAAgB,CAAEv8F,SAAQ48F,cAAaC,aACvCh8F,GAAS,GACR,CAACb,EAAQu8F,EAAiBC,EAA0B37F,EAAS47F,IAEhE,GAAKhyB,GAAgB6xB,EAIrB,OACE16F,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTsrB,oBAAqBA,EACrBrqB,QAASu5B,EACTt5B,UAAU,SACVC,MAAON,EAAK,gBAEZE,EAAAA,GAAAA,cAACk7F,GAAAA,EAAa,CACZnsD,QAASgsD,EACT7mB,SAAU2mB,EACVjrF,SAAUkrF,EACVx3F,OAAK,IAEPtD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,UAAUH,UAAU,wBAAwBI,QAAM,EAACC,QAASi5B,GACvE35B,EAAK,gBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,KCrF8B,IAUrCq7F,GAAY,SAAZA,GAAY,OAAZA,EAAY,eAAZA,EAAY,kBAAZA,EAAY,mBAAZA,EAAY,eAAZA,EAAY,mBAAZA,EAAY,aAAZA,CAAY,EAAZA,IAAY,IASjB,MA6DA,IAAe19F,EAAAA,EAAAA,KA7DqBlG,IAM9B,IAN+B,OACnCuH,EAAM,OACNV,EAAM,QACNouB,EAAO,QACPvtB,EAAO,oBACPsrB,GACDhzB,EACC,MAAO6jG,EAAiBC,IAAsBz1F,EAAAA,EAAAA,IAASu1F,GAAaG,UAC9D,qBAAEC,EAAoB,sBAAEC,IAA0Bp8F,EAAAA,EAAAA,MAElDU,GAAOC,EAAAA,EAAAA,KAEP07F,GAAiBpiG,EAAAA,EAAAA,KAAQ,IAAM,CACnC,CAAE67B,MAAOp1B,EAAK,gBAAiB,GAAI6P,MAAOwrF,GAAaO,SACvD,CAAExmE,MAAOp1B,EAAK,gBAAiB,GAAI6P,MAAOwrF,GAAaQ,WACvD,CAAEzmE,MAAOp1B,EAAK,gBAAiB,GAAI6P,MAAOwrF,GAAaS,YACvD,CAAE1mE,MAAOp1B,EAAK,eAAgB,GAAI6P,MAAOwrF,GAAaU,QACtD,CAAE3mE,MAAOp1B,EAAK,eAAgB,GAAI6P,MAAOwrF,GAAaW,WACtD,CAAE5mE,MAAOp1B,EAAK,mBAAoB6P,MAAOwrF,GAAaG,WACrD,CAACx7F,IAEE25B,GAAen6B,EAAAA,EAAAA,KAAY,KAC/B,IAAIy8F,EAEFA,EADEX,IAAoBD,GAAaG,QACvBhmE,EAAAA,IAEAtxB,KAAKyH,MAAM6P,KAAKC,MAAQ,KAAQ3G,OAAOwmF,GAEjD5uE,EACFgvE,EAAsB,CAAEp9F,SAAQouB,UAASuvE,cAEzCR,EAAqB,CAAEn9F,SAAQ29F,cAEjC98F,GAAS,GACR,CAACb,EAAQg9F,EAAiBn8F,EAASutB,IAEtC,OACExsB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,EACRG,QAASA,EACTsrB,oBAAqBA,EACrBrqB,QAASu5B,EACTt5B,UAAU,SACVC,MAAON,EAAK,kBAEZE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,UACL2mC,QAAS0sD,EACTvnB,SAAUknB,EACVxrF,SAAUyrF,IAEZr7F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,UAAUH,UAAU,wBAAwBI,QAAM,EAACC,QAASi5B,GACvE35B,EAAK,gBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASvB,GAAUa,EAAK,YAErE,I,wCCsCZ,SAASk8F,GAAaC,GACpB,OAAIA,EACK,4BAEF,uBACT,CClIA,IAAIC,GACAp+E,GAEJ,MAAMq+E,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACN5yC,KAAK,GAsBDp1C,GAAkBpO,IACtB,MAAM8Z,EAAS,WAAY9Z,EAAIA,EAAE8Z,OALT9Z,IAChB,mBAAoBA,EAAIA,EAAEq2F,eAAe,GAAGjqF,QAAU,EAIpBkqF,CAAUt2F,GAEpD,IACGu1F,KAEGA,GAAax0E,SAAS/gB,EAAEwV,SAExB+/E,GAAajnG,WAAa,GAAKwrB,GAAU,GAEzCy7E,GAAajnG,WAAcinG,GAAaxtD,aAAewtD,GAAahnG,cAAiBurB,GAAU,EACnG,CACA,GAAI3C,IAA4BnX,EAAEwV,OAAuBtnB,QAAQipB,IAA0B,OAC3FnX,EAAEoO,gBACJ,GAGF,SAASmoF,GAA4Bv2F,GAC/Bw1F,GAAax1F,EAAEpC,OArCrB,SAAmB4X,GACjB,KAAKA,GAAYA,aAAkBghF,aAAc,OAAO,EACxD,MAAM/nG,EAAU+mB,EACVihF,EAAUhoG,EAAQgoG,QAAQ1xE,cAChC,GAAgB,aAAZ0xE,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAMx7F,EAAOxM,EAAQioG,aAAa,QAClC,QAAKz7F,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjD6iB,QAAQ7iB,EAAK8pB,gBAAkB,CACnD,CAwB8B4xE,CAAU32F,EAAEwV,SACtCxV,EAAEoO,gBAEN,CAEO,SAASwoF,GAAiBC,EAAyBC,GACxDvB,GAAesB,EACf1/E,GAA0B2/E,EAE1BnqG,SAASiT,iBAAiB,QAASwO,GAAgB,CAAE2oF,SAAS,IAC9DpqG,SAASiT,iBAAiB,YAAawO,GAAgB,CAAE2oF,SAAS,IAClEpqG,SAASqqG,UAAYT,EACvB,CAEO,SAASU,KACd1B,QAAerkG,EACfimB,QAA0BjmB,EAC1BvE,SAASkT,oBAAoB,QAASuO,IACtCzhB,SAASkT,oBAAoB,YAAauO,IAE1CzhB,SAASqqG,UAAY,IACvB,C,wCChEA,MAAME,GAAgB,EAAIz3F,EAAAA,GAUpB03F,IAAKC,EAAAA,GAAAA,GAAuB,4BA2DlC,IAAetgG,EAAAA,EAAAA,KAzDgClG,IAMzC,IAN0C,SAC9CwiD,EAAQ,QACRjwC,EAAO,kBACPk0F,EAAiB,OACjBC,EAAM,iBACNC,GACD3mG,EACC,MAAM4mG,GAAkBxkG,EAAAA,EAAAA,GAAU,UAASogD,EAASqkD,iBAAiBtpG,MAAOgV,GAAWk0F,GACjFjkG,GAAYJ,EAAAA,EAAAA,GAAU,WAAUogD,EAASa,iBAAiB9lD,MAAOgV,GAAWk0F,GAC5EK,GAAiB1kG,EAAAA,EAAAA,GAAU,WAAUogD,EAASW,YAAY5lD,MAAOkpG,IAChEM,EAAmBC,IAAuBh8F,EAAAA,EAAAA,MAE1Ci8F,EAAY,CAAGC,IAAqBl8F,EAAAA,EAAAA,IAAQ,IAC5C8nC,EAAaq0D,EAAUC,IAAcp8F,EAAAA,EAAAA,KAM5C,OACEvC,EAAAA,GAAAA,cAAA,OACEG,UAAW29F,GAAG,IAAKG,GAAU,UAC7Bz9F,QAPJ,WACE09F,EAAiBnkD,EAASA,SAC5B,EAMI6kD,aAAc90F,IAAY00F,EAAcE,OAAW7mG,GAElDmmG,GACCh+F,EAAAA,GAAAA,cAAA,OACEG,UAAW29F,GAAG,eACd/pG,IAAKsqG,EACLzmF,IAAI,MAGN0mF,IAAsBN,GACtBh+F,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACdvmC,IAAKw1C,EAASqkD,iBAAiBtpG,GAC/Bi2C,OAAQozD,EACRnzD,KAAMwzD,EACNtzD,QAAM,EACNjvC,KAAM4hG,GACNhoF,QAAS4oF,KAGXD,IAAgBR,GAChBh+F,EAAAA,GAAAA,cAAC8qC,GAAAA,EAAe,CACdvmC,IAAKw1C,EAASa,iBAAiB9lD,GAC/Bi2C,OAAQhxC,EACRixC,KAAMX,EACNa,QAAM,EACNjvC,KAAM4hG,GACNx7D,OAAQk8D,EACR1oF,QAAS8oF,IAGT,IC3CJb,IAAKC,EAAAA,GAAAA,GAAuB,oBA0FlC,IAAetgG,EAAAA,EAAAA,KAvFwBlG,IAWjC,IAXkC,sBACtCsnG,EAAqB,aACrB/6C,EAAY,iBACZg7C,EAAgB,iBAChBC,EAAgB,mBAChBC,EAAkB,UAClBpW,EAAS,QACT9+E,EAAO,sBACPslF,EAAqB,iBACrB8O,EAAgB,WAChBe,GACD1nG,EAEC,MAAMuN,GAAMpK,EAAAA,EAAAA,IAAuB,MAC7BoF,GAAOC,EAAAA,EAAAA,KAEPi6C,GAAqB3gD,EAAAA,EAAAA,KAAQ,KACjC,MAAM+lD,EAAYy/C,GAAuBp/F,KAAK86C,IAC5C,IAAIA,EAAkBwzC,aACjBnF,GAAekW,IAAqBI,EAAAA,EAAAA,IAAgB3kD,EAAkBR,SAAU+kD,QAGjFE,GAAsBD,GAAoBA,EAAiBvjG,QAAUwjG,IACnED,EAAiBx/C,MAAK7/C,IAAA,IAAC,SAAEq6C,GAAUr6C,EAAA,OAAK+6C,EAAAA,EAAAA,IAAeV,EAAUQ,EAAkBR,SAAS,KAGlG,OAAOQ,CAAiB,IACvBhsB,OAAOz1B,UAAY,GAEtB,OAAOqmG,EAAAA,EAAAA,IAAc//C,EAAW0E,EAAa,GAC5C,CAAC+6C,EAAuBE,EAAkBD,EAAkBlW,EAAWoW,EAAoBl7C,IAExFs7C,GAAoB/lG,EAAAA,EAAAA,KAAQ,IACKgmG,IAA9BrlD,EAAmBx+C,OACtBw+C,EACAA,EAAmBxO,MAAM,EArCR,IAsCpB,CAACwO,IACEslD,EAAiBF,EAAkB5jG,OAASw+C,EAAmBx+C,OAE/D+jG,GAAsBlmG,EAAAA,EAAAA,KAAQ,KAClC,MAAMmmG,EAAkBT,GAAkBxwE,QAAO1uB,IAAA,IAAC,YAAE4/F,GAAa5/F,EAAA,YAAqBhI,IAAhB4nG,CAAyB,KAAK,GACpG,OAAO,IAAIr/C,IAAIo/C,EAAgB//F,KAAI7B,IAAA,IAAC,SAAEm8C,GAAUn8C,EAAA,OAC9CwhG,EAAkBM,WAAWtwC,GAAMA,IAAK3U,EAAAA,EAAAA,IAAe2U,EAAErV,SAAUA,IAAU,IAC5E,GACF,CAACglD,EAAkBK,IAEhBO,GAAsBrgG,EAAAA,EAAAA,KAAY,KACtC,MAAMsgG,EAAQ96F,EAAIjK,SAASqR,yBAA2B,CAAE0M,EAAG,EAAGC,EAAG,GACjEomF,EAAW,CACTrmF,EAAGgnF,EAAMhnF,EACTC,EAAG+mF,EAAM/mF,GACT,GACD,CAAComF,IAEJ,GAAKG,EAAkB5jG,OAEvB,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAW29F,GAAG,IAAKh+F,EAAKmhB,OAAS,SAAUnc,IAAKA,GACnD9E,EAAAA,GAAAA,cAAA,OAAKG,UAAW29F,GAAG,eAAgBh+F,EAAKmhB,OAAS,WACjDjhB,EAAAA,GAAAA,cAAA,OAAKG,UAAW29F,GAAG,kBACjB99F,EAAAA,GAAAA,cAAA,OAAKG,UAAW29F,GAAG,aAAch+F,EAAKmhB,OAAS,WAC/CjhB,EAAAA,GAAAA,cAAA,OAAKG,UAAW29F,GAAG,SAAUj3F,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACpDunG,EAAkB3/F,KAAI,CAACs6C,EAAUz1B,IAChCtkB,EAAAA,GAAAA,cAAC6/F,GAAwB,CACvBt7F,KAAKm8C,EAAAA,EAAAA,IAAqB3G,EAASA,UACnCjwC,QAASA,EACTo0F,iBAAkBA,EAClBnkD,SAAUA,EACVikD,mBAAoB5O,EACpB6O,OAAQsB,EAAoBl+C,IAAI/8B,OAGnCg7E,GACCt/F,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,cACNH,UAAW29F,GAAG,aACdt9F,QAASm/F,GAET3/F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAKjB,IC2UV,IAAe1C,EAAAA,EAAAA,KA3U0BlG,IA4EnC,IA5EoC,mBACxCyiD,EAAkB,aAClB8J,EAAY,OACZhlD,EAAM,QACNpJ,EAAO,UACPkzF,EAAS,qBACT7sC,EAAoB,iBACpB+iD,EAAgB,mBAChBE,EAAkB,OAClBc,EAAM,WACNC,EAAU,WACVC,EAAU,cACVC,EAAa,cACbtpD,EAAa,SACbupD,EAAQ,QACRC,EAAO,UACPC,EAAS,OACTC,EAAM,SACNC,EAAQ,UACRh/F,EAAS,UACTQ,EAAS,WACTgqD,EAAU,eACVy0C,EAAc,iBACdC,EAAgB,QAChBC,EAAO,YACPC,EAAW,UACXC,EAAS,YACTj1C,EAAW,WACXk1C,EAAU,UACVC,EAAS,aACTC,EAAY,aACZ3gB,EAAY,gBACZ4gB,EAAe,kBACfC,EAAiB,cACjBhgG,EAAa,kBACbigG,EAAiB,cACjBC,EAAa,sBACbC,EAAqB,oBACrBC,EAAmB,kBACnBC,EAAiB,eACjBC,EAAc,gBACdtR,EAAe,sBACfZ,EAAqB,aACrBmS,EAAY,QACZC,EAAO,aACPC,GAAY,OACZC,GAAM,MACNC,GAAK,QACLx2C,GAAO,UACPhpD,GAAS,SACTgrD,GAAQ,SACRnrD,GAAQ,cACR4/F,GAAa,gBACbC,GAAe,SACflvC,GAAQ,OACRmvC,GAAM,aACNC,GAAY,QACZ9iG,GAAO,oBACPsrB,GAAmB,WACnBy3E,GAAU,aACVC,GAAY,WACZC,GAAU,UACVC,GAAS,aACTC,GAAY,YACZC,GAAW,aACXC,GAAY,eACZC,GAAc,iBACdrE,GAAgB,eAChBsE,GAAc,WACdC,GAAU,gBACVC,GAAe,cACfC,GAAa,qBACbC,GAAoB,YACpBC,GAAW,eACXC,GAAc,iBACdC,IACDxrG,EACC,MAAM,iBAAE04B,GAAgB,eAAEs/D,GAAc,oBAAEyT,KAAwB5jG,EAAAA,EAAAA,MAE5D6jG,IAAUvoG,EAAAA,EAAAA,IAAuB,MAEjCwoG,IAAgBxoG,EAAAA,EAAAA,IAAuB,MACvCoF,IAAOC,EAAAA,EAAAA,KAEPojG,GAAgB/B,MADDxY,IAAckW,GAE7BsE,KAAuB,OAAQ1tG,GAC/B0T,GAAag6F,GAAkC,GAAb1tG,EAAQZ,GAC1C84D,GAAew1C,QAA2CvrG,EAAtBnC,EAAQk4D,aAE3Cy1C,GAAgBC,KAAa/gG,EAAAA,EAAAA,MAC7BuH,GAASy5F,GAAaC,KAAiBjhG,EAAAA,EAAAA,MACxC,SAAEC,GAAQ,UAAEihG,KAAchhG,EAAAA,EAAAA,MAC1BihG,IAAmBrqG,EAAAA,EAAAA,KAAQ,IAAOu0D,GAAct4D,OAAO02B,KAAK4hC,IAAapyD,OAAS,GAAI,CAACoyD,KAEvF+1C,IAAkBrkG,EAAAA,EAAAA,KAAY,KAClC2wB,GAAiB,CACfv6B,QAASoK,GAAK,uBAEhBb,IAAS,GACR,CAACa,GAAMb,GAASgxB,KAEb2zE,IAA4BtkG,EAAAA,EAAAA,KAAY,KACvC0wF,IAC0B,IAA3BA,EAAgBx0F,OAClB+zF,GAAe,CACb5wC,eAAgB,CACd9X,UAAWmpD,EAAgB,GAAGnpD,aAIlCm8D,GAAoB,CAClB/+C,OAAQ+rC,EAAgBvwF,KAAKtD,GAAQA,EAAIrH,OAG7CmK,KAAS,GACR,CAAC+wF,EAAiB/wF,GAAS+jG,GAAqBzT,KAE7CsU,GAAcT,GAChB,GJnNC,SACL1tG,EACAuO,EACA6/F,EACA9B,EACAQ,EACAP,GAEA,MAAMlzD,EAAwB,GACxBxpC,GAAOw+F,EAAAA,EAAAA,IAAeruG,GACtBiC,GAAQC,EAAAA,EAAAA,IAAgBlC,MACvB0C,EAAAA,EAAAA,IAAuB1C,QAA6CmC,GAAlCK,EAAAA,EAAAA,IAAuBxC,IAC1Dm9B,GAAUmxE,EAAAA,EAAAA,IAAkBtuG,GAC5BgtD,GAAYjpD,EAAAA,EAAAA,IAAoB/D,EAAS,UACzCuuG,EAAmBtsG,IAAU+qD,IAAawhD,EAAAA,EAAAA,IAAuBxuG,KAAayuG,GAAAA,GAC9EC,EAAYhoG,OAAOioG,eAezB,GAbIJ,GACFl1D,EAAQlrC,KAAK,CACXqxB,MAAO,yBACPpxB,KAAM,aACNqgE,QAASA,KACPmgC,QAAQC,QAAQ7hD,EAAY8hD,GAAAA,GAAkB9hD,EAAW9oD,EAAAA,GAAAA,SAA0BjC,EAAO0C,SACvFw0C,KAAK41D,GAAAA,IAERX,KAAe,IAKjB7/F,EACF8qC,EAAQlrC,KAAK,CACXqxB,MAAO,wBACPpxB,KAAM,OACNqgE,QAASA,MACPf,EAAAA,GAAAA,IAAoBn/D,GAEpB6/F,KAAe,SAGd,GAAIv+F,EAAM,CAEf,MAAM02F,EAAenjG,QACnBsrG,GAAWM,YAAYC,YACnBP,EAAUM,WAAWC,WAA2B9vG,QAAQ,4BACD,KAAxDuvG,EAAU70D,WAAW5V,QAAQ,kBAAmB,KAGrDoV,EAAQlrC,KAAK,CACXqxB,MAAO8mE,GAAaC,GACpBn4F,KAAM,OACNqgE,QAASA,KACP,MAAM5kE,GAAaqlG,EAAAA,GAAAA,KACnB,GAAIrlG,GAAY/D,QAAUgnG,EACxBA,EAAejjG,QACV,GAAI08F,EACT3oG,SAASuxG,YAAY,YAChB,CACL,MAAMC,GAAgBztF,EAAAA,EAAAA,GACpB3hB,OAASmC,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,GAE9DitG,IAAeC,EAAAA,GAAAA,IAAoBD,EAAc9uF,KAAK,KAAKgvF,EAAAA,EAAAA,IAA2BtvG,GAC5F,CAEAouG,KAAe,GAGrB,CA0BA,OAxBI9B,GACFjzD,EAAQlrC,KAAK,CACXqxB,MAAO,gCACPpxB,KAAM,OACNqgE,QAASA,KACP69B,IAEA8B,KAAe,IAKjBjxE,GAAWovE,GACblzD,EAAQlrC,KAAK,CACXqxB,MAAO,yBACPpxB,KAAM,OACNqgE,QAASA,KACP89B,IAEA6B,KAAe,IAKd/0D,CACT,CIsHMk2D,CACAvvG,EAASqqG,EAAY4D,GAAiBjD,EAAcsB,QAAanqG,EAAW2qG,GAAgBP,IAG1FiD,IAAoB5lG,EAAAA,EAAAA,KAAY,IAC7B8jG,GACH9vG,SAASe,cAAc,6DACvBf,SAASe,cAAe,gEAA+D+U,SAC1F,CAACg6F,GAAoBh6F,KAElB+7F,IAAiB7lG,EAAAA,EAAAA,KACrB,IAAMhM,SAASe,cAAc,4CAC7B,IAGI+wG,IAAiB9lG,EAAAA,EAAAA,KACrB,IAAMhM,SAASe,cAAc,gCAC7B,IAGIgxG,IAAY/lG,EAAAA,EAAAA,KAAY,KAC5B,MAAMgmG,EAA0B9iG,IAC1BlP,SAASe,cAA2B,yBAA0Ba,cAAiB,EAC/EqwG,EAAgBjyG,SAASe,cAA2B,+BACpDmxG,GAAuBhjG,KAAa8iG,IACjC9iG,IAAY+iG,GAAe/xG,UAAUk0B,SAAS,gBAClD69E,GAAerwG,cAAiB,EAErC,MAAO,CACLuwG,cAzJkB,GA0JlBC,gBAAkBpyG,SAASe,cAA2B,iBAAmBa,aACzEywG,YAAaxC,GA1JiB,QA0J6BtrG,EAC3D+tG,eAAgBJ,EAAoBF,EACpCO,6BAA8BpC,GAC9BqC,eAAgB3C,IAAiB3gG,GA5JH,MA4J4C4D,EAAAA,QAAMvO,EACjF,GACA,CAAC4rG,GAAWjhG,GAAU2gG,MAEzBrnG,EAAAA,EAAAA,KAAU,KACHgD,EAKLzC,YAAW,KACTknG,IAAa,GAtKQ,KAiKrBC,IAMoB,GACrB,CAAC1kG,EAAQykG,GAAaC,KAEzB,MAAM,UACJn/F,GAAS,UAAE2L,GAAS,iBAAEo3C,GAAgB,iBAAE2+C,GAAgB,MAAEvwG,GAAK,UAAEwwG,GAAS,WAAEC,KAC1EC,EAAAA,GAAAA,GAAgBpG,EAAQoF,GAAmBC,GAAgBC,GAAgBC,KAE/EvpG,EAAAA,EAAAA,KAAU,KACRyhG,GAAiB0I,GAAa/C,GAAcroG,aAAUhD,EAAW,mBAE1D+lG,KACN,CAACqI,KAEJ,MAAME,IAA2B7mG,EAAAA,EAAAA,KAAa8P,IAC5CwzF,GAAsBxzF,GACtBk0F,IAAW,GACV,CAACV,KAEJ,OACE5iG,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjL,IAAKm+F,GACLnkG,OAAQA,EACRsoD,iBAAkBA,GAClB2+C,iBAAkBA,GAClB1hG,UAAWA,GACX2L,UAAWA,GACXxa,MAAOA,GACP4wG,YAAaJ,GACb7lG,WAAWuG,EAAAA,GAAAA,GACT,qBAAsB,QAASy8F,IAAiB,kBAElDnP,qBAAsBuN,EACtBtiG,QAASA,GACTsrB,oBAAqBA,IAEpB44E,IACCnjG,EAAAA,GAAAA,cAACqmG,GAAgB,CACfvH,iBAAkBA,EAClBh7C,aAAcA,EACd+6C,sBAAuB7kD,EACvB+kD,iBAAmBqE,QAAkDvrG,EAA7BnC,EAAQ0pD,WAAW0P,QAC3DkwC,mBAAoBA,EACpBd,iBAAkBA,GAClBtV,UAAWA,EACX9+E,QAASA,GACT6sC,cAAeA,EACfoF,qBAAsBA,EACtBqzC,sBAAuBA,EACvB6P,WAAYkH,KAIhBnmG,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,4DACA28F,IAAkB,mCAEpB7tG,MAAOwwG,GACPlhG,IAAKo+F,IAEJlD,GAAchgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,eAAetD,QAASshG,IAAShiG,GAAK,wBACnEmgG,GACCjgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASuhG,IAAejiG,GAAK,4BAExDogG,GAAYlgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,QAAQtD,QAASghG,GAAU1hG,GAAK,WAC1DsgG,GAAatnG,QAAQmoG,GAAmBqF,gBACxCtmG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,UAAUtD,QAASihG,IAC/B3hG,GAAK,kCAAmCmhG,EAAmBqF,cAAe,MAG9EnG,GAAWngG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAASkhG,IAAS5hG,GAAK,SACxDygG,GACCvgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASohG,IAAgB9hG,GAAK,mBAEzD0gG,GACCxgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASqhG,IAAkB/hG,GAAK,iCAE3DqgF,GAAgBngF,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASqiG,IAAc/iG,GAAK,qBACtEihG,GAAmB/gG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASsiG,IAAiBhjG,GAAK,uBAC5EkhG,GACChhG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,MAAMtD,QAASuiG,IAAmBjjG,GAAK,6BAEvD2gG,GAAWoD,GAAYpkG,KAAKwvC,GAC3BjvC,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACC,IAAK0qC,EAAO/Z,MAAOpxB,KAAMmrC,EAAOnrC,KAAMtD,QAASyuC,EAAOk1B,SAAUrkE,GAAKmvC,EAAO/Z,UAEvFmrE,GAAUrgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,MAAMtD,QAASmhG,IAAQ7hG,GAAK,cACrDwgG,GAAYtgG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,QAAQtD,QAAS2qD,IAAUrrD,GAAK,gBAC3D8gG,GAAc5gG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS2hG,IAAYriG,GAAK,yBAC9D+gG,GAAa7gG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAStD,QAAS4hG,IAAetiG,GAAK,sBAClEghG,GAAgB9gG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS6hG,IAAcviG,GAAK,mBAClE4rD,GACC1rD,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAAS0hG,IAChBpiG,GAAhBkB,EAAqB,8BAAsC,uBAG/D8qD,GAAc9rD,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,UAAUtD,QAAS2B,IAAYrC,GAAK,YACjE6gG,GAAa3gG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,SAAStD,QAASmyD,IAAW7yD,GAAK,kBAC9DgC,GAAa9B,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAASwB,IAAWlC,GAAK,4BAC3DohG,GAAiBC,KAA2BiC,IAC5CpjG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPnE,UAAU,8BACV2D,KAAMq9F,EAAwB,gBAAkB,QAChD3gG,QAAS2gG,EAAwBoB,GAAiBD,GAClDnyF,UAAWgxF,IAA0BuC,IAErC1jG,EAAAA,GAAAA,cAAA,QAAMG,UAAU,qCACbghG,GAAyBzrG,EAAQ84D,UAAUjlB,MAC1C23D,GAAiBwC,GACb5jG,GACA,yCACA,CAACpK,EAAQ84D,SAASjlB,MAAOm6D,KAEzB5jG,GAAK,4BAA6BpK,EAAQ84D,SAASjlB,MAAO,KAEzC,IAArBm6D,IAA0BrC,GACtB5gG,EAAAA,GAAAA,IAAW00B,EAAAA,EAAAA,IAAgBksE,EAAkB,KAC5CqC,GACC5jG,GAAK,+BAAgC4jG,GAAkB,KACvD5jG,GAAK,oCAIfE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACZkhG,GAAmB5hG,KAAKyiB,GACvBliB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,QACLimB,KAAMA,QAMf5gB,GAAatB,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACmhC,aAAW,EAAC3hC,KAAK,SAAStD,QAAS2sD,IAAWrtD,GAAK,WAC1EwhG,GACCthG,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACumG,GAAAA,EAAa,OACZvW,GACAhwF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACwmG,GAAAA,EAAQ,CAACC,QAAM,EAACtmG,UAAU,qBAC3BH,EAAAA,GAAAA,cAACwmG,GAAAA,EAAQ,CAACC,QAAM,EAACtmG,UAAU,sBAG9B6vF,GAA8C,IAA3BA,EAAgBx0F,QAClCwE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACoiG,UAAQ,EAAClmG,QAASojG,GAA2BzjG,UAAU,2BAC9DM,EAAAA,GAAAA,GAAWX,GAAK,2BAA4BkwF,EAAgB,GAAG5vF,OAAQ,CAAC,kBAAmB,WAG/F4vF,GAAmBA,EAAgBx0F,OAAS,GAC3CwE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACoiG,UAAQ,EAAClmG,QAASojG,GAA2BzjG,UAAU,2BAC9DM,EAAAA,GAAAA,GAAWX,GAAK,4BAA6BkwF,EAAgBx0F,QAAS,CAAC,sBAK/E4nG,IAAsB1tG,EAAQixG,aAC7B3mG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,UAAUtD,QAASmiG,IAAgB7iG,GAAK,4BAExDsjG,IAAsBpjG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAASiiG,IAAa3iG,GAAK,yBACvEsjG,IAAsBV,IACrB1iG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAASkiG,IAAkB5iG,GAAK,YAGrD,IC8HX,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMm1F,KAAiE,IAA/D,QAAEp9F,EAAO,gBAAEiM,EAAe,iBAAEilG,GAAkB9T,EACrD,MAAM,SAAEh1F,IAAaC,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EACpD+7D,GAAkBmtC,EAAAA,EAAAA,IAAsBlpG,EAAQjI,EAAQ0I,QACxDF,GAAOC,EAAAA,EAAAA,IAAWR,EAAQjI,EAAQ0I,SAClC,gBAAE0oG,EAAe,qBAAEC,EAAoB,mBAAE/H,GAAuBrhG,EAAO+0C,WAAa,CAAC,GACrF,UACJs0D,EAAS,SACT9G,EAAQ,OACRG,EAAM,SACNC,EAAQ,UACRh/F,EAAS,UACTQ,EAAS,QACTq+F,EAAO,WACPr0C,EAAU,eACVy0C,EAAc,iBACdC,EAAgB,QAChBC,EAAO,YACPC,EAAW,UACXC,EAAS,YACTj1C,EAAW,WACXk1C,EAAU,UACVC,EAAS,aACTC,GACGhjG,IAAYG,EAAAA,EAAAA,IAA4BN,EAAQjI,EAASoI,IAAc,CAAC,EAEvE8qF,EAAY1qF,IAAQI,EAAAA,EAAAA,IAASJ,EAAKpJ,IAClCmyG,GAAQC,EAAAA,EAAAA,IAAaxxG,GACrBq9D,EAA+B,WAApBpxD,EACXwlG,EAAkC,cAApBxlG,EACdwwB,EAAYj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAClCxB,GAAU0qG,EAAAA,EAAAA,IAAe1xG,GACzB2xG,GAAwBC,EAAAA,EAAAA,IAA6B5xG,GACrDwrG,EAAgBpoG,QAAQoF,GACzB6oG,GACAD,IACAS,EAAAA,EAAAA,IAAYrpG,IACZ+oG,IACCE,GACDjpG,EAAKwlF,cACLxlF,EAAKwlF,cAAgBqjB,GACrBrxG,EAAQ0sB,KAAO9G,KAAKC,MAAQ,IAAOurF,GAClCU,GAAWC,EAAAA,EAAAA,IAAgB/xG,GAC3BgyG,EAAgB9e,OAAyD/wF,GAA7C8vG,EAAAA,EAAAA,IAAmBhqG,EAAQjI,EAAQ0I,QAC/D+iG,GAAyBzkG,IAAYy1B,IAAcg1E,IAAgBK,IAAa5e,GAAalzF,EAAQ0pD,aACrGwoD,EAAAA,EAAAA,IAAkBlyG,EAAQ0pD,YAAc1pD,EAAQ0pD,UAAUyoD,WAC1D3mG,GAAcC,EAAAA,EAAAA,IAAyBxD,EAAQjI,GAC/CoyG,EAAgBhvG,QAAQpD,EAAQyhB,QAAQ0b,SACxCkpB,GAAuB3J,EAAAA,EAAAA,IAA2Bz0C,GAElDoqG,GAAsBC,EAAAA,EAAAA,IAA6BrqG,EAAQjI,GAC3DuyG,EAA6BF,GAAqBtoG,KAAKtD,IAAQg9C,EAAAA,EAAAA,IAAiBx7C,EAAQxB,KACxF6zF,EAAkBiY,GAA4B1W,MAAqBz4F,SACrEmvG,OAA6BpwG,EAE3BqwG,GAA6B32C,EAAAA,EAAAA,IAAmC5zD,EAAQjI,EAAQ0I,OAAQ1I,EAAQZ,IAChGqzG,EAAiBD,EACnBpvG,SAAQsvG,EAAAA,EAAAA,IAA0BzqG,EAAQjI,EAAQ0I,OAAQ8pG,GAA4BxyG,EAAQZ,KAAKyQ,WACnG1N,GAEIsoF,aAAckoB,EAAoB,eAAEjoB,GAAmBziF,EAAOqpE,SAASC,MAEzEqhC,GAAwB1B,IAAqBxmB,EAAerrF,SAAS6xG,GACrEzmB,GAAekB,EAAAA,IAA4BgnB,GAAwB3yG,EAAQyhB,QAAQ5R,MACpF+iG,IAAyB5rG,IAAY2qG,IAA0BF,IAAgBK,IAAaW,IAC3FzyG,EAAQ6yG,eAEd,MAAO,CACLvuD,mBAAoBr8C,EAAOq8C,mBAC3B8J,aAAcnmD,EAAOmmD,aACrBkjD,YACAhH,WAAYmH,EACZlH,cAAekH,EACfjH,UAAWntC,IAAao0C,GAAejH,EACvCG,QAAS8G,GAAe9G,EACxBC,UAAW6G,GAAe7G,EAC1Bh/F,YACAQ,YACAq+F,SAAUptC,GAAYotC,EACtBr0C,YAAaq7C,GAAer7C,EAC5By0C,gBAAiB4G,GAAe5G,EAChCC,kBAAmB2G,GAAe3G,EAClCC,QAASqH,IAAmB5mG,GAAeu/F,EAC3CC,aAAcyG,GAAezG,EAC7BC,YACAj1C,aAAcxqD,GAAewqD,EAC7Bk1C,YAAa1/F,GAAe0/F,EAC5BC,YACAC,cAAeqG,GAAerG,EAC9BpnC,kBACAwnC,gBACApC,iBAAkB5gG,GAAMsqG,iBAAc3wG,EAAY6vG,GAAc5I,iBAChEE,qBACApW,YACA7sC,uBACA0sD,YAAa3vG,QAAQ4uG,GACrBvG,wBACAC,qBAAsB1kG,IAAY8qG,IAAaL,GAAejpG,GAAMpJ,KAAO4zG,EAAAA,IAC3E/xD,eAAgBoF,KAAyBnF,EAAAA,EAAAA,IAA+Bj5C,GACxEoqG,sBACA/X,kBACA2Y,wBAAwBC,EAAAA,EAAAA,IAA6BjrG,EAAQjI,EAAQ0I,QACrEN,WACAqiF,gBACA4gB,gBAAiBoH,EACjBnH,kBAAmBmH,EACnB/Y,uBAAuBjrC,EAAAA,EAAAA,IAA4BxmD,GACpD,GA3GeD,EA9coCnG,IAmDlD,IAnDmD,mBACvDyiD,EAAkB,aAClB8J,EAAY,OACZhlD,EAAM,gBACN6C,EAAe,aACfknG,EAAY,QACZnzG,EAAO,oBACPqyG,EAAmB,gBACnB/X,EAAe,MACfjxF,EAAK,OACL+gG,EAAM,WACNC,EAAU,UACViH,EAAS,WACThH,EAAU,YACVyI,EAAW,cACXxI,EAAa,SACbC,EAAQ,OACRG,EAAM,kBACNY,EAAiB,SACjBX,EAAQ,UACRh/F,EAAS,UACTQ,EAAS,sBACTq/F,EAAqB,oBACrBC,EAAmB,QACnBjB,EAAO,iBACPrB,EAAgB,mBAChBE,EAAkB,UAClBpW,EAAS,qBACT7sC,EAAoB,WACpB+P,EAAU,cACVnV,EAAa,eACb4pD,EAAc,iBACdC,EAAgB,QAChBC,EAAO,YACPC,EAAW,UACXC,EAAS,YACTj1C,EAAW,WACXk1C,EAAU,UACVC,EAAS,aACTC,EAAY,sBACZ1R,EAAqB,gBACrB11B,EAAe,UACf0mC,EAAS,cACTc,EAAa,uBACbyH,EAAsB,aACtBxoB,EAAY,gBACZ4gB,EAAe,kBACfC,EAAiB,SACjBljG,GAAQ,QACRmB,GAAO,oBACPsrB,IACDhzB,EACC,MAAM,SACJgnC,GAAQ,gBACRuqE,GAAe,aACfC,GAAY,WACZn+C,GAAU,gBACVlnC,GAAe,YACfslF,GAAW,cACXC,GAAa,uBACbC,GAAsB,sBACtBC,GAAqB,kBACrBC,GAAiB,qBACjB1mG,GAAoB,2BACpBC,GAA0B,WAC1B0mG,GAAU,gBACVC,GAAe,qBACfC,GAAoB,aACpBC,GAAY,aACZ/6C,GAAY,kBACZg7C,GAAiB,QACjBC,GAAO,aACPzsD,GAAY,eACZ0sD,GAAc,UACdC,GAAS,eACTC,GAAc,0BACdr4C,GAAyB,oBACzBs4C,GAAmB,yBACnBC,GAAwB,mBACxBC,KACE5qG,EAAAA,EAAAA,MAEEU,IAAOC,EAAAA,EAAAA,MACP,qBAAEuT,KAAyBE,EAAAA,GAAAA,GAAkB1U,EAAQyrB,QAAqB1yB,GAAW,IACpF2sC,GAAYylE,KAAiBrkG,EAAAA,EAAAA,KAAS,IACtCxD,GAAmB8nG,KAAwBtkG,EAAAA,EAAAA,KAAS,IACpDoe,GAAmBmmF,KAAwBvkG,EAAAA,EAAAA,KAAS,IACpDwkG,GAAgBC,KAAqBzkG,EAAAA,EAAAA,KAAS,IAC9C0kG,GAAuBC,GAAqBC,KAAwBjoG,EAAAA,EAAAA,MAEpEkoG,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYhC,EAAwB1pG,GAASvJ,EAAQ0sB,MAGnFk/E,QAAyCzpG,IAAxBkwG,GAAqCjvG,QAAQivG,EAAoBvsG,SAExFM,EAAAA,EAAAA,KAAU,KACJolG,GAAiBpiG,GACnBuqG,GAAW,CAAEjrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAC1D,GACC,CAACu0G,GAAYvqG,EAAQpJ,EAAQ0I,OAAQ1I,EAAQZ,GAAIosG,KAEpDplG,EAAAA,EAAAA,KAAU,KACJqlG,GAAyBriG,GAC3B2vD,GAAa,CAAErwD,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAC5D,GACC,CAACqsG,EAAuBriG,EAAQ2vD,GAAc/4D,EAAQ0I,OAAQ1I,EAAQZ,MAEzEgH,EAAAA,EAAAA,KAAU,KACJisG,GAAqBvsG,QAAUw0F,GAAiBx0F,SAAWusG,EAAoBvsG,QACjFusG,EAAoB//F,SAAS7L,IAC3B8gD,GAAa,CAAE0B,eAAgBxiD,GAAM,GAEzC,GACC,CAAC4rG,EAAqB/X,EAAiB/yC,MAE1CnhD,EAAAA,EAAAA,KAAU,KACH2sG,GAAgB7f,IAAa9pF,GAChC0qG,GAAa,CAAEprG,OAAQ1I,EAAQ0I,QACjC,GACC,CAACqqG,EAAa3pG,EAAQ8pF,EAAW4gB,GAAc9zG,EAAQ0I,SAE1D,MAAMijG,IAAoBhoG,EAAAA,EAAAA,KAAQ,KAChC,GAAI3D,EAAQ0pD,WAAWyE,iBAAiBroD,OAAQ,CAE9C,MAAMuzB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAE9Bg9E,EAAiB,IAAIxqD,IAAI1qD,EAAQ0pD,WAAWyE,iBAAiBpkD,KAAIC,IAAA,IAAC,OAAE+tB,GAAQ/tB,EAAA,OAAKqvB,EAAUtB,EAAO,KAExG,OAAO+b,MAAM1tB,KAAK8uF,GAAgBr8E,OAAOz1B,SAAS0yC,MAAM,EAAG,EAC7D,CAEA,IAAK91C,EAAQk4D,YACX,OAIF,MAAM7+B,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KACpC,OAAOt4B,OAAO02B,KAAKt2B,EAAQk4D,aAAapiB,MAAM,EAAG,GAAG/rC,KAAK3K,GAAOi6B,EAAUj6B,KAAKy5B,OAAOz1B,QAAQ,GAC7F,CAACpD,EAAQ0pD,WAAWyE,gBAAiBnuD,EAAQk4D,cAE1C5sD,IAAgB3H,EAAAA,EAAAA,KAAQ,IACxB0F,EACKA,EAAMS,SAAS+/C,MAAMsrD,GACnBnxC,IAAkBhkE,EAAQyxG,YAAc,eAAiB,QAAQpyG,SAAS81G,EAAI/1G,MAIlF4kE,IAAkBhkE,EAAQyxG,YAAc,eAAiB,QAAQpyG,SAASW,EAAQZ,KACxF,CAAC4kE,EAAiB36D,EAAOrJ,IAEtBo1G,IAAexrG,EAAAA,EAAAA,KAAY,KAC/B2qG,IAAc,GACdC,IAAqB,EAAK,GACzB,IAEGa,IAAezrG,EAAAA,EAAAA,KAAY,KAC/B2qG,IAAc,GACdE,IAAqB,EAAK,GACzB,IAEGa,IAAY1rG,EAAAA,EAAAA,KAAY,KAC5B2qG,IAAc,GACdhrG,IAAS,GACR,CAACA,KAEEqD,IAAmBhD,EAAAA,EAAAA,KAAY,KACnC4qG,IAAqB,GACrBjrG,IAAS,GACR,CAACA,KAEEilB,IAAmB5kB,EAAAA,EAAAA,KAAY,KACnC6qG,IAAqB,GACrBlrG,IAAS,GACR,CAACA,KAEEgsG,IAAgB3rG,EAAAA,EAAAA,KAAY,KAChC+qG,IAAkB,GAClBprG,IAAS,GACR,CAACA,KAEEisG,IAAc5rG,EAAAA,EAAAA,KAAY,KAC9BwpG,GAAgB,CAAE1/F,UAAW1T,EAAQZ,KACrCk2G,IAAW,GACV,CAAClC,GAAiBpzG,EAAQZ,GAAIk2G,KAE3BG,IAAmB7rG,EAAAA,EAAAA,KAAY,KACnCi/B,GAAS,CACPzpC,GAAIY,EAAQ0I,OACZN,SAAUpI,EAAQZ,KAEpBk2G,IAAW,GACV,CAACA,GAAWt1G,EAAQ0I,OAAQ1I,EAAQZ,GAAIypC,KAErC6sE,IAAa9rG,EAAAA,EAAAA,KAAY,KAC7BypG,GAAa,CAAE3/F,UAAW1T,EAAQZ,KAClCk2G,IAAW,GACV,CAACjC,GAAcrzG,EAAQZ,GAAIk2G,KAExBK,IAAY/rG,EAAAA,EAAAA,KAAY,KAC5B2qG,IAAc,GACdI,IAAkB,EAAK,GACtB,IAEGiB,IAAchsG,EAAAA,EAAAA,KAAY,KAC9BsrD,GAAW,CAAExhD,UAAW1T,EAAQZ,GAAIg2D,SAAS,IAC7CkgD,IAAW,GACV,CAACpgD,GAAYl1D,EAAQZ,GAAIk2G,KAEtBniF,IAAgBvpB,EAAAA,EAAAA,KAAY,KAEhC,GADA0rG,KACIjsG,GAAOS,SAAU,CACnB,MAAMD,EAAaR,EAAMS,SAASC,KAAII,IAAA,IAAC,GAAE/K,GAAI+K,EAAA,OAAK/K,CAAE,IACpD4uB,GAAgB,CAAEoF,WAAYpzB,EAAQ0I,OAAQmB,cAChD,MACEmkB,GAAgB,CAAEoF,WAAYpzB,EAAQ0I,OAAQmB,WAAY,CAAC7J,EAAQZ,KACrE,GACC,CAAC4uB,GAAiBhuB,EAASs1G,GAAWjsG,IAEnCwsG,IAAoBjsG,EAAAA,EAAAA,KAAY,KACpC0rG,KACAhC,GAAY,CAAE9+D,QAASx0C,EAAQyhB,QAAQ+yB,SAAW,GACjD,CAAC8gE,GAAWt1G,EAAQyhB,QAAQ+yB,QAAS8+D,KAElCwC,IAAsBlsG,EAAAA,EAAAA,KAAY,KACtC0rG,KACA/B,GAAc,CAAE/+D,QAASx0C,EAAQyhB,QAAQ+yB,SAAW,GACnD,CAAC8gE,GAAWt1G,EAAQyhB,QAAQ+yB,QAAS++D,KAElCwC,IAAmBnsG,EAAAA,EAAAA,KAAY,KACnC0rG,KACArB,GAAe,CAAEvrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAAK,GAChE,CAACk2G,GAAWt1G,EAASi0G,KAElB+B,IAAkBpsG,EAAAA,EAAAA,KAAY,KAClC0rG,KACApB,GAAU,CAAExrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAAK,GAC3D,CAACk2G,GAAWt1G,EAASk0G,KAElB+B,IAAsBrsG,EAAAA,EAAAA,KAAY,KACtC,MAAM+J,EAAStK,GAAOS,SAClB,CACA4J,UAAW1T,EAAQZ,GACnB82G,gBAAiB7sG,EAAMS,SAASC,KAAI7B,IAAA,IAAC,GAAE9I,GAAI8I,EAAA,OAAK9I,CAAE,IAClD+2G,WAAW,GAEX,CAAEziG,UAAW1T,EAAQZ,GAAI+2G,WAAW,GAExC3C,GAAuB7/F,GACvB2hG,IAAW,GACV,CAACA,GAAWt1G,EAAQZ,GAAIo0G,GAAwBnqG,IAE7C+sG,IAA6BxsG,EAAAA,EAAAA,KAAY,KAC7C6pG,GAAsB,CAAE/qG,OAAQ1I,EAAQ0I,OAAQtJ,GAAIY,EAAQZ,KAC5Dk2G,IAAW,GACV,CAACA,GAAWt1G,EAAQ0I,OAAQ1I,EAAQZ,GAAIq0G,KAErC4C,IAA0BzsG,EAAAA,EAAAA,KAAa0sG,IAC3C5C,GAAkB,CAChBhrG,OAAQ1I,EAAQ0I,OAChBgL,UAAW1T,EAAQZ,GACnBk3G,gBAEF/sG,IAAS,GACR,CAACvJ,EAAQ0I,OAAQ1I,EAAQZ,GAAImK,GAASmqG,KAEnC6C,IAAqB3sG,EAAAA,EAAAA,KAAY,KACrC2qG,IAAc,GACdQ,GAAgBsB,GAAwB,GACvC,CAACA,GAAyBtB,KAEvByB,IAAwB5sG,EAAAA,EAAAA,KAAY,KACxC0rG,KACA1B,GAAgB,CAAElrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAAK,GACjE,CAACk2G,GAAWt1G,EAAQ0I,OAAQ1I,EAAQZ,GAAIw0G,KAErC6C,IAA6B7sG,EAAAA,EAAAA,KAAY,KAC7C0rG,KACAzB,GAAqB,CAAEnrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,IAAK,GACtE,CAACk2G,GAAWzB,GAAsB7zG,EAAQ0I,OAAQ1I,EAAQZ,KAEvDs3G,IAAqB9sG,EAAAA,EAAAA,KAAaC,IACtCkqG,GAAkB,CAAElqG,eACpByrG,IAAW,GACV,CAACA,GAAWvB,KAET4C,IAAiB/sG,EAAAA,EAAAA,KAAY,MACjC8jE,EAAAA,GAAAA,KAAoBkpC,EAAAA,EAAAA,IAAmB52G,EAAQ0I,OAAQyqG,EAAc/qG,GAAUpI,EAAQZ,KACvFk2G,IAAW,GACV,CAACnC,EAAcmC,GAAWt1G,EAASoI,KAEhCyuG,IAAmBjtG,EAAAA,EAAAA,KAAY,MACnC8jE,EAAAA,GAAAA,IAAoB1tE,EAAQyhB,QAAQ0b,QAAS0J,aAC7CyuE,IAAW,GACV,CAACA,GAAWt1G,IAETqN,IAAsBzD,EAAAA,EAAAA,KAAY,MACrCP,GAAOS,UAAY,CAAC9J,IAAUsS,SAAS6iG,IAClC7pG,GACF2B,GAA2B,CAAEjN,QAASm1G,IAEtCnoG,GAAqB,CAAEhN,QAASm1G,GAClC,IAEFG,IAAW,GACV,CAACjsG,EAAOrJ,EAASs1G,GAAWhqG,GAAe2B,GAA4BD,KAEpE8pG,IAAgBltG,EAAAA,EAAAA,KAAY,KAChC,MAAM7I,GAAQuB,EAAAA,EAAAA,IAAgBtC,GAC9Bg0G,GAAQ,CAAE+C,IAAKh2G,IACfu0G,IAAW,GACV,CAACA,GAAWt1G,EAASg0G,KAElBgD,IAAuBptG,EAAAA,EAAAA,KAAay6C,IACxC8vD,GAAe,CACbzrG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,GAAIilD,WAAU4yD,mBAAmB,IAE9E3B,IAAW,GACV,CAACA,GAAWt1G,EAASm0G,KAElB+C,IAA2BttG,EAAAA,EAAAA,KAAa8P,IAC5C46F,GAAmB,CAAE5rG,OAAQ1I,EAAQ0I,OAAQgL,UAAW1T,EAAQZ,GAAIsa,YAAW,GAC9E,CAAC1Z,EAAQ0I,OAAQ1I,EAAQZ,KAEtB+3G,IAAkBvtG,EAAAA,EAAAA,KAAY,KAClCkyD,GAA0B,CACxBpzD,OAAQ1I,EAAQ0I,OAChBtJ,GAAIY,EAAQZ,KAEdk2G,IAAW,GACV,CAACA,GAAWt1G,EAAS87D,KAElBs7C,IAAqBxtG,EAAAA,EAAAA,KAAY,KACrCwqG,GAAoB,CAClB1rG,OAAQ1I,EAAQ0I,OAChBtJ,GAAIY,EAAQZ,KAEdk2G,IAAW,GACV,CAACA,GAAWt1G,EAASo0G,KAElBiD,IAAuBztG,EAAAA,EAAAA,KAAY,KACvCyqG,GAAyB,CACvB3rG,OAAQ1I,EAAQ0I,OAChBtJ,GAAIY,EAAQZ,KAEdk2G,IAAW,GACV,CAACA,GAAWt1G,EAAQ0I,OAAQ1I,EAAQZ,GAAIi1G,KAErCiD,IAAmB3zG,EAAAA,EAAAA,KAAQ,KAAO0F,EAAQA,EAAMS,SAAW,CAAC9J,IAAU+J,KAAIygB,IAAA,IAAC,GAAEprB,GAAIorB,EAAA,OAAKprB,CAAE,KAAG,CAACiK,EAAOrJ,IAEzG,GAAIsxG,EAGF,YAFAgE,KAKF,MAAMiC,GAAmB,IAAI3xF,KAG7B,OAFA2xF,GAAiBp0E,YAAYo0E,GAAiBx1E,cAAgB,GAG5Dz3B,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,uBAAwB4M,KACrDtT,EAAAA,GAAAA,cAACktG,GAAkB,CACjBlzD,mBAAoBA,EACpB8J,aAAcA,EACdpuD,QAASA,EACTkzF,UAAWA,EACX7sC,qBAAsBA,EACtBpF,cAAeA,EACf73C,OAAQ0lC,GACRs6D,iBAAkBA,EAClBE,mBAAoBA,EACpBc,OAAQA,EACRC,WAAYA,EACZoB,sBAAuBA,EACvBC,oBAAqBA,EACrBpB,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACV5+F,UAAWA,EACXQ,UAAWA,EACXu+F,OAAQA,EACRY,kBAAmBA,EACnBX,SAAUA,EACVH,QAASA,EACTr0C,WAAYA,EACZy0C,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXj1C,YAAaA,EACbk1C,WAAYA,EACZC,UAAWA,EACXC,aAAcA,EACdI,cAAeA,EACf/gB,aAAcA,EACd4gB,gBAAiBA,EACjBC,kBAAmBA,EACnB5R,sBAAuBA,EACvBkS,eAAgBA,GAChBtR,gBAAiBA,EACjBhvF,cAAeA,GACfqgG,kBAAmBA,GACnBjB,UAAWA,EACXqB,aAAc0J,GACd3J,QAAS0J,GACTxJ,OAAQ0J,GACRzJ,MAAO0J,GACPlgD,QAASmgD,GACTnpG,UAAW0mB,GACXskC,SAAU29C,GACV9oG,SAAU+oG,GACVnJ,cAAe2J,GACf1J,gBAAiB2J,GACjB74C,SAAUg5C,GACV7J,OAAQgK,GACR/J,aAAckK,GACdhtG,QAAS+rG,GACThJ,WAAYqK,GACZ7J,eAAgB4J,GAChBnK,aAAcsK,GACdrK,WAAYn/F,GACZo/F,UAAWqK,GACXpK,aAAcqJ,GACdpJ,YAAakI,GACbjI,aAAc4J,GACdhO,iBAAkBwO,GAClBnK,eAAgB4J,GAChBvJ,qBAAsBgK,GACtB/J,YAAagK,GACb/J,eAAgBgK,GAChB/J,iBAAkBgK,KAEpB/sG,EAAAA,GAAAA,cAACyD,GAAkB,CACjB3E,OAAQsD,GACRvE,WAAgC,cAApB8D,EACZ1C,QAASqD,GACTvD,MAAOA,EACPrJ,QAASA,IAEXsK,EAAAA,GAAAA,cAAC4pB,EAAAA,EAAW,CACV9qB,OAAQklB,GACR/kB,QAASilB,GACT3kB,WAAYytG,KAEdhtG,EAAAA,GAAAA,cAACmtG,GAAe,CACdruG,OAAQsrG,GACRhhG,UAAW1T,EAAQZ,GACnBsJ,OAAQ1I,EAAQ0I,OAChBa,QAASgsG,KAEXjrG,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQwrG,GACRrrG,QAASurG,GACTjlG,KAAMzF,GAAK,0BACXg0B,aAAch0B,GAAK,uBACnBi0B,eAAgB23E,KAEjBzL,GAAiByK,GACd,KC1eV,IAAejtG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLg5C,gBAAgBvE,EAAAA,EAAAA,IAA2Bz0C,MAAYi5C,EAAAA,EAAAA,IAA+Bj5C,MAHxED,EArDoDnG,IAOlE,IAPmE,QACvE7B,EAAO,OACPoqG,EAAM,WACN2C,EAAU,QACVxjG,EAAO,oBACPsrB,EAAmB,cACnBosB,GACDp/C,EACC,MAAM,iBAAEs9C,EAAgB,WAAEu4D,IAAehuG,EAAAA,EAAAA,OAElColC,EAAW,CAAGwmE,IAAazoG,EAAAA,EAAAA,IAAQ,IACpC,qBAAE+Q,IAAyBE,EAAAA,GAAAA,GAAkBgxB,EAAYja,OAAqB1yB,GAAW,GAEzFw1G,GAAqB/tG,EAAAA,EAAAA,KAAY,KACrCmjG,IACAuI,GAAW,GACV,CAACA,EAAWvI,IAET6K,GAAsBhuG,EAAAA,EAAAA,KAAY,KACtC0rG,IACAn2D,IACA51C,GAAS,GACR,CAAC+rG,EAAW/rG,EAAS41C,IAElB04D,GAAoBjuG,EAAAA,EAAAA,KAAY,KACpC0rG,IACAoC,EAAW,CACT9jG,KAAM,CACJ5T,QAAS,CAACA,EAAQixG,YAAajxG,EAAQ83G,gBAAgBx3F,KAAK,QAE9D,GACD,CAACtgB,EAAQ83G,eAAgB93G,EAAQixG,cAEpC,GAAK7G,EAIL,OACE9/F,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,uBAAwB4M,IACrDtT,EAAAA,GAAAA,cAACktG,GAAkB,CACjBpuG,OAAQ0lC,EACRs7D,OAAQA,EACRpqG,QAASA,EACTuJ,QAAS+rG,EACTzgF,oBAAqBygF,EACrBvI,WAAY4K,EACZ3K,gBAAiB/rD,EAAgB22D,OAAsBz1G,EACvD8qG,cAAe4K,IAEb,KCyKV,IAAe9vG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAAuD,IAArD,YAAE4tG,EAAW,oBAAEC,GAAqB7tG,EAC3C,MAAMkB,GAAqBhD,EAAAA,EAAAA,IAAyBJ,IAC9C,OAAES,EAAM,SAAEN,GAAaiD,GAAsB,CAAC,EAC9C7C,EAAOE,IAAUD,EAAAA,EAAAA,IAAWR,EAAQS,GACpCuvG,EAAczvG,GAAO0vG,EAAAA,EAAAA,IAA4B1vG,QAAQrG,EACzDg2G,EAAazvG,GAAUN,GAAWgwG,EAAAA,EAAAA,IAAiBnwG,EAAQS,EAAQN,QAAYjG,EAC/Ek2G,EAAaj1G,QAAQ+0G,GAAYG,iBACjCC,EAAkBn1G,QACtBoF,GAAQJ,IAAYiuB,EAAAA,EAAAA,IAAiB7tB,EAAMJ,EAAUiwG,IAAeJ,GAAaM,iBAE7EryD,EAAkB9iD,QAAQsF,KAAWukB,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAElEugD,EAAiB8uD,EAAcA,EAAY9uD,eAC7C+uD,EAAsB,CAAE7mE,UAAW6mE,QAAwB71G,EAEzD4jD,EAAakD,GAAiBxF,EAAAA,EAAAA,IAAiBx7C,EAAQghD,QAAkB9mD,EAE/E,MAAO,CACL8wG,uBAAwB7vG,QAAQsF,KAAWwqG,EAAAA,EAAAA,IAA6BjrG,EAAQS,GAChF6vG,kBACAryD,kBACAsyD,gBAAgBC,EAAAA,EAAAA,IAAqBxwG,GACrC89C,aACAM,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GACjD2xF,4BAA6B3xF,EAAOqpE,SAASC,MAAMqoB,4BACpD,GA1Be5xF,EA7L+BnG,IAY7C,IAZ8C,OAClDuH,EAAM,YACN2uG,EAAW,oBACXC,EAAmB,WACnBjyD,EAAU,gBACVwyD,EAAe,uBACftF,EAAsB,eACtBuF,EAAc,gBACdtyD,EAAe,qBACfG,EAAoB,4BACpBuzC,EAA2B,QAC3BrwF,GACD1H,EACC,MAAM,aACJ0lD,EAAY,iBACZD,EAAgB,YAChBvrB,EAAW,iBACXxB,IACE7wB,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtC0/C,GAAkB1/C,EAAAA,EAAAA,IAA0B,MAE5CoF,GAAOC,EAAAA,EAAAA,MAEP,SAAEyC,IAAaC,EAAAA,EAAAA,MAEf2rG,GAAiBvqF,EAAAA,EAAAA,GAAY43B,GAC7B4yD,EAAsB5yD,GAAc2yD,EAEpCE,EAAUx1G,SAASu1G,GAAqB1uD,YAAc0uD,GAAqB3uD,eAC3ExB,EAAUmwD,GAAqBnwD,SAE9BusD,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYhC,IAE9C7uD,aAAc0K,EACd9K,cAAe+K,GACbjL,MAGF3B,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAcwgC,WA7CzB,IA6C4Dz9C,YAAawD,KAErGhD,EAAAA,EAAAA,KAAU,KACJgD,IAAWuvG,GAAqBljE,UAClC8R,EAAa,CACX0B,eAAgB8uD,EAAcA,EAAY9uD,eAAiB,CAAE9X,UAAW6mE,IAE5E,GACC,CAAC5uG,EAAQ2uG,EAAaxwD,EAAcywD,EAAqBW,IAE5D,MAAM38C,GAAepyD,EAAAA,EAAAA,KAAY,CAAC4qC,EAAqB+gB,EAAoBsjD,KACzErkE,EAAU,IACLA,EACHskE,qBAAqB,GAGnBN,GAAkBK,EACpB9D,GAAiBuB,IACfv6E,EAAY,CACVyY,UAAS+gB,WAAU+gD,gBAErB/sG,GAAS,KAGXwyB,EAAY,CACVyY,UACA+gB,WACAqkC,4BAA6BA,GAA+Bgf,IAE9DrvG,IACF,GACC,CAACA,EAASwrG,EAAiBh5E,EAAay8E,EAAgBI,EAAShf,IAE9DhnC,GAAoBhpD,EAAAA,EAAAA,KAAY,KAChC+uG,IACFrxD,EAAiB,CAAEuB,aAAc8vD,EAAoBv5G,KACrDmK,IACF,GACC,CAACA,EAASovG,EAAqBrxD,IAE5BqvD,GAAiB/sG,EAAAA,EAAAA,KAAY,KACjC,IAAK+uG,EAAqB,OAC1B,MAAM,UAAExnE,GAAcwnE,EAChBI,EAASvwD,EAAU,WAAa,cAChCr2C,EAAO,GAAE84B,EAAAA,MAAkB8tE,KAAU5nE,KAC3Cu8B,EAAAA,GAAAA,IAAoBv7D,GACpBooB,EAAiB,CACfv6B,QAASoK,EAAK,eACd,GACD,CAACo+C,EAASp+C,EAAMuuG,EAAqBp+E,IAclCsU,GAAkElrC,EAAAA,EAAAA,KAAQ,IACvEqG,IAAA,IAAC,UAAE2D,EAAWvE,OAAQ0lC,GAAY9kC,EAAA,OACvCM,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cACNH,UAAWqkC,EAAa,SAAW,GACnChkC,QAAS6C,EACTE,UAAU,gBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,CAACqC,IAwBJ,OACExC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,WAAWuG,EAAAA,GAAAA,GAAe,kBAAmBw3C,GAAW,gBACxDp/C,OAAQA,EACRG,QAASA,EACTuzB,OA3BJ,WACE,MAAMwoB,GAAgBt0C,EAAAA,GAAAA,GAAe,gBAAiB+9C,GAAuB,mBAE7E,OACEzkD,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,EAAen0C,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACvDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAWzD,EAAK,SAAUU,QAASvB,GAClFe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZkuG,GAAsB5tG,EAAAA,GAAAA,GAAW4tG,EAAoBjuG,MAAO,CAAC,QAAS,UAAYN,EAAK,uBAE1FE,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,2CACViE,QAASmgC,EACTlgC,UAAU,SAEVrE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS6rG,GAAiBvsG,EAAK,kBAI7D,CAOY4uG,IAEPL,GAAqBljE,SACpBnrC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAU,yBAAyBgvC,SAAUqV,GACnExkD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKs1C,EAAiBj6C,UAAU,kBACvCkuG,EAAoBljE,SAAS1rC,KAAKyqC,GACjClqC,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ/W,QAASA,EACTjuC,KAAMiiD,EAAUywD,EAAAA,IAAmBC,EAAAA,IACnCz0D,oBAAqBA,EACrB35C,QAASytG,IAAoB/vD,EAAUwT,OAAe75D,EACtDq1B,SAAUgd,EACV0R,gBAAiBA,EACjBG,qBAAsBA,EACtB3B,gBAAiBA,QAKzBp6C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLpE,KAAK,UACLskD,OAAK,EACLjgD,MAAOguG,EAAU,SAAW,UAC5B9tG,QAAS8nD,GAjFIumD,MACvB,IAAKR,EAAqB,OAAOvuG,EAAK,WAEtC,MAAM2uG,EAASvwD,EAAU,QAAU,UAEnC,OAAOp+C,EACLwuG,EAAW,qBAAoBG,SAAiB,kBAAiBA,SACjEJ,EAAoB9kE,MACpB,IACD,EA0EUslE,MAKP7uG,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAETq9E,EACK,KCjPZ,IAAgB,KAAO,uBAAuB,KAAO,wBC2ErD,IAAejtG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAAwC,IAAtC,kBAAEyvF,GAAmBzvF,EAC5B,MAAMswF,EAAkBb,GAAmB1vF,KAAK3K,GAAO6I,EAAOwtC,SAAS+X,SAASpuD,KAEhF,MAAO,CACLk7F,kBACAZ,uBAAuBjrC,EAAAA,EAAAA,IAA4BxmD,GACpD,GAPeD,EA/CoCnG,IAIlD,IAJmD,gBACvDy4F,EAAe,sBACfZ,EAAqB,QACrBnwF,GACD1H,EACC,MAAM,eAAEg4F,IAAmBnwF,EAAAA,EAAAA,MACrBU,GAAOC,EAAAA,EAAAA,KAGP+uG,GAAsBp0G,EAAAA,EAAAA,IAAuB,OAC3Cm9C,QAASqB,IAAiCf,EAAAA,GAAAA,IAAwB,CACxEC,QAAS02D,EAAqBxzG,YAAa00F,IAGvC+e,GAAsBlrF,EAAAA,EAAAA,GAAYmsE,GAClCgf,EAA2Bhf,GAAmB+e,EAE9CE,GAAiB3vG,EAAAA,EAAAA,KAAa4qC,IAClCqlD,EAAe,CACb5wC,eAAgBzU,EAAQyU,gBACxB,GACD,CAAC4wC,IAEJ,OACEvvF,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQhG,QAAQk3F,GAChB7vF,UAAW9K,GAAAA,KACX4J,QAASA,EACT6mC,gBAAc,EACd1lC,MAAON,EAAK,+BAEZE,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,KAAa,iBAAkByP,IAAKgqG,EAAqBI,eAAa,GAClGF,GAA0BvvG,KAAK0vG,GAC9BnvG,EAAAA,GAAAA,cAAC6vF,GAAc,CACbtrF,IAAK4qG,EAAer6G,GACpBqL,UAAW9K,GAAAA,QACXomD,WAAY0zD,EACZ3uG,QAASyuG,EACT90D,oBAAqBjB,EACrB5oC,QAAS8+E,OAIT,K,4BCrBZ,MAAMggB,GAA+D,CACnEpoC,SAAU,CACRljE,KAAM,OACNoxB,MAAO,eAET8nD,QAAS,CACPl5E,KAAM,OACNoxB,MAAO,WAETm6E,KAAM,CACJvrG,KAAM,OACNoxB,MAAO,YA8fX,IAAez3B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAAuC,IAArC,OAAEzB,EAAM,SAAEN,GAAU+B,EAC3B,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAChC,IAAKF,GAAQA,EAAKoxG,aAChB,MAAO,CAAC,EAEV,MAAM1mB,GAAYtqF,EAAAA,EAAAA,IAASJ,EAAKpJ,IAC1BotB,EAAO0mE,GAAYpqF,EAAAA,EAAAA,IAAWb,EAAQS,QAAUvG,EAChD03G,EAAgBrtF,IAAQstF,EAAAA,EAAAA,IAAiBttF,GACzCutF,EAAe3xG,IAAaqxB,EAAAA,GAC5BugF,EAAgBD,KAAiBjlD,EAAAA,EAAAA,IAActsD,KAASqpG,EAAAA,EAAAA,IAAYrpG,IAAUgkB,IAASA,EAAK+zC,SAC1F73D,OAAQuxG,EAAe7xG,SAAU8xG,IAAoB7xG,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EAE5FkyG,EAAUzxG,IAAW0xG,EAAAA,KAAkBC,EAAAA,EAAAA,IAAcpyG,EAAQS,QAAUvG,EACvEm4G,EAAepnB,GAAY9lE,EAAAA,EAAAA,IAAmBnlB,EAAQS,QAAUvG,EAChE6vG,EAAgB9e,OAAiD/wF,GAArC8vG,EAAAA,EAAAA,IAAmBhqG,EAAQS,GACvD6xG,EAAiBn3G,QACrB6E,EAAO+3D,cACJs6C,GAAcp7D,cAAcp5C,UAC3Bo7C,EAAAA,EAAAA,IAA+Bj5C,IAG/BmuB,EAAQ5tB,GAAMqtB,SAASztB,GACvBoyG,EAAiBhyG,EAAKmuB,UAC1BnuB,EAAKiyG,aAAcC,EAAAA,EAAAA,IAAkBlyG,EAAM,kBAAmBmyG,EAAAA,EAAAA,IAAiBnyG,EAAM,iBAEjFoyG,EAAexkF,IAASykF,EAAAA,EAAAA,IAAkBryG,EAAM4tB,GAEtD,MAAO,CACL5tB,OACA8P,SAASilD,EAAAA,EAAAA,IAAkB/0D,GAAMg1D,EAAAA,EAAAA,IAAqBv1D,IAASw1D,EAAAA,EAAAA,IAAuBx1D,IACtFirF,YACA4nB,QAAStyG,GAAMmuB,UAAYojF,EAC3BpjF,QAASnuB,GAAMmuB,QACfkjF,gBACAG,gBACAe,eAAeC,EAAAA,EAAAA,IAAiBxyG,GAChC+xG,iBACAU,cAAe73G,QAAQ4uG,GAAckJ,cACrCC,YAAahB,EAAUG,GAAcc,SAASC,cAAWl5G,EACzDm5G,iBAAiB36F,EAAAA,EAAAA,IAAe1Y,GAAQqzG,iBACnCrB,IAAkBvxG,GAAUwxG,IAAoB9xG,EACrDoyG,iBACAI,eACD,GA5Ce5yG,EA5cmCnG,IAuCjD,IAvCkD,OACtD6G,EAAM,SACNN,EAAQ,OACRgB,EAAM,iBACNmyG,EAAgB,OAChBnR,EAAM,UACN3tE,EAAS,YACT0+E,EAAW,iBACXK,EAAgB,QAChBV,EAAO,QACPnkF,EAAO,gBACP2kF,EAAe,YACfG,EAAW,cACXC,EAAa,aACbC,EAAY,UACZC,EAAS,QACTC,EAAO,QACPC,EAAO,kBACPC,EAAiB,oBACjBC,EAAmB,SACnBC,EAAQ,kBACRC,EAAiB,mBACjBC,EAAkB,KAClB3zG,EAAI,UACJ0qF,EAAS,QACT56E,EAAO,cACP0hG,EAAa,cACbe,EAAa,eACbR,EAAc,cACdU,EAAa,cACbpB,EAAa,eACbW,EAAc,aACdI,EAAY,oBACZwB,EAAmB,mBACnBC,EAAkB,cAClBC,EAAa,kBACbC,EAAiB,QACjBhzG,EAAO,oBACPsrB,GACDhzB,EACC,MAAM,qBACJgkG,EAAoB,uBACpB2W,EAAsB,eACtBC,EAAc,WACdC,EAAU,8BACVC,EAA6B,gBAC7BC,EAAe,eACfC,EAAc,qBACdC,EAAoB,4BACpBC,EAA2B,iBAC3BC,GAAgB,qBAChBC,GAAoB,iBACpBC,GAAgB,qBAChBC,GAAoB,mBACpBC,GAAkB,SAClBv0E,KACEn/B,EAAAA,EAAAA,OAEE,SAAEoD,KAAaC,EAAAA,EAAAA,OACd+hC,GAAYylE,KAAiBrkG,EAAAA,EAAAA,KAAS,IACtCxD,GAAmB8nG,KAAwBtkG,EAAAA,EAAAA,KAAS,IACpDoe,GAAmBmmF,KAAwBvkG,EAAAA,EAAAA,KAAS,IACpD4tD,GAAiBu/C,KAAsBntG,EAAAA,EAAAA,KAAS,IAChDquD,GAAuBC,GAAqBC,KAAyB5xD,EAAAA,EAAAA,MACtE,EAAEqW,GAAC,EAAEC,IAAMinF,GAEjBtsF,EAAAA,GAAAA,GAAkB1U,EAAQyrB,OAAqB1yB,GAAW,GAC1D,MAAMm7G,IAAuBC,EAAAA,GAAAA,KACzBjC,IAAmB3kF,SAAkBx0B,EAtEL,KAyE9BkzG,IAAezrG,EAAAA,EAAAA,KAAY,KAC/B2qG,IAAc,GACdE,IAAqB,EAAK,GACzB,IAEGjmF,IAAmB5kB,EAAAA,EAAAA,KAAY,KACnC6qG,IAAqB,GACrBlrG,GAAS,GACR,CAACA,IAEEy0D,IAAiBp0D,EAAAA,EAAAA,KAAY,KACjCyzG,IAAmB,GACnB9zG,GAAS,GACR,CAACA,IAEE6rG,IAAexrG,EAAAA,EAAAA,KAAY,KAC/B2qG,IAAc,GACdC,IAAqB,EAAK,GACzB,IAEGc,IAAY1rG,EAAAA,EAAAA,KAAY,KAC5B2qG,IAAc,GACdhrG,GAAS,GACR,CAACA,IAEEi0G,IAAsB5zG,EAAAA,EAAAA,KAAY,KACtCszG,GAAiB,CAAE99G,GAAIsJ,EAAQN,aAC/BktG,IAAW,GACV,CAAC5sG,EAAQ4sG,GAAW4H,GAAkB90G,IAEnCwE,IAAmBhD,EAAAA,EAAAA,KAAY,KACnC4qG,IAAqB,GACrBjrG,GAAS,GACR,CAACA,IAEEk0G,IAAiB7zG,EAAAA,EAAAA,KAAY,KACjC6yG,EAAe,CAAEiB,QAAS,UAAW,GACpC,CAACjB,IAEEkB,IAAmB/zG,EAAAA,EAAAA,KAAY,KACnC8yG,EAAW,CAAEh0G,UAAS,GACrB,CAACA,EAAQg0G,IAENkB,IAAoBh0G,EAAAA,EAAAA,KAAY,KACpCi8F,EAAqB,CAAEn9F,SAAQ4P,SAAS,IACxCg9F,IAAW,GACV,CAAC5sG,EAAQ4sG,GAAWzP,IAEjBgY,IAAkBj0G,EAAAA,EAAAA,KAAY,KAClC40D,KACA6+C,IAAmB,GACnB9I,IAAc,EAAM,GACnB,IAEGuJ,IAAyBl0G,EAAAA,EAAAA,KAAY,KACzCuzG,GAAqB,CAAEz0G,WACvB4sG,IAAW,GACV,CAAC6H,GAAsBz0G,EAAQ4sG,KAE5ByI,IAAuBn0G,EAAAA,EAAAA,KAAY,KACvCwzG,GAAmB,CAAE10G,SAAQouB,QAAS1uB,IACtCktG,IAAW,GACV,CAAC8H,GAAoB10G,EAAQN,EAAUktG,KAEpC0I,IAA0Bp0G,EAAAA,EAAAA,KAAY,KAC1Ci/B,GAAS,CAAEzpC,QAAI+C,IACfmzG,IAAW,GACV,CAACA,GAAWzsE,KAETo1E,IAA4Br0G,EAAAA,EAAAA,KAAY,KACxCuyG,EAEFS,EAAgB,CACdl0G,WAGFi0G,EAA8B,CAC5Bj0G,WAGJ4sG,IAAW,GACV,CAACA,GAAW6G,EAAoBzzG,EAAQi0G,EAA+BC,IAEpEsB,IAAwBt0G,EAAAA,EAAAA,KAAY,KACxCizG,EAAe,CAAEz9G,GAAIsJ,IACrB4sG,IAAW,GACV,CAAC5sG,EAAQ4sG,GAAWuH,IAEjBsB,IAAyBv0G,EAAAA,EAAAA,KAAY,KACzCqzG,GAAqB,CAAEp+D,UAAWn2C,IAClC4sG,IAAW,GACV,CAAC2H,GAAsBv0G,EAAQ4sG,KAE5B8I,IAAwBx0G,EAAAA,EAAAA,KAAY,KACxCkzG,EAAqB,CAAE/kF,OAAQrvB,IAC/B4sG,IAAW,GACV,CAACwH,EAAsBp0G,EAAQ4sG,KAE5B+I,IAAkBz0G,EAAAA,EAAAA,KAAY,KAClCyyG,IACA/G,IAAW,GACV,CAACA,GAAW+G,IAETiC,IAAkB10G,EAAAA,EAAAA,KAAY,KAClCmzG,EAA4B,CAAEhlF,OAAQrvB,EAAQrF,SAAS,IACvDiyG,IAAW,GACV,CAAC5sG,EAAQ4sG,GAAWyH,IAEjBwB,IAAa30G,EAAAA,EAAAA,KAAY,KAC7BmzG,EAA4B,CAAEhlF,OAAQrvB,IACtC4sG,IAAW,GACV,CAAC5sG,EAAQ4sG,GAAWyH,IAEjB7gD,IAAetyD,EAAAA,EAAAA,KAAY,KAC/B0yG,IACAhH,IAAW,GACV,CAACA,GAAWgH,IAETkC,IAAwB50G,EAAAA,EAAAA,KAAY,KACxCozG,KACA1H,IAAW,GACV,CAACA,GAAW0H,KAETyB,IAAuB70G,EAAAA,EAAAA,KAAY,KACvC4yG,IACAlH,IAAW,GACV,CAACA,GAAWkH,IAETkC,IAAuB90G,EAAAA,EAAAA,KAAY,KACvC2yG,IACAjH,IAAW,GACV,CAACA,GAAWiH,KAEfn2G,EAAAA,EAAAA,KAAU,KACRyhG,KAEOK,KACN,IAEH,MAAM99F,IAAOC,EAAAA,EAAAA,KAEPs0G,IAAah7G,EAAAA,EAAAA,KAAQ,IAClBw3G,GAAapxG,KAAIC,IAAiB,IAAhB,QAAE0zG,GAAS1zG,EAClC,MAAM40G,EAAMlF,GAAYgE,GACxB,GAAKkB,EAML,OACEt0G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPC,IAAK6uG,EACLtvG,KAAMwwG,EAAIxwG,KAEVtD,QAVgBqT,KAClBs+F,EAAe,CAAEiB,QAAU,IAAGA,MAC9BpI,IAAW,GAURlrG,GAAKw0G,EAAIp/E,OACD,KAGd,CAAC27E,EAAa7F,GAAWlrG,GAAMqyG,IAElC,OACEnyG,EAAAA,GAAAA,cAACwnD,GAAAA,EAAM,KACLxnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQ0lC,GACRngC,UAAU,QACV7O,MAAQ,SAAQojB,aAAYC,QAC5B5Z,QAAS+rG,IAERxoG,IAAY8uG,GACXtxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,SACLtD,QAASoxD,IAER9xD,GAAK,WAGToxG,GAAoBhB,GACnBlwG,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,WACLtD,QAASgzG,IAER1zG,GAAK,2BAERE,EAAAA,GAAAA,cAACumG,GAAAA,EAAa,OAGjByM,IACChzG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAAS0yG,IAEEpzG,GAAV0wG,EAAe,yBAAiC,2BAGpDF,GACCtwG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAASizG,IAER3zG,GAAK,yBAGT0C,KAAa0uG,GAAoB7kF,IAAYmkF,GAC5CxwG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,SACLtD,QAASkzG,IAER5zG,GAAK,6BAGToxG,GAAoBp4G,QAAQ44G,IAC3B1xG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAASsxG,GAEIhyG,GAAZqyB,EAAiB,oBAA4B,kBAC9CnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeuxG,IAGjCR,IAAqBV,GACpBxwG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,UACLtD,QAAS4zG,IAERt0G,GAAK,+BAGTmxG,GAAoBE,GACnBnxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAAS2yG,IAERrzG,GAAK,aAGTmxG,GAAoBG,GACnBpxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAAS6yG,IAERvzG,GAAK,eAGTmxG,GAAoBI,GACnBrxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAMquB,EAAY,UAAY,QAC9B3xB,QAASuzG,IAERj0G,GAAKqyB,EAAY,qBAAuB,qBAG5Co9E,GACCvvG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,WACLtD,QAASszG,IAERh0G,GAAK,eAGT0C,IAAY+uG,GACXvxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,QACLtD,QAASyzG,IAERn0G,GAAK,SAGTyxG,GACCvxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,iBACLtD,QAASwzG,IAERl0G,GAAK,cAGT0xG,IAAYxjG,EACXhO,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,SACLtD,QAAS8yG,IAERxzG,GAAK,gBAINE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAAS+yG,IAERzzG,GAAK,aAAa,SAIvB8xG,GAAqBC,IACrB7xG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,aACLtD,QAASmzG,IAER7zG,GAAK+xG,EAAqB,gBAAkB,sBAGhDlB,GACC3wG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAMquB,EAAY,WAAa,UAC/B3xB,QAASozG,IAER9zG,GAAKqyB,EAAY,iBAAmB,8BAGvC++E,GACAlxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,SACLtD,QAAS2zG,IAERr0G,GAAK,yBAGT2xG,GACCzxG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,QACLtD,QAAS0zG,IAERp0G,GAAK,eAGT4vG,GACC1vG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAASuqG,IAERjrG,GAAK,sBAGTu0G,GACApE,GACCjwG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,OACLtD,QAASqzG,IAER/zG,GAAK,gBAGT6xG,GACC3xG,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACumG,GAAAA,EAAa,MACdvmG,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPmhC,aAAW,EACX3hC,KAAK,SACLtD,QAASsqG,IAERhrG,GAAK8oF,EACF,iBACC6nB,EAAgB,0BAA6Bt+E,EAAY,eAAiB,uBAKtFj0B,GACC8B,EAAAA,GAAAA,cAACu0G,GAAAA,EAAe,CACdz1G,OAAQsD,GACRnD,QAASqD,GACTpE,KAAMA,IAGTszG,GAAWv9C,IAAyB/1D,GAAMpJ,IACzCkL,EAAAA,GAAAA,cAAC00D,GAAAA,EAAa,CACZ51D,OAAQ00D,GACRv0D,QAASy0D,GACTnpC,oBAAqB4pC,GACrB/1D,OAAQF,EAAKpJ,KAGhB46G,GAAiBxxG,GAAMpJ,IACtBkL,EAAAA,GAAAA,cAAC4pB,EAAAA,EAAW,CACV9qB,OAAQklB,GACR/kB,QAASilB,GACT2F,QAAQ,OACRzrB,OAAQF,EAAKpJ,MAIZ,K,gBClhBb,MAAM0/G,IAAwB/4F,EAAAA,GAAAA,KAAUo5C,GAAOA,KAAM,KAAK,GAkL1D,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMO,GAAO0/B,EAAAA,EAAAA,IAAkBjgC,GAC/B,IAAKO,EACH,MAAO,CAAC,EAGV,MAAM,MAAE2jC,EAAK,QAAEitB,IAAY2lD,EAAAA,EAAAA,IAAwB92G,IAAW,CAAC,GACzD,SAAEG,IAAaC,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,GACpD,WAAE0/E,EAAU,SAAE/5D,GAAawrC,GAAW,CAAC,EAE7C,MAAO,CACL5wD,OACA2jC,QACAw7C,aACAv/E,WACAwlB,WACAoxF,sBAAuB57G,SAAQud,EAAAA,EAAAA,IAAe1Y,GAAQg9B,2BACvD,GAlBej9B,EAhLuBnG,IAQrC,IARsC,SAC1CyS,EAAQ,KACR9L,EAAI,SACJJ,EAAQ,MACR+jC,EAAK,WACLw7C,EAAU,SACV/5D,EAAQ,sBACRoxF,GACDn9G,EACC,MAAM,wBACJo9G,EAAuB,wBACvBC,EAAuB,aACvBlzF,EAAY,qBACZmzF,EAAoB,oBACpBC,IACE11G,EAAAA,EAAAA,MAGE48B,GAAWthC,EAAAA,EAAAA,IAAyB,OACnCq6G,EAAcC,IAAmBpvG,EAAAA,EAAAA,IAAS,IAGjD9J,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEm5G,GAAmB74G,OAC3B,IAAK64G,EACH,OAGF,MAAMC,EAAS5hH,SAASw0B,eAAe,QACjCzhB,EAAeA,KACnB,MAAM,cAAEwsD,GAAkBv/D,SAC1B,GAAIu/D,GAAkBA,IAAkB72B,EAASnhC,QAAU,CACzD,MAAM,QAAEs6G,EAAO,OAAEh6G,GAAW85G,GAE5BlsG,EAAAA,EAAAA,KAAgB,KACdmsG,EAAO1/G,MAAMulB,UAAa,cAAao6F,OACvCD,EAAO1/G,MAAM2F,OAAU,GAAEA,MACzB7H,SAASggF,gBAAgBr+E,UAAYkgH,CAAO,GAEhD,MACEpsG,EAAAA,EAAAA,KAAgB,KACdmsG,EAAO1/G,MAAMulB,UAAY,GACzBm6F,EAAO1/G,MAAM2F,OAAS,EAAE,GAE5B,EAKF,OAFA85G,EAAe1uG,iBAAiB,SAAUF,GAEnC,KACL4uG,EAAezuG,oBAAoB,SAAUH,EAAa,CAC3D,GACA,KAGHvK,EAAAA,EAAAA,KAAU,KACJoC,GAAMpJ,IAAMwuB,GAAU9nB,QACxBkmB,EAAa,CAAEtjB,OAAQF,EAAKpJ,GAAIsU,UAAWka,EAAS,GAAIxlB,aACxDk3G,EAAgB,IAEhBA,GAAiB,EACnB,GACC,CAAC92G,GAAMpJ,GAAI4sB,EAAc4B,EAAUxlB,KAGtC8N,EAAAA,EAAAA,KAAgB,KACTzE,EAAAA,IAELqiC,MAAM1tB,KAAKxoB,SAAS0C,iBAAmC,UAAUgS,SAASotG,IACxEA,EAAMjlG,SAAWrX,QAAQkR,GAAYorG,IAAUp5E,EAASnhC,QAAQ,GAChE,GACD,CAACmP,KAGJlO,EAAAA,EAAAA,KAAU,KACHkO,GACHgyB,EAASnhC,QAASw6G,MACpB,GACC,CAACrrG,KAEJlO,EAAAA,EAAAA,KAAU,KACYxI,SAASe,cAAgC,uBACjDghH,MAAM,GACjB,CAACX,IAEJ,MAAMY,GAAiCh2G,EAAAA,EAAAA,KAAai2G,IAClDZ,EAAwB,CAAE9yE,MAAO0zE,IAE7BA,EAAS/5G,QACXg5G,GAAsBI,EACxB,GACC,CAACA,EAAyBD,IAEvBa,GAAWl2G,EAAAA,EAAAA,KAAY,KAC3B,GAAIpB,GAAQolB,EAAU,CACpB,MAAMmyF,EAAgBV,EAAe,EACrCrzF,EAAa,CAAEtjB,OAAQF,EAAKpJ,GAAIsU,UAAWka,EAASmyF,GAAgB33G,aACpEk3G,EAAgBS,EAClB,IACC,CAACv3G,EAAMolB,EAAUyxF,EAAcj3G,IAE5B43G,GAAap2G,EAAAA,EAAAA,KAAY,KAC7B,GAAIpB,GAAQolB,EAAU,CACpB,MAAMmyF,EAAgBV,EAAe,EACrCrzF,EAAa,CAAEtjB,OAAQF,EAAKpJ,GAAIsU,UAAWka,EAASmyF,GAAgB33G,aACpEk3G,EAAgBS,EAClB,IACC,CAACv3G,EAAMolB,EAAUyxF,EAAcj3G,IAE5B63G,GAA6Br2G,EAAAA,EAAAA,KAAY,KAC7Cu1G,GAAsB,GACrB,CAACA,IAEJ,OACE70G,EAAAA,GAAAA,cAAA,OAAKlL,GAAG,eAAeqL,UAAW6J,EAAW,SAAW,IACtDhK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLpE,KAAK,UACLqH,OAAK,EACLhD,MAAM,cACNE,QAASm1G,GAET31G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEfH,EAAAA,GAAAA,cAAC41G,GAAAA,EAAW,CACV9wG,IAAKk3B,EACLrsB,MAAOkyB,EACPjyB,SAAU0lG,KAGdt1G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACZ0hC,EACCve,GAAU9nB,OACP,GAAEu5G,EAAe,QAAQ13B,IACxB/5D,IAAaA,EAAS9nB,OACxB,aAEA,GAGFwE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cAENE,QAASA,IAAMs0G,EAAoB,CAAEx+E,YAAYu/E,EAAAA,GAAAA,IAAcv6F,KAAKC,SACpEhY,UAAU,2BAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yBAInBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASg1G,EACTrlG,UAAWmT,IAAaA,EAAS9nB,QAAUu5G,IAAiBzxF,EAAS9nB,OAAS,GAE9EwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAEfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLrH,KAAK,UACLqE,MAAM,cACNE,QAASk1G,EACTvlG,UAAWmT,IAAaA,EAAS9nB,QAA2B,IAAjBu5G,GAE3C/0G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCrGV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM,mBAAEm6C,EAAkB,aAAE8J,GAAiBnmD,GACvC,iBAAEmhG,IAAqB6I,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAW,CAAC,EAEpE,MAAO,CACL0gG,mBACA9kD,qBACA8J,eACD,GATepmD,EArEqCnG,IAOnD,IAPoD,YACxD2iD,EAAW,iBACX4kD,EAAgB,mBAChB9kD,EAAkB,aAClB8J,EAAY,oBACZ5H,EAAmB,iBACnBG,GACD9kD,EAEC,MAAM6iD,GAAkB1/C,EAAAA,EAAAA,IAA0B,MAE5C2/C,GAAoB3/C,EAAAA,EAAAA,IAA0B,OAC5CI,MAAOif,IAAgBE,EAAAA,GAAAA,MACzB,cAAE67F,IAAkBrzG,EAAAA,EAAAA,MAEpBo8F,GAAwBxlG,EAAAA,EAAAA,KAAQ,IAC/BylG,EAIyB,QAA1BA,EAAiBl9F,MACZu9F,EAAAA,EAAAA,KAAenlD,GAAsB,IAAIv6C,KAAIC,IAAA,IAAC,SAAEq6C,GAAUr6C,EAAA,OAAKq6C,CAAQ,IAAG+J,IAG5Eq7C,EAAAA,EAAAA,IAAcL,EAAiBiX,QAASjyD,GAPtC,IAQR,CAAC9J,EAAoB8kD,EAAkBh7C,IAEpCkyD,GAAe38G,EAAAA,EAAAA,KAAQ,KAC3B,MAAM48G,EAAcjyG,KAAKoZ,IAhCD,MAgC2BhX,EAAAA,GAAK2T,GAClDm8F,GAAYn8F,EApCK,IAIE,KACD,IA+B2E3T,EAAAA,GAC7F6f,EAAiBgwF,EApCI,GAoCmC7vG,EAAAA,GAExD+vG,EAAanyG,KAAKyH,OAAOwa,EAAiBiwF,IAxC9B,GAwC2DA,IACvEE,EAAYpyG,KAAKyrC,KAAKovD,EAAsBrjG,OAAS26G,GAErDE,EA3CY,GA2CMD,GAA6BA,EAAY,GAAKF,EAzC3C,GAyC+E9vG,EAAAA,GAAM,EAEhH,OAAOpC,KAAKoZ,IA1Ca,GA0CchX,EAAAA,GAAKiwG,EAAgB,GAC3D,CAACxX,EAAsBrjG,OAAQue,IAElC,OACE/Z,EAAAA,GAAAA,cAAA,OAAKG,UClFc,uBDkFU3K,MAAQ,WAAUwgH,OAC7Ch2G,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GCnFkC,uBDmFH,eAAgBovG,EAAgB,eAAiB,kBAC9F91G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gDACbH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKs1C,EAAiBj6C,UAAU,kBACxCH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKu1C,EAAmBl6C,UAAU,kBACzC0+F,EAAsBp/F,KAAKs6C,IAC1B,MAAM0G,GAAaC,EAAAA,EAAAA,IAAqB3G,GAClCE,EAAawG,EAAavE,GAAqBnnD,SAAS0rD,QAAc5oD,EAE5E,OACEmI,EAAAA,GAAAA,cAAC2gD,GAAa,CACZp8C,IAAKk8C,EACL1G,SAAUA,EACVE,WAAYA,EACZC,YAAaA,EACbF,mBAAoBA,EACpBx5C,QAAS67C,EACTjC,gBAAiBA,EACjBC,kBAAmBA,GACnB,MAKN,KEqCV,IAAe58C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAMs/D,GAAQ5mD,EAAAA,EAAAA,IAAe1Y,IACvB,OAAES,EAAM,UAAEgL,EAAS,SAAEgG,GAAa6tD,EAAMq5C,gBAAkB,CAAC,EAC3Dp4G,EAAOE,GAASD,EAAAA,EAAAA,IAAWR,EAAQS,QAAUvG,EAC7C6vG,EAAetpG,GAASupG,EAAAA,EAAAA,IAAmBhqG,EAAQS,QAAUvG,EAC7DnC,EAAU0I,GAAUgL,GAAYmN,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQgL,QAAavR,EAC/E0yD,IAAgBnsD,IAASE,EAAAA,EAAAA,IAASF,GAClCm4G,EAAmE,SAAzC7O,GAAc5I,kBAAkBl9F,KAC1D40G,EAAqE,QAAzC9O,GAAc5I,kBAAkBl9F,MAC7D8lG,GAAc5I,kBAAkB2X,iBAErC,MAAO,CACL/gH,UACA0Z,WACAsnG,qBAAqBx4G,GAAMsqG,cAAe+N,IAEtCC,GAA6BjsD,GACjCnO,eAAe4K,EAAAA,EAAAA,IAA+BrpD,GAC/C,GAlBiBD,EAzG8BnG,IAM5C,IAN6C,OACjDuH,EAAM,QACNpJ,EAAO,SACP0Z,EAAQ,cACRgtC,EAAa,oBACbs6D,GACDn/G,EACC,MAAM,eAAEsyG,EAAc,oBAAE8M,IAAwBv3G,EAAAA,EAAAA,MAE1Cw3G,GAAoBlnF,EAAAA,GAAAA,GAAiBh6B,GAASZ,IAAI,GAClD+hH,GAAiBnnF,EAAAA,GAAAA,GAAiBh6B,GAAS0I,QAAQ,GACnD04G,GAAiBpnF,EAAAA,GAAAA,GAAiBtgB,GAAU,GAE5C6zF,GAAUvoG,EAAAA,EAAAA,IAAuB,MACjCq8G,GAAoB19G,EAAAA,EAAAA,KAAQ,KAChC,GAAKy9G,EAIL,MAAO,CACLl+F,EAAGk+F,EAAel+F,GAAK89F,GAvBQ,IACG,IAuBlC79F,EAAGi+F,EAAej+F,GAAK69F,GAxBgB,IACG,IAwB3C,GACA,CAACI,EAAgBJ,IAEdtR,GAAiB9lG,EAAAA,EAAAA,KAAY,IAAM2jG,EAAQpoG,SAAS,IACpDwqG,GAAY/lG,EAAAA,EAAAA,KAAY,KAAM,CAAG03G,YAAY,EAAMC,SAAS,KAAS,KACrE,UACJ5yG,EAAS,UAAE2L,EAAS,iBAAEo3C,EAAgB,iBAAE2+C,EAAgB,MAAEvwG,IACxD0wG,EAAAA,GAAAA,GAAgB6Q,EAAmB7R,GAAmBC,GAAgBC,EAAgBC,GAEpF6R,GAA6B53G,EAAAA,EAAAA,KAAa4qC,IAC9C,IAAK2sE,IAAmBD,EACtB,OAEF,MAAM78D,EAAW7P,EAAQ6W,cACrB,CAAE9F,WAAY/Q,EAAQp1C,IACtB,CAAEk5F,SAAU9jD,EAAQ8W,OAExB6oD,EAAe,CACbzrG,OAAQy4G,EAAgBztG,UAAWwtG,EAAmB78D,WAAU4yD,mBAAmB,IAErFgK,GAAqB,GACpB,CAACE,EAAgBD,IAEdlK,GAAuBptG,EAAAA,EAAAA,KAAay6C,IACnC88D,GAAmBD,IAIxB/M,EAAe,CACbzrG,OAAQy4G,EAAgBztG,UAAWwtG,EAAmB78D,WAAU4yD,mBAAmB,IAErFgK,IAAqB,GACpB,CAACE,EAAgBD,IAEd16D,GAAsB7iD,EAAAA,EAAAA,KAAQ,KAC1B3D,GAAS0pD,WAAW0P,SAAW,IAAIljC,QAAiB,CAACC,EAAGnsB,KAAgC,IAA9B,YAAE+/F,EAAW,SAAE1lD,GAAUr6C,EAKzF,YAJoB7H,IAAhB4nG,GACF5zE,EAAIhoB,KAAK,aAAck2C,EAAWA,EAASi0C,SAAWj0C,EAASkB,YAG1DpvB,CAAG,GACT,KACF,CAACn2B,GAAS0pD,WAAW0P,UAExB,OACE9uD,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACRgG,IAAKm+F,EACL9iG,WAAWuG,EAAAA,GAAAA,GC5GM,uBD4GsB,kBACvCghD,iBAAiBhhD,EAAAA,GAAAA,GC7GqC,wBD6GDgwG,GC7GwC,wBD8G7FM,YAAU,EACVvvD,WAAS,EACTpjD,UAAWA,EACX2L,UAAWA,EACXo3C,iBAAkBA,EAClB2+C,iBAAkBA,EAClBvwG,MAAOA,EACP2hH,yBAAyB,iBACzBl4G,QAAS03G,GAET32G,EAAAA,GAAAA,cAAC4nD,GAAiB,CAChBnQ,SAAS,qBACT3xC,UAAWhH,IAAW43G,EACtBx8D,YAAaphD,QAAQgG,GAAU43G,GAC/B56D,kBAAgB,EAChB37C,UAAYu2G,OAAsC7+G,EC7HyE,uBD8H3HqkD,oBAAqBA,EACrBE,cAAeA,EACfmI,oBAAqB2yD,EACrB76D,iBAAkBqwD,KAElBgK,GAAuB59G,QAAQ+9G,IAC/B72G,EAAAA,GAAAA,cAACo3G,GAAqB,CACpBh5G,OAAQy4G,EACR38D,YAAap7C,EACbu9C,iBAAkBqwD,EAClBxwD,oBAAqBA,IAGpB,KAyBX,SAASgpD,KACP,OAAO5xG,SAASe,cAAc,OAChC,CAEA,SAAS8wG,KACP,OAAO7xG,SAASe,cAAc,OAChC,C,4BEzKA,MAAMgjH,GAAM/jH,SAASC,cAAc,O,wFCFpB,SAAS+jH,GACtB9iH,EACA+iH,GAKA,IAJAv+D,EAAMz9C,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,EACT07G,EAAO17G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GACPi8G,EAAmBj8G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GACnBk8G,EAAYl8G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GAEZ,MAAMm8G,EAAaljH,EAAUijH,EAAe,aAAe,aACrDE,EAAaD,EAAaljH,EAAUijH,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBL,EACvB/iH,EAAUwB,iBAA8BuhH,GACxCA,GACE,OAAE/7G,GAAWo8G,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIxzF,EAAI,EAAGA,EAAI9oB,EAAQ8oB,IAAK,CAC/B,MAAMlvB,EAAUwiH,EAAYtzF,GACtB/G,EAAKnoB,EAAQqiH,EAAe,aAAe,aAC3CM,EAAKx6F,EAAKnoB,EAAQqiH,EAAe,cAAgB,gBAKvD,GAJkBD,EACdO,GAAML,EAAa1+D,GAAU++D,GAAMJ,EAAa3+D,EAChDz7B,GAAMo6F,EAAa3+D,GAAU++D,GAAML,EAAa1+D,EAGlD6+D,EAAeh0G,KAAKygB,GACpBwzF,GAAU,OACL,GAAIA,IAAYb,EACrB,KAEJ,CAEA,MAAO,CAAEW,cAAaC,iBACxB,CC1BA,SARA,SAAwBrjH,EAAwBY,GAA4C,IAAtBqiH,EAAYl8G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GAChF,MAAMm8G,EAAaljH,EAAUijH,EAAe,aAAe,aACrDE,EAAaD,EAAaljH,EAAUijH,EAAe,cAAgB,gBACnEl6F,EAAKnoB,EAAQqiH,EAAe,aAAe,aAC3CM,EAAKx6F,EAAKnoB,EAAQqiH,EAAe,cAAgB,gBACvD,OAAOl6F,EAAKm6F,GAAcK,EAAKJ,CACjC,ECCe,SAASK,GAAsB72F,EAAkBlZ,EAAesQ,GAC7E,MAAM/jB,EAAY+jB,EAAa1d,QAC/B,IAAKrG,GAAayT,EAAQ,EACxB,OAEF,MAAM,eAAE4vG,EAAc,YAAED,GAAgBN,GACtC9iH,EACA2sB,EAVoB,GAYpB,GACA,GAGF,IAAKy2F,EAAYp8G,SAAWo8G,EAAY3vG,GACtC,OAEF,MAAMgwG,EAAQJ,EAAe,GAC7B,IAAKA,EAAe9iH,SAASkT,IACvBA,IAAUgwG,IAAUC,GAAe1jH,EAAWojH,EAAYK,IAAU,CACxE,MAAM7oG,EAAWnH,EAAQ4vG,EAAeA,EAAer8G,OAAS,GAAK,QAAU,OAC/E+9C,EAAAA,GAAAA,IAAc/kD,EAAWojH,EAAY3vG,GAAQmH,EAtB3B,GAuBpB,CACF,CCzBO,SAAS+oG,GAAqB5gH,GAoBlC,IApBmC,SACpCyS,EAAQ,aACRytG,EAAY,iCACZW,EAAgC,6BAChCC,EAA4B,kBAC5BC,EAAiB,MACjBzrF,EAAK,kBACL0rF,EAAiB,SACjB5lD,EAAQ,QACR1zD,GAWD1H,EACC,MAAOihH,EAAmBC,IAAwB7yG,EAAAA,EAAAA,KAAU,GAEtD8yG,GAAmBp5G,EAAAA,EAAAA,KAAaq5G,GAC/B9rF,GAIE4e,EAAAA,GAAAA,GAAc5e,EAAMrxB,OAAQm9G,IAHzB,GAIT,CAAC9rF,IAEE+rF,GAAiBt5G,EAAAA,EAAAA,KAAY,CAACqQ,EAAehJ,KACjDA,EAAEoO,iBACF0jG,GAAsBxwG,GAAWywG,EAAiBzwG,EAAQ0H,IAAQ,GACjE,CAAC8oG,EAAsBC,IAEpBG,GAAmBv5G,EAAAA,EAAAA,KAAaqH,IAEpC,GAAIA,EAAEmyG,QAAUnyG,EAAE+Z,SAAW/Z,EAAEoyG,SAAWpyG,EAAEqyG,SAAU,OAAO,EAC7D,GAAInsF,GAASA,EAAMrxB,QAAUg9G,GAAqB,EAAG,CACnD,MAAMS,EAAOpsF,EAAM2rF,GACnB,GAAIS,EAAM,CACR,IAAuB,IAAnBtmD,EAASsmD,GACX,OAAO,EAGTtyG,EAAEoO,gBACJ,CACF,CAEA,OAAO,CAAI,GACV,CAAC8X,EAAO8lC,EAAU6lD,IAEfU,GAAyBrsF,GAAS2rF,EAAoB3rF,EAAMrxB,OAAS,EAmB3E,OAlBAM,EAAAA,EAAAA,KAAU,KACHs8G,IAAoCc,GACvCT,EAAqBJ,GAAgC,EAAI,EAC3D,GACC,CAACa,EAAuBb,EAA8BD,KAEzDt8G,EAAAA,EAAAA,KAAU,IAAOkO,GAAWijD,EAAAA,GAAAA,GAAyB,CACnDG,MAAOnuD,EACPk6G,KAAMb,GAAqBb,OAAe5/G,EAAa8O,GAAqBiyG,GAAgB,EAAGjyG,GAC/FyyG,OAAQd,GAAqBb,OAAe5/G,EAAa8O,GAAqBiyG,EAAe,EAAGjyG,GAChG0yG,OAAQf,IAAsBb,OAAe5/G,EAAa8O,GAAqBiyG,GAAgB,EAAGjyG,GAClG2yG,QAAShB,IAAsBb,OAAe5/G,EAAa8O,GAAqBiyG,EAAe,EAAGjyG,GAClG4yG,MAAOhB,EAAoBM,OAAmBhhH,EAC9CqI,QAAS24G,SACNhhH,GAAY,CACfygH,EAAmBM,EAAgBC,EAAkB7uG,EAAUytG,EAAcx4G,EAASs5G,IAGjFC,CACT,CCnDA,MA0FA,IAAe/6G,EAAAA,EAAAA,KA1FsBlG,IAK/B,IALgC,OACpCuH,EAAM,QACNG,EAAO,iBACPu6G,EAAgB,cAChBC,GACDliH,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GAEzF6hH,GAAmBp6G,EAAAA,EAAAA,KAAY,SAACmuB,GAAuC,IAAvBksF,EAAUp+G,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GAE9D,MAAMwzB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9B1L,EAAO6M,EAAUtB,GAClBvL,GAILs3F,EAAiBt3F,EAAMy3F,EACzB,GAAG,CAACH,IAEE3lG,GAAcvU,EAAAA,EAAAA,KAAY,CAACqH,EAAqB7R,KACpD6R,EAAEoO,iBAEF2kG,EAAiB5kH,EAAG,GACnB,CAAC4kH,IAEEE,GAAsBt6G,EAAAA,EAAAA,KAAau6G,IACvCH,EAAiBG,EAAO/kH,IAAI,EAAK,GAChC,CAAC4kH,IAEEI,EAAuB3B,GAAsB,CACjDnuG,SAAUlL,EACV+tB,MAAO4sF,EACP9mD,SAAUinD,EACVrB,mBAAmB,EACnBH,kCAAkC,EAClCn5G,aAGFnD,EAAAA,EAAAA,KAAU,KACRk8G,GAAsB,uBAAwB8B,EAAsBvhG,EAAa,GAChF,CAACuhG,KAEJh+G,EAAAA,EAAAA,KAAU,KACJ29G,IAAkBA,EAAcj+G,QAClCyD,GACF,GACC,CAACw6G,EAAex6G,IAEnB,MAAM86G,GAAkBl2F,EAAAA,EAAAA,GACtB41F,GAAej+G,OACXi+G,OACA5hH,EACJub,GAEI4mG,EAAsBP,IAAkBA,EAAcj+G,OACxDu+G,EACAN,EAEJ,IAAKrmG,GAAiB4mG,IAAwBA,EAAoBx+G,OAChE,OAGF,MAAM2E,GAAYuG,EAAAA,GAAAA,GAChB,gDACA4M,GAGF,OACEtT,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAW2E,IAAKyT,GAC7ByhG,GAAqBv6G,KAAI,CAAAC,EAASuI,KAAK,IAAb,GAAEnT,GAAI4K,EAAA,OAC/BM,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,kCACVK,QAASqT,EACTqZ,SAAUp4B,EACVgoC,MAAOg9E,IAAyB7xG,GAEhCjI,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQ34B,EACR2/D,WAAW,QACXlB,cAAY,IAEL,IAET,I,4EC/GV,SAAwD,uBAAxD,GAA2U,uBC0BrU0mD,GAAmB,GAAK7zG,EAAAA,GA0H9B,IAAe3I,EAAAA,EAAAA,KAxH2BlG,IASpC,IATqC,WACzC2iH,EAAU,UACV/5G,EAAS,SACTg6G,EAAQ,wBACRC,EAAuB,qBACvBC,EAAoB,MACpBpyG,EAAK,SACLklD,EAAQ,gBACRmtD,GACD/iH,EACC,MAAMgjH,EAkGR,SAAwBL,EAA2BE,GACjD,GAAIA,GAA2BF,EAAWM,MAAO,CAC/C,GAAIC,EAAAA,IAAAA,IAAkCP,EAAWQ,UAC/C,MAAO,QAET,GAAIC,EAAAA,IAAAA,IAAkCT,EAAWQ,UAC/C,MAAO,OAEX,CACA,MAAO,MACT,CA5GsBE,CAAeV,EAAYE,GAEzCS,GAAqBv7G,EAAAA,EAAAA,KAAY,KACrCg7G,IAAkBryG,EAAM,GACvB,CAACA,EAAOqyG,IAELnjG,GAAU9d,EAAAA,EAAAA,KAAQ,KACtB,OAAQkhH,GACN,IAAK,QACH,OACEv6G,EAAAA,GAAAA,cAAA,OACEG,UAAW9K,GACXtB,IAAKmmH,EAAW7/G,QAChBud,IAAI,GACJhkB,WAAW,IAGjB,IAAK,QACH,OACEoM,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGlH,QAAQohH,EAAWM,OAAO5wG,WACzB5J,EAAAA,GAAAA,cAAA,OAAKG,UD3DuE,yBC2D1C4L,EAAAA,GAAAA,IAAoBmuG,EAAWM,MAAO5wG,WAE1E5J,EAAAA,GAAAA,cAAA,SACEG,UAAW9K,GACXtB,IAAKmmH,EAAW7/G,QAChBmb,UAAQ,EACRjB,OAAK,EACLoB,MAAI,EACJ3D,yBAAuB,KAI/B,QACE,OACEhS,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC86G,GAAAA,EAAI,CACH36G,UD3EmN,uBC4EnNiI,KAAM8xG,EAAWa,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBf,EAAWa,SAAUb,EAAWQ,UAC5DQ,YAAahB,EAAWpgH,eACxBmC,KAAMi+G,EAAWj+G,KACjB6+D,SAAO,IAER3N,GACCntD,EAAAA,GAAAA,cAAA,KACEG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ,cAAerR,GDpFmV,wBCqFpYmL,QAASA,IAAM2sD,EAASllD,MAI9B,GAEL,CAACiyG,EAAYK,EAAatyG,EAAOklD,IAE9BguD,EAAqC,SAAhBZ,IAA2BF,EAChDe,EAA0BlB,EAAWQ,WAAaW,EAAAA,IAClDC,EAAuBxiH,QAAwB,SAAhByhH,GAA0Ba,GAC1DlB,EAAWqB,qBACVC,EAAsC,SAAhBjB,EAEtBkB,GAAgB/0G,EAAAA,GAAAA,GACpBvG,EDpGmB,uBCoGKg6G,GDpG8F,uBCoGnEgB,GDpG4I,wBCuGjM,OACEn7G,EAAAA,GAAAA,cAAA,OAAKG,UAAWs7G,GACbtkG,EACDnX,EAAAA,GAAAA,cAAC07G,GAAAA,EAAY,CACX3sG,UAAWusG,EACX/gH,aAAc2/G,EAAWpgH,gBAAkBogH,EAAW7/G,QACtDS,MAAOm/G,GACP9+G,OAAQ8+G,KAETuB,GACCx7G,EAAAA,GAAAA,cAAA,OAAKG,UDjHqP,wBCkHvPi7G,GACCp7G,EAAAA,GAAAA,cAAA,KACEG,WAAWuG,EAAAA,GAAAA,GACT,OACAwzG,EAAWqB,oBAAsB,uBAAyB,eAC1DlmH,IAEFmL,QAASq6G,IAGZ1tD,GACCntD,EAAAA,GAAAA,cAAA,KACEG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ,cAAerR,IACjDmL,QAASA,IAAM2sD,EAASllD,MAK5B,I,gBCpIV,SAAwkB,uBAAxkB,GAAymB,uBC8FnmB0zG,GAA4B,qBA8hBlC,IAAel+G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM,cACJ0iB,EAAa,aACbq5F,EAAY,aACZx4D,EAAY,mBACZy4D,GACEl+G,EAEE+pG,GAAgBppG,EAAAA,EAAAA,IAASF,QAA+CvG,GAArC8vG,EAAAA,EAAAA,IAAmBhqG,EAAQS,GAC9DskB,GAAiBC,EAAAA,EAAAA,IAAqBhlB,EAAQS,IAC9C,SAAE6hF,EAAQ,yBAAE6P,GAA6BnyF,EAAOqpE,SAASC,MACzD60C,EAAoBn+G,EAAOo+G,cAAcC,EAAAA,KACzCD,EAAgB97B,IAAa+7B,EAAAA,IAA0Br+G,EAAOo+G,cAAc97B,QAAYpoF,EAE9F,MAAO,CACL6qB,iBACAH,gBACA05F,iBAAkBvU,GAAcwU,QAChCN,eACAE,kBAAmBA,GAAmBK,SACtCJ,cAAeA,GAAeI,SAC9BrsB,2BACAssB,oBAAqBh5D,EAAai5D,SAASlxE,SAC3CmxE,cAAc93C,EAAAA,GAAAA,GAAmB7mE,EAAQ,iBACzCk+G,qBACD,GA1Ben+G,EA1hB+BnG,IAgC7C,IAhC8C,OAClD6G,EAAM,SACNN,EAAQ,YACRy+G,EAAW,QACXC,EAAO,sBACPC,EAAqB,aACrBH,EAAY,QACZxyG,EAAO,eACP4Y,EAAc,cACdH,EAAa,iBACb05F,EAAgB,aAChBL,EAAY,kBACZE,EAAiB,cACjBC,EAAa,eACb7N,EAAc,yBACdpe,EAAwB,oBACxBssB,EAAmB,mBACnBP,EAAkB,yBAClBa,EAAwB,uBACxBC,EAAsB,kBACtBC,EAAiB,wBACjBC,EAAuB,oBACvBC,EAAmB,gBACnBC,EAAe,OACfjb,EAAM,aACNkb,EAAY,QACZC,EAAO,aACPC,EAAY,gBACZC,EAAe,oBACf54D,EAAmB,eACnB64D,EAAc,cACdC,GACD9lH,EACC,MAAM,qBAAE+lH,EAAoB,eAAEC,EAAc,yBAAEC,IAA6Bp+G,EAAAA,EAAAA,MAErEU,GAAOC,EAAAA,EAAAA,KAGP09G,GAAgB/iH,EAAAA,EAAAA,IAAiC,MAEjDshC,GAAWthC,EAAAA,EAAAA,IAAuB,MAElCgjH,GAAiBhjH,EAAAA,EAAAA,MACjBijH,GAAkB95F,EAAAA,EAAAA,GAAY04F,GAC9BqB,EAAuBrB,EAAY/gH,OAAS+gH,EAAcoB,GAC1D,SAAEn7G,IAAaC,EAAAA,EAAAA,OAEdo7G,EAAkBC,GAAgBC,KAAmBx7G,EAAAA,EAAAA,MAErDy7G,GAAsBC,KAA2Br4G,EAAAA,EAAAA,IACtD82G,QAAAA,EAA4Bb,EAAmBqC,gBAE3CC,GAAsBrlH,SAASklH,IAAwBrB,KAA4BC,IAClFwB,GAAmBC,KAAwBz4G,EAAAA,EAAAA,IAASi2G,EAAmBuC,oBAG5EtkE,aAAcwkE,GACd5kE,cAAe6kE,GACf3kE,QAAS4kE,IACPhlE,MAEIM,aAAc2kE,GAAqB/kE,cAAeglE,IAAyBllE,KAE7E16C,GAAShG,QAAQyjH,EAAY/gH,QAC7BmjH,GAAkB7lH,QAAQ8kH,GAAsBpiH,SAC/CojH,GAAWC,GAAaC,KAAiBv8G,EAAAA,EAAAA,MAEhDzG,EAAAA,EAAAA,KAAU,KACHgD,IACHi/G,IACF,GACC,CAACA,GAAiBj/G,KAErB,MAAOigH,GAAUC,KAAgB3lH,EAAAA,EAAAA,KAAQ,IACrBP,QAAQ8kH,GAAsBrsB,OAAO/4B,GAAMA,EAAEgiD,OAAShiD,EAAEymD,SACpD,EAAC,GAAM,GAEtB,CADUnmH,QAAQ8kH,GAAsBr+D,MAAMiZ,GAAMA,EAAEgiD,OAAShiD,EAAEymD,UACtD,IACjB,CAACrB,KAEGsB,GAAYC,KAAkB9lH,EAAAA,EAAAA,KAAQ,IACpBP,QAAQ8kH,GAAsBrsB,OAAO/4B,GAAMA,EAAE+iD,uBACzC,EAAC,GAAM,GAE3B,CADeziH,QAAQ8kH,GAAsBr+D,MAAMiZ,GAAMA,EAAE+iD,wBAC3C,IACtB,CAACqC,IAEEwB,IAAoBC,EAAAA,GAAAA,GAAsB,IAAGC,EAAAA,QAE7C,mBACJC,GAAkB,eAClBC,GAAc,qBACdC,GAAoB,YACpBC,GAAW,kBACXC,KACEC,EAAAA,GAAAA,GACF9mH,QAAQgR,GAAW+yG,GAA2B8B,IAC9CnC,EACAO,EACAuC,EAAAA,IACA1D,EACAE,EACAC,IAGI,yBACJ8D,GAAwB,kBACxBC,GAAiB,wBACjBC,KACEC,EAAAA,GAAAA,GACFlnH,QAAQgR,GAAW+yG,GAA2B8B,IAAmB7uB,GACjE0sB,EACAO,EACAqC,GACApjF,EACAogF,IAGI,qBACJ6D,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFvnH,QAAQgR,GAAW+yG,GAA2B8B,IAC9CnC,EACAO,EACAqC,GACApjF,EACAigF,OACApkH,EACA0qB,IAGFzmB,EAAAA,EAAAA,KAAU,IAAOgD,IAASkqB,EAAAA,EAAAA,GAAsBi0F,QAAWplH,GAAY,CAACiH,GAAQm+G,KAEhFnhH,EAAAA,EAAAA,KAAU,KACJgD,KACFm/G,GAAwBvB,QAAAA,EAA4Bb,EAAmBqC,gBACvEG,GAAqBxC,EAAmBuC,mBAC1C,GACC,CAACvC,EAAoB/8G,GAAQ49G,KAEhC5gH,EAAAA,EAAAA,KAAU,KACJgD,IAAU0D,IACZ89G,EAAAA,GAAAA,KACF,GACC,CAAC99G,EAAU1D,KAEd,MACEyhH,kBAAmBC,GAAoB,kBACvCC,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBnD,GAAgBhB,IAA0B39G,IAE/D+hH,IAAkBvhH,EAAAA,EAAAA,KAAY,CAAC2rD,EAAoB61D,KACnDhiH,MACYovG,GAAkB4S,EAAuB3D,EACnDlyD,EAAWiyD,EAAepb,GACzBqc,GAAqBC,IAC1BZ,EAAyB,CACvBU,eAAgBC,GAChBC,uBAEJ,GACC,CACDt/G,GAAQovG,EAAgBiP,EAAiBD,EAAcpb,EAAQqc,GAAqBC,GACpFZ,IAGIuD,IAAmBzhH,EAAAA,EAAAA,KAAY,KACnCuhH,IAAgB,EAAK,GACpB,CAACA,KAEEG,IAAkB1hH,EAAAA,EAAAA,KAAY,KAClCuhH,IAAiB,GAChB,CAACA,KAEEI,IAAsB3hH,EAAAA,EAAAA,KAAY,KACtCuhH,IAAgB,GAAO,EAAK,GAC3B,CAACA,KAsBEK,IAAkB5hH,EAAAA,EAAAA,KAAY6J,UAClCxC,EAAEoO,iBACF+pG,KAEA,MAAM,aAAEqC,GAAiBx6G,EAEnBgqB,QAAcywF,EAAAA,GAAAA,GAA8BD,EAAat0F,OAC3D8D,GAAOn1B,QACTwhH,EAAarsF,EAAOwuF,GACtB,GACC,CAACA,GAAgBnC,EAAc8B,KAW5BnpC,IAAmBr2E,EAAAA,EAAAA,KAAaqH,IACpC,MAAM,MAAEgqB,GAAUhqB,EAAEwV,OACdy5D,GAAiBC,EAAAA,EAAAA,IAAcllD,GAEjCilD,GAAgBp6E,QAClBwhH,EAAapnC,EAAgBupC,GAC/B,GACC,CAACA,GAAgBnC,IAEdqE,IAAuB/hH,EAAAA,EAAAA,KAAY,MACvCy2E,EAAAA,GAAAA,GAAsB,KAAMpvE,GAAMgvE,GAAiBhvE,IAAG,GACrD,CAACgvE,KAEEm1B,IAAexrG,EAAAA,EAAAA,KAAa2I,IAChC60G,EAAoBP,EAAYhuF,QAAO,CAACiqC,EAAGl0C,IAAMA,IAAMrc,IAAO,GAC7D,CAACs0G,EAAaO,IAEXwE,IAAuBhiH,EAAAA,EAAAA,KAAY,KACvCw9G,EAAoBP,EAAY98G,KAAK+4D,IAAC,IACjCA,EACH+iD,oBAAqB/iD,EAAEkiD,WAAaW,EAAAA,UAAuBxjH,MACzD,GACH,CAAC0kH,EAAaO,IAEXyE,IAAwBjiH,EAAAA,EAAAA,KAAY,KACxCw9G,EAAoBP,EAAY98G,KAAK+4D,IAAC,IAAWA,EAAG+iD,yBAAqB1jH,MAAc,GACtF,CAAC0kH,EAAaO,IAEX0E,IAAsBliH,EAAAA,EAAAA,KAAa2I,IACvC60G,EAAoBP,EAAY98G,KAAI,CAACy6G,EAAY51F,IAC3CA,IAAMrc,EACD,IACFiyG,EACHqB,qBAAsBrB,EAAWqB,0BAAuB1jH,GAIrDqiH,IACN,GACF,CAACqC,EAAaO,KAEjBhhH,EAAAA,EAAAA,KAAU,KACR,MAAM6iC,EAAa8+E,EAAc5iH,QAC3Bu6G,EAAQ9hH,SAASw0B,eAAe6zF,IAEtC,IAAKh9E,IAAey2E,EAAO,OAE3B,MAAM,MAAEt6G,GAAU6jC,EAAWzyB,yBAE7BnD,EAAAA,EAAAA,KAAgB,KACdqsG,EAAM5/G,MAAM85C,YAAY,yBAA2B,GAAEx0C,MAAU,GAC/D,GACD,CAACgF,EAAMhB,KAEV,MAAMylC,IAAkElrC,EAAAA,EAAAA,KAAQ,IACvEqG,IAAA,IAAC,UAAE2D,EAAWvE,OAAQ0lC,GAAY9kC,EAAA,OACvCM,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLkM,QAAShN,EACTvG,KAAK,UACLqE,MAAM,cACNH,UAAWqkC,EAAa,SAAW,GACnChkC,QAAS6C,EACTE,UAAU,gBAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACN,GAEV,CAACqC,IAEEi/G,IAAY17G,EAAAA,GAAAA,IAAgB,KAChC,IAAK44G,GAAiB,OAEtB,MAAM+C,EAAuBpF,GTxYCqF,ESwYgCnF,ITvYhEnF,GAAIuK,UAAYD,GAChBE,EAAAA,GAAAA,IAAgBxK,IAChBA,GAAIrhH,iBAAiB,MAAMgS,SAAS85G,IAClCA,EAAGC,YAAY,KAAK,IAEf1K,GAAI2K,aAAa5gF,OAAO5lC,QAAU,GANpC,IAA2BmmH,ESyY9B,OAAOD,GA5SoB,IA4S6BA,OAAuB7pH,CAAS,GACvF,CAACykH,EAAcE,EAASmC,KAErBsD,GAAiB9D,IAAuBa,IAEvCkD,GAAcC,GAAcC,KAAgB/oH,EAAAA,EAAAA,KAAQ,IACpD4oH,IAAmBrE,EAIjB,CAHYA,EAAqBrsB,OAAO/4B,GAAMiiD,EAAAA,IAAAA,IAAkCjiD,EAAEkiD,YACtEkD,EAAqBrsB,OAAO/4B,GAAMmiD,EAAAA,IAAAA,IAAkCniD,EAAEkiD,YACtEkD,EAAqBrsB,OAAO/4B,GAAM6pD,EAAAA,IAAAA,IAAkC7pD,EAAEkiD,aAHpC,EAAC,GAAO,GAAO,IAKnE,CAACkD,EAAsBqE,KAEpBK,IAAoBjpH,EAAAA,EAAAA,KAAQ,MAC3BukH,GACEA,EAAqBr+D,MAAMiZ,GAAMA,EAAEkiD,WAAaW,EAAAA,MACjDgH,EAAAA,IAAAA,IAAkC7pD,EAAEkiD,aACzC,CAACkD,IAEJ,IAAKA,EACH,OAGF,MAAM2E,GAAa3E,EAAqBpiH,OAAS,EAEjD,IAAI4E,GAAQ,GAEVA,GAAQN,EADNoiH,GACW,0BACJC,GACI,0BACJC,GACI,0BAEA,yBAN2BxE,EAAqBpiH,OAAQ,KA2EvE,MAAMgnH,IAAwBhE,KAAmCE,GAEjE,OACE1+G,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJnB,OAAQA,GACRG,QAASg+G,EACTzqF,OAxEJ,WACE,GAAKorF,EAIL,OACE59G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChEmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAU,qBAAqB/C,QAASy8G,GACvFj9G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeC,IAC9BJ,EAAAA,GAAAA,cAACmE,GAAAA,EAAY,CACXhE,UAAU,mDACViE,QAASmgC,GACTlgC,UAAU,SAEVrE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,MAAMtD,QAAS6gH,IAAuBvhH,EAAK,QACzDi/G,IACC/+G,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MAEK48G,IAAsBD,IAA2BwB,GAEhDn+G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASA,IAAMy9G,IAAwB,IAC9Dn+G,EAAKyiH,GAAa,yBAA2B,0BAIhDviH,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,QAAQtD,QAASA,IAAMy9G,IAAwB,IAC3DsE,GAAa,oBAAsB,kBAIzCpE,IAAuBmE,KACtBpD,GACEl/G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,kBAAkBtD,QAAS+gH,IACvCzhH,EAAK,8BAGRE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,UAAUtD,QAAS8gH,IAC/BxhH,EAAK,+BAMfyiH,KACCnE,GACEp+G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CACPR,KAAK,kBAELtD,QAASA,IAAM69G,IAAqB,IACrC,qBAKDr+G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,UAAUtD,QAASA,IAAM69G,IAAqB,IAAO,qBAQhF,CAQY3P,GACRvuG,WAAWuG,EAAAA,GAAAA,GDzfM,uBC2ffk4G,IAAavpH,IACZkpH,ID5fmK,uBC6fpK/7G,GD7f+C,uBC8f/Cq7G,GD9fuF,wBCggBzF4E,iBAAe,GAEfziH,EAAAA,GAAAA,cAAA,OACEG,UAAW9K,GACXqtH,YAAa7D,GACb8D,OAAQzB,GACR0B,WA7MN,SAAwBj8G,GACtBA,EAAEoO,iBAEE2oG,EAAe7iH,UACjBuB,OAAOP,aAAa6hH,EAAe7iH,SACnC6iH,EAAe7iH,aAAUhD,EAE7B,EAuMMgrH,YA9OmBl8G,IACvB,MAAQm8G,cAAeC,EAAU5mG,OAAQ6mG,GAAer8G,EAGnDq8G,EAA8B5hG,QAAS,2BAA4B2hG,IACtErF,EAAe7iH,QAAUuB,OAAOC,WAAWyiH,GA/LnB,MAmMtBkE,GAAeA,EAA2BnuH,QAAS,2BAInDkuH,GACFp8G,EAAEC,kBAGJk4G,KAAe,EA8NXt+G,QAASs+G,GACT,0BAAyBh/G,EAAK,4BAA6B,IAC3D,oBAEAE,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GD7gB4L,uBC+gBrM,gBACA87G,IDhhB2S,wBCkhB7SrzE,SAAUmvE,IAETV,EAAqBn+G,KAAI,CAACy6G,EAAY51F,IACrCtkB,EAAAA,GAAAA,cAACijH,GAAmB,CAClB/I,WAAYA,EACZE,wBAAyB+D,GACzB9D,qBAAsB+D,GACtBjE,SAA0C,IAAhCyD,EAAqBpiH,OAC/ByM,MAAOqc,EACP/f,IAAK21G,EAAWgJ,UAAY5+F,EAC5B6oC,SAAU29C,GACVwP,gBAAiBkH,QAIvBxhH,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GDliBmX,uBCoiB5X87G,IDpiBkd,yBCuiBpdxiH,EAAAA,GAAAA,cAACmjH,GAAc,CACbrkH,OAAQmhH,GACRxG,cAAe2G,GACf5G,iBAAkB2G,GAClBlhH,QAASihH,KAEXlgH,EAAAA,GAAAA,cAACojH,GAAAA,EAAY,CACXtkH,OAAQygH,GACR97D,OAAQ+7D,GACRp8D,aAAcq8D,GACdlC,eAAgBA,EAChBD,qBAAsBA,EACtBD,cAAeqC,GACfn7D,oBAAqBm7D,GACrBzgH,QAAS0gH,KAEX3/G,EAAAA,GAAAA,cAACqjH,GAAAA,EAAkB,CACjBjlH,OAAQA,EACRU,OAAQ+gH,GACRvC,qBAAsBA,EACtB/4D,oBAAqBu7D,GACrB7gH,QAAS8gH,KAEX//G,EAAAA,GAAAA,cAAA,OAAKG,UD9jBgf,wBC+jBnfH,EAAAA,GAAAA,cAACsjH,GAAAA,EAAgB,CACfllH,OAAQA,EACRN,SAAUA,EACV0E,SAAUA,EACVsH,QAASA,EACT+zG,iBAAkBA,EAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBx5D,oBAAqBA,EACrB64D,eAAgBA,EAChBC,cAAeA,EACfkG,mBAAiB,EACjBC,kBAAgB,EAChBrjH,UAAU,uDAEZH,EAAAA,GAAAA,cAACyjH,GAAAA,EAAY,CACX3+G,IAAKk3B,EACLlnC,GAAI6mH,GACJv9G,OAAQA,EACRN,SAAUA,EACV4lH,wBAAsB,EACtB55G,QAASA,EACTE,SAAUlL,GACV09G,QAASA,EACTmH,gBAAiBrE,EAAAA,IACjB3yF,YAAa7sB,EAAK,cAClBmc,SAAU8gG,EACVjb,OAAQkf,GACR7xE,SAAUsvE,GACVmF,aAAc9qH,QAAQgR,GAAW+yG,GAA2BN,EAAY/gH,QACxE8gH,aAAcmF,GACdoC,oBAAqBrhH,GAAYq7G,EACjCiG,kBAAmB/F,KAErB/9G,EAAAA,GAAAA,cAAA,OAAKG,UDjmBmqB,wBCkmBtqBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLyE,IAAK24G,EACLt9G,UDpmBksB,uBCqmBlsBK,QAASwgH,GACT3rG,cAAeonG,EAAwBgE,QAAoB5oH,GAEzCiI,EAAjBouG,EAAsB,OAAe,SAEvCuO,GACCz8G,EAAAA,GAAAA,cAAC+jH,GAAAA,EAAc,CACbjlH,OAAQ0hH,GACRtD,aAAex6F,OAAoC7qB,EAAnBkpH,GAChCiD,eAAgB/C,GAChBhiH,QAASyhH,GACTn2F,oBAAqBo2F,GACrB/kE,gBAAiBl5B,QAOvB,KClQZ,IAAejlB,EAAAA,EAAAA,KApViBlG,IAE1B,IAF2B,OAC/BuH,EAAM,OAAEmlH,EAAM,kBAAEC,EAAiB,OAAEpiB,EAAM,QAAEmb,GAC5C1lH,EAEC,MAAM4sH,GAAmBzpH,EAAAA,EAAAA,IAAyB,MAE5C0pH,GAAiB1pH,EAAAA,EAAAA,IAAuB,MAExC2pH,GAAc3pH,EAAAA,EAAAA,IAAuB,OAEpC4pH,EAAUC,IAAe3+G,EAAAA,EAAAA,IAAiB,KAC1CmpC,EAASy1E,IAAc5+G,EAAAA,EAAAA,IAAmB,CAAC,MAC3C6+G,EAAaC,IAAkB9+G,EAAAA,EAAAA,KAAS,IACxC++G,EAAmBC,IAAwBh/G,EAAAA,EAAAA,KAAS,IACpDi/G,EAAYC,IAAiBl/G,EAAAA,EAAAA,IAASq+G,IAAU,IAChDc,EAAUC,IAAep/G,EAAAA,EAAAA,IAAiB,KAC1Cq/G,EAAeC,IAAoBt/G,EAAAA,EAAAA,OACnCu/G,EAAWC,IAAgBx/G,EAAAA,EAAAA,KAAkB,GAE9C9F,GAAOC,EAAAA,EAAAA,KAEPslH,GAAa/lH,EAAAA,EAAAA,KAAawF,IAC1BhG,GAAUgG,EAAIjK,SAChBiK,EAAIjK,QAAQiiC,OACd,GACC,CAACh+B,KAEJhD,EAAAA,EAAAA,KAAU,IAAOgD,GAASkqB,EAAAA,EAAAA,GAAsBi0F,QAAWplH,GAAY,CAACiH,EAAQm+G,KAChFnhH,EAAAA,EAAAA,KAAU,KACHgD,IACHylH,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcb,IAAU,GACxBe,EAAY,IACZE,OAAiBrtH,GACjButH,GAAa,GACf,GACC,CAACnB,EAAQnlH,KAEZhD,EAAAA,EAAAA,KAAU,IAAMupH,EAAWlB,IAAmB,CAACkB,EAAYvmH,KAE3D8M,EAAAA,EAAAA,KAAgB,KACd,MAAM05G,EAAajB,EAAYxpH,QAE3ByqH,GAAcP,IAAaO,EAAW1D,YACxC0D,EAAW1D,UAAYmD,EACzB,GACC,CAACA,IAEJ,MAAMQ,GAAejmH,EAAAA,EAAAA,KAAY,WAA+B,IAA9BkmH,EAAoBjqH,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,GACvDipH,EAAW,IAAIgB,EAAY,MAE3BC,EAAAA,EAAAA,KAAoB,KAClB,MAAMC,EAAOtB,EAAevpH,QACvB6qH,IAILA,EAAKlyH,UAAUuxB,OAAO,YAAa2gG,EAAKh3E,aAlEtB,KAmElBg3E,EAAKC,SAAS,CAAE3yG,IAAK0yG,EAAKh3E,aAAck3E,SAAU,WAAW,GAEjE,GAAG,IAEGC,GAAevmH,EAAAA,EAAAA,KAAY,KAE/B,GADA8lH,GAAa,IACRtmH,EACH,OAGF,MAAMgnH,EAAkBxB,EAASljF,OAAO2kF,UAAU,EA1E1B,KA2ElBC,EAAiBj3E,EAAQtvC,KAAKwmH,GAAMA,EAAE7kF,OAAO2kF,UAAU,EA5EvC,OA4E8Dx3F,QAAQ03F,GAAMA,EAAEzqH,SAEpG,IAAKsqH,GAAmBE,EAAexqH,OAAS,EAY9C,OAXA+oH,EAAYuB,GACRE,EAAexqH,OACbwqH,EAAexqH,OAAS,EAC1B+pH,EAAaS,GAEbxB,EAAWwB,GAGbT,SAEFH,GAAa,GAIf,GAAIP,SAAiChtH,IAAlBotH,IAAgCe,EAAef,IAEhE,YADAG,GAAa,GAIf,MAOMloD,EAAsB,CAC1BgpD,QAAS,CACP5B,SAAUwB,EACVK,QAVYH,EACbvmH,KAAI,CAAC8F,EAAM0C,KAAU,CACpB1C,KAAMA,EAAK67B,OACX6N,OAAQ9Y,OAAOluB,MACXA,IAAUg9G,GAAiB,CAAEmB,SAAS,WAOrC3B,GAAe,CAAE4B,UAAU,MAC5B1B,GAAqB,CAAE2B,gBAAgB,MACvCzB,GAAc,CAAE0B,MAAM,KAI9B,GAAI1B,EAAY,CACd,MAAM,KAAEt/G,EAAI,SAAEyuC,GAAc+wE,IAAYyB,EAAAA,GAAAA,IAAkBzB,EAASgB,UAAU,EAlHvD,OAkHoF,CAAC,EAE3G7oD,EAAQqpD,KAAO,CACbE,eAAgB,CAACtwF,OAAO8uF,OACpB1/G,GAAQ,CAAEw/G,SAAUx/G,MACpByuC,GAAY,CAAE0yE,iBAAkB1yE,GAExC,CAEA8tD,EAAO5kC,EAAQ,GACd,CACDp+D,EACAwlH,EACAv1E,EACA81E,EACAI,EACAR,EACAE,EACA7iB,EACAyjB,EACAR,IAGI4B,GAAernH,EAAAA,EAAAA,KAAY,CAAC2I,EAAe1C,KAC/C,MAAMigH,EAAa,IAAIz2E,GACvBy2E,EAAWv9G,GAAS1C,EAChBigH,EAAWA,EAAWhqH,OAAS,GAAG4lC,OAAO5lC,QAAUgqH,EAAWhqH,OA/I5C,GAgJpB+pH,EAAaC,GAEbhB,EAAWgB,EACb,GACC,CAACz2E,EAASw2E,IAEPqB,GAAetnH,EAAAA,EAAAA,KAAa2I,IAChC,MAAMu9G,EAAa,IAAIz2E,GACvBy2E,EAAW9hD,OAAOz7D,EAAO,GACzBu8G,EAAWgB,QAEW3tH,IAAlBotH,IACEA,IAAkBh9G,EACpBi9G,OAAiBrtH,GACRoQ,EAAQg9G,GACjBC,EAAiBD,EAAgB,KAIrCQ,EAAAA,EAAAA,KAAoB,KACbrB,EAAevpH,SAIpBupH,EAAevpH,QAAQrH,UAAUuxB,OAAO,YAAaq/F,EAAevpH,QAAQ6zC,aAzK1D,IAyKyF,GAC3G,GACD,CAACu2E,EAAel2E,IAEb83E,GAA4BvnH,EAAAA,EAAAA,KAAa6hF,IAC7C+jC,EAAiBtwG,OAAOusE,GAAU,GACjC,CAAC+jC,IAEE4B,GAA0BxnH,EAAAA,EAAAA,KAAaqH,IAC3C+9G,EAAe/9G,EAAEwV,OAAO8Y,QAAQ,GAC/B,IAEG8xF,GAA8BznH,EAAAA,EAAAA,KAAaqH,IAC/Ci+G,EAAqBj+G,EAAEwV,OAAO8Y,QAAQ,GACrC,IAEG+xF,GAAuB1nH,EAAAA,EAAAA,KAAaqH,IACxCm+G,EAAcn+G,EAAEwV,OAAO8Y,QAAQ,GAC9B,IAEGgyF,GAAiB3nH,EAAAA,EAAAA,KAAaqH,IAChB,KAAdA,EAAEugH,SACJrB,GACF,GACC,CAACA,IAEEsB,GAAuB7nH,EAAAA,EAAAA,KAAaqH,IACxC49G,EAAY59G,EAAEwV,OAAOxM,MAAM,GAC1B,IAEGy3G,GAAmB9nH,EAAAA,EAAAA,KAAY,KACnC,GAAI6lH,IAAcb,EAASljF,OAAO5lC,OAChC,OAAOsE,EAAK,4BAGE,GACf,CAACqlH,EAAWrlH,EAAMwkH,IAEf+C,GAAkB/nH,EAAAA,EAAAA,KAAa2I,IACnC,MAAM+9G,EAAiBj3E,EAAQtvC,KAAKwmH,GAAMA,EAAE7kF,SAAQ7S,QAAQ03F,GAAMA,EAAEzqH,SACpE,GAAI2pH,GAAaa,EAAexqH,OAAS,IAAMuzC,EAAQ9mC,GAAOm5B,OAAO5lC,OACnE,OAAOsE,EAAK,2BAEE,GACf,CAACqlH,EAAWrlH,EAAMivC,IAqBrB,SAASu4E,IACP,OAAOv4E,EAAQtvC,KAAI,CAACwvC,EAAQhnC,IAC1BjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOjtB,IAAU8mC,EAAQvzC,OAAS,GA7OlB,KA6OuBuzC,EAAQvzC,OAC3CsE,EAAK,cACLA,EAAK,wBACTqxB,MAAOk2F,EAAgBp/G,GACvB0H,MAAOs/B,EAEPr/B,SAAWjJ,GAAMggH,EAAa1+G,EAAOtB,EAAEqN,cAAcrE,OACrDmxD,WAAYmmD,IAEbh/G,IAAU8mC,EAAQvzC,OAAS,GAC1BwE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVmD,OAAK,EACLhD,MAAM,cACNrE,KAAK,UACLsH,UAAWzD,EAAK,UAEhBU,QAASA,IAAMomH,EAAa3+G,IAE5BjI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBAKvB,CAeA,OACEH,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CAACnB,OAAQA,EAAQG,QAASg+G,EAASzqF,OA7DvCxyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACiD,OAAK,EAAChD,MAAM,cAAcrE,KAAK,UAAUsH,UAAU,uBAAuB/C,QAASy8G,GACzFj9G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,YACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,UACNrE,KAAK,UACLkE,UAAU,sBACVK,QAASqlH,GAER/lH,EAAK,YAkDqDK,UAAU,aACzEH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKq/G,EACLjvF,MAAOp1B,EAAK,gBACZ6P,MAAO20G,EACPnzF,MAAOi2F,IACPx3G,SAAUu3G,EACVrmD,WAAYmmD,IAEdjnH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BAA6B2E,IAAKs/G,GAC/CpkH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBL,EAAK,gBAEpCqlH,GAvBP,WACE,MAAMa,EAAiBj3E,EAAQtvC,KAAKwmH,GAAMA,EAAE7kF,SAAQ7S,QAAQ03F,GAAMA,EAAEzqH,SAEpE,OAAOqpH,SAAiChtH,IAAlBotH,IAAgCe,EAAef,KACnEjlH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAK,4BAEpC,CAiBoBynH,GACb1C,EACC7kH,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,gBACL2mC,QA/BDu4E,IACJ7nH,KAAI,CAACy1B,EAAOjtB,KAAU,CAAG0H,MAAOwmB,OAAOluB,GAAQitB,QAAOsyF,OAAQv/G,IAAU8mC,EAAQvzC,OAAS,MA+BpF04E,SAAU/9C,OAAO8uF,GACjBr1G,SAAUi3G,IAGZS,KAKJtnH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACX+jH,GACAlkH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,iBACZm1B,QAASwvF,EACT70G,SAAUk3G,IAGd9mH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,gBACZm1B,QAAS0vF,EACTx0G,SAAU00G,EACVj1G,SAAUm3G,IAEZ/mH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,YACZm1B,QAAS4vF,EACT10G,SAAUw0G,QAAgC9sH,IAAXosH,EAC/Br0G,SAAUo3G,IAEXnC,GACC7kH,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBL,EAAK,6BACrCE,EAAAA,GAAAA,cAAA,OACE8E,IAAKu/G,EACLlkH,UAAU,eACVsnH,iBAAe,EACf5gH,IAAI,OACJ+I,SAAWjJ,GAAMq+G,EAAYr+G,EAAEqN,cAAc4tG,aAE/C5hH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QAAQL,EAAK,iCAI5B,I,4BClWZ,MAsCA,IAAerC,EAAAA,EAAAA,KAtCmBlG,IAE5B,IAF6B,MACjCypD,EAAK,MAAElkB,EAAK,QAAEt8B,GACfjJ,EACC,MAAMsc,GAAcvU,EAAAA,EAAAA,KAAaqH,IAE/BA,EAAEoO,iBAEFvU,EAAQwgD,EAAM0mE,OAAQ1mE,EAAMlsD,GAAG,GAC9B,CAACksD,EAAOxgD,IAELL,GAAYuG,EAAAA,GAAAA,GAChB,cACAo2B,GAAS,SAGL/oC,EAAO,GAAE4zH,EAAAA,IAAcC,EAAAA,IAAiB,oBAAoB5mE,EAAM6mE,YAClEtoF,EAAWuoF,GAAAA,GAAAA,IAAkB/zH,GAEnC,OACEiM,EAAAA,GAAAA,cAAA,OACEG,UAAWA,EACXiiE,YAAavuD,EACbzT,MAAQ,IAAG4gD,EAAM+mE,MAAM,OAEtBC,EAAAA,GAAqBhnE,EAAM0mE,OAC1B1nH,EAAAA,GAAAA,cAAA,OACEjM,IAAKA,EACLoM,UAAYo/B,OAAwC1nC,EAA7B,2BACvB+f,IAAKopC,EAAM0mE,OACXO,QAAQ,OACR,YAAWl0H,EACXsuC,OAAS9C,OAA6B1nC,EAAlBqwH,GAAAA,KAGpB,ICjCJC,GAAe,KAAQ/hH,EAAAA,GACvBgiH,GAAwB,IAAOhiH,EAAAA,GAC/BiiH,GAA+B,GAAMjiH,EAAAA,GACrCkiH,GAA2B,GAAMliH,EAAAA,GAwEvC,IAAe3I,EAAAA,EAAAA,KA7DqBlG,IAE9B,IAF+B,SACnCgxH,EAAQ,MAAEtgH,EAAK,UAAEugH,EAAS,oBAAEruE,EAAmB,aAAE/mC,EAAY,cAAEiqG,GAChE9lH,EAEC,MAAMuN,GAAMpK,EAAAA,EAAAA,IAAuB,OAEnC+tH,EAAAA,GAAAA,IAAe3jH,EAAKq1C,GAEpB,MAAM7mC,GAAuBo1B,EAAAA,GAAAA,GAAmBt1B,GAE1CtT,GAAOC,EAAAA,EAAAA,MACP,SAAEyC,IAAaC,EAAAA,EAAAA,MAEfimH,EAAelmH,EACjBwB,KAAKyH,OACJua,EAAAA,EAAAA,MAAiBlrB,MAAQwtH,GAA2BH,KAAiBhtE,EAAAA,IAAoBgtE,KA9B9D,EAiC1BhtH,EAAS6I,KAAKyrC,KAAK84E,EAAS9kE,OAAOjoD,OAASktH,IAC7CvtE,EAAAA,KAAqB34C,EAAW6lH,GAA+BD,KAEpE,OACEpoH,EAAAA,GAAAA,cAAA,OACE8E,IAAKA,EACLP,IAAKgkH,EAASzzH,GACdA,GAAK,kBAAiBmT,IACtB9H,UAAU,cAEVH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkB0G,IAAI,QAChC/G,EAAKyoH,EAASzzH,KAAO+oD,EAAAA,IAAuB,iBAAoB,QAAO51C,OAG5EjI,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GAAe,uBAAwB4M,GAClD9d,MAAQ,WAAU2F,OAClB0L,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAEzBub,GAAgBm1G,EAAS9kE,OAAOhkD,KAAK2I,IACpC,MAAM44C,EAAQwnE,EAAUpgH,GAExB,IAAK44C,EACH,OAIF,MAAM2nE,EAAiB,OAAQ3nE,EAAQA,EAAQA,EAAM,GAErD,OACEhhD,EAAAA,GAAAA,cAAC4oH,GAAW,CACVrkH,IAAKokH,EAAe7zH,GACpBksD,MAAO2nE,EACPnoH,QAAS68G,GACT,KAIJ,IC7CJwL,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAKH/xE,GAAe,KAAOnxC,EAAAA,GACtBw8C,GAAsB,MAAQx8C,EAAAA,GAG9BmjH,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA2LJ,UAAejsH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBm1B,EAAAA,GAAAA,IAAKn1B,EAAQ,CAAC,kBADpBD,EAzL2BnG,IAIzC,IAJ0C,UAC9C4I,EAAS,aACTy7G,EAAY,cACZyB,GACD9lH,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCsqB,GAAYtqB,EAAAA,EAAAA,IAAuB,OAElCivH,EAAYC,IAAiBhkH,EAAAA,EAAAA,OAC7B69C,EAAQomE,IAAajkH,EAAAA,EAAAA,OACrBkkH,EAAqBC,IAA0BnkH,EAAAA,EAAAA,IAAS,IACzD,SAAEpD,IAAaC,EAAAA,EAAAA,OAEnBq3C,aAAc0K,EACd9K,cAAe+K,GACbjL,MAEI3B,QAASsC,IAAwBhC,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS7/B,EACTwgC,WA7B0B,MA8BxBV,IACFA,EAAQrwC,SAASuwC,IACf,MAAM,GAAEzjD,GAAOyjD,EAAMp8B,OACrB,IAAKrnB,IAAOA,EAAGqjE,WAAW,mBACxB,OAGF,MAAMlwD,EAAQ2M,OAAO9f,EAAG6kC,QAAQ,kBAAmB,KACnD4vF,GAAsBthH,GAASswC,EAAMC,cAAc,IAGrD,MAAMC,EAAuB8wE,GAAsB39F,QAAO,CAAC8sB,EAAaF,EAAgBvwC,IAC/EuwC,GAAkBvwC,EAAQywC,EAAczwC,EAAQywC,GACtDC,KAECF,IAAyBE,KAI7BoxE,EAAuBtxE,EAAqB,IAGxCshB,GAAoBnU,EAAAA,GAAAA,GAAkB,GAAIokE,EAAAA,KAC1CnkE,EAAsBpC,GAAUsW,GAEtCjU,EAAAA,GAAAA,GAAoB9gC,IAAaxiB,GAAYqjD,KAG7C/pD,EAAAA,EAAAA,KAAU,KACR,IAAK6tH,EACH,OAGF,MAAMn3F,EAASxN,EAAUnqB,QACzB,IAAK23B,EACH,OAGF,MAAMuzB,EAAU+jE,EAAsBlnE,GAAsBpwB,EAAOwzB,YAAc,EAAIpD,GAAsB,GAE3GhU,EAAAA,GAAAA,GAAwBpc,EAAQuzB,EAAQ,GACvC,CAAC4jE,EAAYG,IAEhB,MAAMhqH,GAAOC,EAAAA,EAAAA,KAEPkqH,GAAgB5wH,EAAAA,EAAAA,KAAQ,KAC5B,IAAKswH,EACH,OAAO9kE,GAAAA,EAET,MAAMqlE,EAAkB,IAAIP,GAS5B,OARI/N,GAAcpgH,QAChB0uH,EAAgBC,QAAQ,CACtBr1H,GAAI+oD,EAAAA,IACJz1C,KAAMtI,EAAK,kBACX2jD,OAAQm4D,IAILsO,CAAe,GACrB,CAACP,EAAY7pH,EAAM87G,KAGtB9/G,EAAAA,EAAAA,KAAU,KACRO,YAAW,KACT,MAAM+tH,EAAOA,KACXR,EAAcF,GAAUC,YAExBE,EAAUH,GAAUjmE,OAAoB,EAGtCimE,GACFU,IAiFRjhH,iBAQE,OAPKqgH,KACHA,GAAmB,qCACnBC,UAAsBD,IAAkBa,QAExCX,IAAYY,EAAAA,GAAAA,IAAgBb,KAGvBD,EACT,CAxFQe,GACG17E,KAAKu7E,EACV,GA7GuB,IA8GD,GACvB,IAEH,MAAMI,GAAiBlrH,EAAAA,EAAAA,KAAa2I,IAClC8hH,EAAuB9hH,GACvB,MAAMwiH,EAAalyG,EAAa1d,QAAShG,QAAqB,oBAC3DR,cAAe,mBAAkB4T,MACpCsxC,EAAAA,GAAAA,IAAchhC,EAAa1d,QAAU4vH,EAAY,QAASlzE,GApH/B,IAoHoE,GAC9F,IAEG0O,GAAoB3mD,EAAAA,EAAAA,KAAY,CAAC0hD,EAAe54C,KACpDi1G,EAAcr8D,EAAO54C,EAAK,GACzB,CAACi1G,IAoBEqN,GAAqBhkH,EAAAA,GAAAA,GAAe,cAAevG,GAEzD,IAAK0lD,EACH,OACE7lD,EAAAA,GAAAA,cAAA,OAAKG,UAAWuqH,GACd1qH,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAKd,MAAM+4B,GAAkB1/C,EAAAA,GAAAA,GACtB,sBACC+9C,GAAuB,mBAG1B,OACEzkD,EAAAA,GAAAA,cAAA,OAAKG,UAAWuqH,GACd1qH,EAAAA,GAAAA,cAAA,OACE8E,IAAKkgB,EACL7kB,UAAWimD,EACXv/C,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAEzBoyH,EAAcxqH,KAxCrB,SAA8B8oH,EAA6BtgH,GACzD,MAAMnE,EAAO+kH,GAAkBN,EAASzzH,IAExC,OAAOgP,GACL9D,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAY,sBAAoB8H,IAAU6hH,EAAsB,YAAc,IAC9ExmH,OAAK,EACLqjD,OAAK,EACLrmD,MAAM,cAENE,QAASA,IAAMgqH,EAAeviH,GAC9B1E,UAAWglH,EAASngH,MAEpBpI,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ5C,KAG3C,KA0BI9D,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACL42B,SAAUqV,EACVrkD,WAAWuG,EAAAA,GAAAA,GAAe,gCAAiCV,EAAAA,GAAe,eAAiB,kBAE1FikH,EAAcxqH,KAAI,CAAC8oH,EAAUjkG,IAC5BtkB,EAAAA,GAAAA,cAAC2qH,GAAa,CACZpC,SAAUA,EACVtgH,MAAOqc,EACPkkG,UAAW/kE,EACXtJ,oBAAqBA,EACrB/mC,aAAc02G,GAAuBxlG,EAAI,GAAKwlG,GAAuBxlG,EAAI,EACzE+4F,cAAep3D,OAIjB,K,gBCtKV,MAAMrD,GAAsB,IAAMx8C,EAAAA,GAgTlC,IAAe3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM,SACJqjD,EAAQ,MACRc,EAAK,OACL8kE,EAAM,SACN8B,EAAQ,WACRC,GACEltH,EAAOwtC,SAELyQ,GAAkBj5B,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAC/CF,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1B0sH,GAAoBxsH,EAAAA,EAAAA,IAASF,QAA+DvG,GAArD8vG,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAASq9C,YAAY3mD,GAE7F,MAAO,CACLoJ,OACA6sH,eAAgBjC,EAAO39E,SACvBwQ,iBAAkBivE,EAASz/E,SAC3B6/E,gBAAiBH,EAAW1/E,SAC5BgY,gBAAiBD,EACjBgsC,YAAalrC,EAAMC,OACnBC,YAAY+mE,EAAAA,EAAAA,IAAyBttH,GACrCi+C,kBACAG,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GACjDmtH,mBACD,GAzBeptH,EA9S6BnG,IAkB3C,IAlB4C,KAChD2G,EAAI,SACJJ,EAAQ,UACRqC,EAAS,SACT2F,EAAQ,cACRs2C,EAAa,YACblC,EAAW,gBACX+zD,EAAe,eACf8c,EAAc,iBACdpvE,EAAgB,gBAChBqvE,EAAe,YACf97B,EAAW,gBACX/rC,EAAe,iBACf2nE,EAAgB,WAChB5mE,EAAU,gBACVtI,EAAe,qBACfG,EAAoB,gBACpBO,GACD/kD,EACC,MAAM,mBACJ2zH,EAAkB,iBAClBC,EAAgB,cAChBliB,EAAa,YACbD,EAAW,oBACXoiB,IACEhsH,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCsqB,GAAYtqB,EAAAA,EAAAA,IAAuB,MAEnC0/C,GAAkB1/C,EAAAA,EAAAA,IAA0B,OAGhDo/C,aAAc0K,EACd9K,cAAe+K,GACbjL,KAEE6xE,GAAoBC,EAAAA,GAAAA,GAAqBptH,EAAMpJ,GAAIgJ,IAEnD,eACJ65C,EAAc,0BACdG,EAAyB,mCACzBmB,EAAkC,mCAClCL,EAAkC,6BAClCM,EAA4B,iBAC5BC,GACE3B,GAA0Bj/B,EAAcyM,EAAW,cAAelf,GAEhEhG,GAAOC,EAAAA,EAAAA,KAEP4kD,EAAiB7rD,QAAQo2F,GAEzBtqC,GAAUvrD,EAAAA,EAAAA,KAAQ,KACtB,IAAK61F,EACH,OAAOrqC,GAAAA,EAGT,MAAMC,EAAc,GAEdymE,EAAsBj2H,OAAOq2B,QAAO+4B,EAAAA,GAAAA,IAAWvB,EAAiB+rC,IAsBtE,GApBIvzC,EAAiBngD,QACnBspD,EAAYjhD,KAAK,CACf/O,GAAIipD,EAAAA,IACJsB,WAAY,IACZj/C,MAAON,EAAK,oBACZqrC,SAAUwQ,EACVpS,MAAOoS,EAAiBngD,SAIxBuvH,EAAevvH,QACjBspD,EAAYjhD,KAAK,CACf/O,GAAI+oD,EAAAA,IACJwB,WAAY,IACZj/C,MAAON,EAAK,kBACZqrC,SAAU4/E,EACVxhF,MAAOwhF,EAAevvH,SAItBugD,EAAsB,CACxB,MAAMyvE,EAAuBD,EAC1B9rH,KAAIC,IAAA,IAAC,SAAEyrC,GAAUzrC,EAAA,OAAKyrC,GAAU5c,QAAQ2b,GAAYA,EAAQuhF,WAAU,IACtEC,OACAn9F,OAAOz1B,SAEJ6yH,GAAuBC,EAAAA,GAAAA,IAAc,IAAIJ,KAAyBR,GAAkB,MAEtFW,EAAqBnwH,QACvBspD,EAAYjhD,KAAK,CACf/O,GAAImuD,EAAAA,IACJ5D,WAAY,IACZj/C,MAAON,EAAK,mBACZqrC,SAAUwgF,EACVpiF,MAAOoiF,EAAqBnwH,QAGlC,CAEA,GAAIsvH,EAAkB,CACpB,MAAMe,EAAU1oE,EAAgB2nE,GAC5Be,GACF/mE,EAAYjhD,KAAK,CACf/O,GAAIkuD,EAAAA,IACJ3D,WAAYwsE,EAAQxsE,WACpBj/C,MAAON,EAAK,iBACZqrC,SAAU0gF,EAAQ1gF,SAClB5B,MAAOsiF,EAAQ1gF,SAAU3vC,QAG/B,CAEA,MAAO,IACFspD,KACAymE,EACJ,GACA,CACDr8B,EAAa/rC,EAAiBxH,EAAkBovE,EAAgBhvE,EAAsB+uE,EAAkBhrH,EACxGkrH,IAGItlE,GAAkBrsD,EAAAA,EAAAA,KAAQ,IAC9BsrD,GAC4D,IAAzDC,EAAQr2B,QAAQpyB,GAAQA,EAAIgvC,UAAU3vC,SAAQA,QAChD,CAACopD,EAASD,KAEb7oD,EAAAA,EAAAA,KAAU,KACHo+C,IACLgxE,IACKjd,GACLod,EAAkB,CAAEzpH,KAAM,kBAAkB,GAC3C,CAACqsG,EAAiB/zD,EAAagxE,EAAoBG,IAEtD,MAAMtxD,GAAoBnU,EAAAA,GAAAA,GAAkB,GAAItO,EAAAA,KAC1Cw0E,EAAuBnnE,GAAkBoV,IAAsBrU,GAAmBuoD,GAExFnoD,EAAAA,GAAAA,GAAoB9gC,GAAY8mG,IAAyB9mG,EAAUnqB,UAGnEiB,EAAAA,EAAAA,KAAU,KACR,IAAK6oD,EACH,OAGF,MAAMnyB,EAASxN,EAAUnqB,QACzB,IAAK23B,EACH,OAGF,MAAMuzB,EAAUpO,EAAiBiL,IAAuBpwB,EAAOwzB,YAAc,EAAIpD,GAAsB,IAEvGhU,EAAAA,GAAAA,GAAwBpc,EAAQuzB,EAAQ,GACvC,CAACpB,EAAgBhN,IAEpB,MAAMo0E,GAAsBzsH,EAAAA,EAAAA,KAAY,CAAC4qC,EAAqB+gB,EAAoBijD,KAChF5xD,EAAgBpS,EAAS+gB,EAAUijD,GAAgB,GACnDid,EAAiB,CAAEjhF,WAAU,GAC5B,CAACihF,EAAkB7uE,IAEhB0vE,GAAsB1sH,EAAAA,EAAAA,KAAa4qC,IACvC++D,EAAc,CAAE/+D,WAAU,GACzB,CAAC++D,IAEEgjB,GAAoB3sH,EAAAA,EAAAA,KAAa4qC,IACrC8+D,EAAY,CAAE9+D,WAAU,GACvB,CAAC8+D,IAEEhnC,GAAkB1iE,EAAAA,EAAAA,KAAY,KAC7B2uG,GACLod,EAAkB,CAAEzpH,KAAM,iBAAkB,GAC3C,CAACqsG,EAAiBod,IAEfa,GAA4B5sH,EAAAA,EAAAA,KAAa4qC,IAC7CkhF,EAAoB,CAAElhF,WAAU,GAC/B,CAACkhF,IAgEEpwE,GAAgBt0C,EAAAA,GAAAA,G3I1TD,uB2I0T6BvG,GAElD,IAAK2rH,EACH,OACE9rH,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,GACZizD,EAEEvoD,EACF1lD,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IAAwByK,EAAK,eAE7CE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAJRrtB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IAAwByK,EAAK,oCAUrD,MAAMsmD,GAAkB1/C,EAAAA,GAAAA,GACtBrR,GACA,6BACCovD,GAAuBpvD,IAG1B,OACE2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,GACdh7C,EAAAA,GAAAA,cAAA,OAAK8E,IAAKkgB,EAAW7kB,UAAWimD,GAC9BpmD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKs1C,EAAiBj6C,UAAU,kBACvCykD,EAAQnlD,KAzFjB,SAAqBg8C,EAA8CxzC,GACjE,MAAMq+C,EAAe7K,EAAWtQ,WAAW,GACrC0F,GAAkBnqC,EAAAA,GAAAA,GAAerR,GAAqB4S,IAAU0vC,G3I9PiN,wB2I+PjR4O,EAAmBt+C,EAAQu+C,EAAAA,IAEjC,OAAI/K,EAAW3mD,KAAO+oD,EAAAA,KACjBpC,EAAW3mD,KAAOipD,EAAAA,KAClBtC,EAAW3mD,KAAOkuD,EAAAA,KAClBvH,EAAW3mD,KAAOmuD,EAAAA,KAClBxH,EAAWgG,eACV6E,EAGFtmD,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLkE,IAAKk3C,EAAW3mD,GAChBqL,UAAW0wC,EACXttC,UAAWk4C,EAAWr7C,MACtBkD,OAAK,EACLqjD,MAAOlL,EAAW3mD,KAAO+oD,EAAAA,KAAwBpC,EAAW3mD,KAAOipD,EAAAA,IACnEz9C,MAAM,cAENE,QAASA,IAAM24C,EAAiBlxC,IAE/BwzC,EAAW3mD,KAAOmuD,EAAAA,IACjBjjD,EAAAA,GAAAA,cAACg/D,GAAAA,EAAW,CAACC,cAAY,EAACC,KAAG,IAC3BzjB,EAAW3mD,KAAO+oD,EAAAA,IACpB79C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBACXs7C,EAAW3mD,KAAOipD,EAAAA,IACpB/9C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBACXs7C,EAAW3mD,KAAOkuD,EAAAA,IACpBhjD,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAC/jB,KAAMA,EAAMjC,KAAK,UAEzB+D,EAAAA,GAAAA,cAAC4mD,GAAe,CACdnL,WAAYA,EACZnrC,QAAS4zC,IAAehK,EACxBC,oBAAqBjB,EACrBkB,gBAAiBmM,EAAmBnM,OAAkBviD,KAO5DmI,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ18C,IAAKk3C,EAAW3mD,GAChBo1C,QAASoc,EACTrqD,KAAMulD,EAAAA,IACNphD,MAAOq7C,EAAWr7C,MAClBD,UAAW0wC,EACXvgC,QAAS4zC,IAAehK,EACxBC,oBAAqBjB,EACrB2N,eAAa,EACb9K,sBAAoB,EACpB3B,gBAAiBmM,EAAmBnM,OAAkBviD,EACtDwjD,qBAAsBe,EACtB57C,QAAS24C,EACTjsB,SAAUjlB,GAIlB,MAgCIjI,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACLpD,YAAa6sD,EACb7yB,SAAUqV,EACVrkD,WAAWuG,EAAAA,GAAAA,GAAerR,GAAa,eAAgB2Q,EAAAA,GAAe,eAAiB,kBAEtF4+C,EAAQnlD,KAAI,CAACg8C,EAAYn3B,IACxBtkB,EAAAA,GAAAA,cAAC8mD,GAAU,CACTviD,IAAKk3C,EAAW3mD,GAChB2mD,WAAYA,EACZvB,YAAaphD,QAAQorD,GAAchK,GACnCjyC,MAAOqc,EACP61B,oBAAqBrC,EACrBmB,mCAAoCA,EACpCL,mCAAoCA,EACpC8C,aAAc/D,GAAkBrzB,EAAI,GAAKqzB,GAAkBrzB,EAAI,EAC/Dq3B,iBAAkBA,EAClBC,gBAAiBA,EACjBG,qBAAsBA,EACtBK,cAAeA,EACfE,gBAAiByvE,EACjBxvE,gBAAiByvE,EACjBxvE,cAAeyvE,EACfxvE,sBAAuByvE,OAIzB,K,uPC7UV,MAmLA,IAAezuH,EAAAA,EAAAA,KAnLiBlG,IAQ1B,IAR2B,IAC/Bk1G,EAAG,WACHnxG,EAAU,UACV6E,EAAS,oBACTg6C,EAAmB,QACnB35C,EAAO,cACP2rH,EAAa,gBACbvwE,GACDrkD,EAEC,MAAMuN,GAAMpK,EAAAA,EAAAA,IAAuB,MAE7BoF,GAAOC,EAAAA,EAAAA,KAEPq0E,EAAkB,MAAKq4B,EAAI33G,KAE3BolD,GADiBsD,EAAAA,GAAAA,IAAkB14C,EAAKq1C,KACP7+C,EACjCxB,GAAiBH,EAAAA,EAAAA,GAAU,GAAEy6E,YAA0Bl6B,EAAatgD,EAAAA,GAAAA,UACnEwyH,IAAaxmH,EAAAA,EAAAA,IAAS6mG,EAAIp8D,WAAW71C,UAAYV,GAClDu6E,GAAW5rC,EAAAA,GAAAA,GAAcgkE,EAAIp8D,WAAW71C,SAAU4xH,GAClDC,GAAY1yH,EAAAA,EAAAA,GAASy6E,GAAiBl6B,EAAatgD,EAAAA,GAAAA,SACnD0yH,EAAoBxzH,QAAQohD,GAAemyE,IAC3C,WAAEv+G,EAAU,kBAAEoF,IAAsBC,EAAAA,GAAAA,IAAa,GACjDE,EAAsB6mC,IAAgBpsC,EACtCy+G,EAAeryE,GAAepsC,GAE9B,kBACJyyG,EAAiB,oBAAEiM,EAAmB,wBACtCC,EAAuB,kBAAEhM,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB97G,GAErBogG,GAAoB5lG,EAAAA,EAAAA,KAAY,IAAMwF,EAAIjK,SAAS,IAEnDsqG,GAAiB7lG,EAAAA,EAAAA,KACrB,IAAMwF,EAAIjK,QAAShG,QAAQ,kCAC3B,IAGIuwG,GAAiB9lG,EAAAA,EAAAA,KACrB,IAAMwF,EAAIjK,QAASxG,cAAc,8BACjC,KAGI,UACJgQ,EAAS,UAAE2L,EAAS,iBAAEo3C,EAAgB,iBAAE2+C,EAAkBvwG,MAAOwwG,IAC/DE,EAAAA,GAAAA,GACFsmB,EACAtnB,EACAC,EACAC,GAGIvxF,GAAcvU,EAAAA,EAAAA,KAAY,MAC1BihH,GAAsB//G,GAC1BA,EAAQ,IACHisG,EACHpyG,QAASgyH,GACT,GACD,CAAC9L,EAAmB//G,EAASisG,EAAK4f,IAE/BK,GAAoBptH,EAAAA,EAAAA,KAAaqH,IACrCA,EAAEC,kBACFD,EAAEoO,iBACFo3G,EAAe1f,EAAI,GAClB,CAAC0f,EAAe1f,IAEbkgB,GAAsBrtH,EAAAA,EAAAA,KAAY,KACtC6sH,IAAgB1f,EAAI,GACnB,CAACA,EAAK0f,IAEHS,GAAkBttH,EAAAA,EAAAA,KAAY,KAClCkB,EAAS,IACJisG,EACHpyG,QAASgyH,IACR,EAAK,GACP,CAAC5f,EAAKjsG,EAAS6rH,IAEZQ,GAAsBvtH,EAAAA,EAAAA,KAAY,KACtCkB,EAAS,IACJisG,EACHpyG,QAASgyH,QACRx0H,GAAW,EAAK,GAClB,CAAC40G,EAAKjsG,EAAS6rH,IAEZvqD,GAAkBxiE,EAAAA,EAAAA,KAAaqH,KACnCmmH,EAAAA,GAAAA,GAAoCnmH,GACpC8lH,EAAwB9lH,EAAE,GACzB,CAAC8lH,KAEJ3wH,EAAAA,EAAAA,KAAU,KACJR,GAAYolH,GAAwB,GACvC,CAACA,EAAwBplH,IAE5B,MAAM0/C,GAAgBt0C,EAAAA,GAAAA,GACpB,YACA+lG,EAAI3xG,OAAS2xG,EAAItxG,QAAUsxG,EAAI3xG,MAAQ2xG,EAAItxG,OAAS,WAAa,aACjEqF,GAAW,cACX4zE,EACAj0E,GAGF,OACEH,EAAAA,GAAAA,cAAA,OACE8E,IAAKA,EACL3E,UAAW66C,EACXonB,YAAaN,EACbthE,QAASqT,EACTwB,cAAeorG,IAEbz6G,EAAAA,IAAgBmmH,GAChBnsH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,oBACVG,MAAM,OACNggD,MAAI,EACJysE,aAAW,EACXvsH,QAASksH,GAET1sH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4CAGhBisH,GACCpsH,EAAAA,GAAAA,cAAA,UACE8E,IAAKuvE,EACLl0E,UAAU,YAEV3K,MAAO+2H,EAAe,sBAAmB10H,IAG5CiC,IAAmByyH,GAClBvsH,EAAAA,GAAAA,cAAA,OACEjM,IAAK+F,EACL8d,IAAI,GACJzX,UAAU,YAGbmsH,GACCtsH,EAAAA,GAAAA,cAAC4oC,GAAAA,EAAcrzB,GAAA,CACbszB,SAAO,EACP90C,IAAKs4H,EACL72G,UAAQ,EACRG,MAAI,EACJpB,OAAK,EACLvC,yBAAuB,EACvB0D,aAAW,EACXs3G,QAAQ,QAEJ95G,IAGPG,GACCrT,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAOxG,GAAkBsyH,EAAY,QAAU,UAEzD5rH,QAAmC3I,IAAxB20H,GACVxsH,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQyhH,EACRn5D,iBAAkBA,EAClB2+C,iBAAkBA,EAClB1hG,UAAWA,EACX2L,UAAWA,EACXxa,MAAOwwG,EACP7lG,UAAU,mBACV8P,WAAS,EACThR,QAASyhH,EACTn2F,oBAAqBo2F,IAEnB/kE,GAAmB57C,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAAC9D,QAASosH,EAAiB9oH,KAAK,QAAQhE,EAAK,qBAC3EE,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAAC9D,QAASqsH,EAAqB/oH,KAAK,YAC1ChE,EAAK87C,EAAkB,cAAgB,oBAEzCuwE,GACCnsH,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACmhC,aAAW,EAAC3hC,KAAK,SAAStD,QAASmsH,GAAsB7sH,EAAK,YAI1E,ICxHV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAES,IAAWL,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EAClDi+C,EAAkB9iD,QAAQsF,KAAWukB,EAAAA,EAAAA,IAAqBhlB,EAAQS,GACxE,MAAO,CACL4uC,UAAWrvC,EAAOsvH,KAAKC,MAAMD,KAC7BrxE,kBACD,GAPel+C,EA3DyBnG,IAOvC,IAPwC,UAC5C4I,EAAS,YACT+5C,EAAW,YACXizE,EAAW,UACXngF,EAAS,gBACT4O,EAAe,YACfwxE,GACD71H,EACC,MAAM,cAAE81H,EAAa,QAAE3jB,IAAYtqG,EAAAA,EAAAA,MAG7BmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OAG1Cm9C,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAc+0G,WAjBzB,OAmB5BxxH,EAAAA,EAAAA,KAAU,KACJo+C,GACFmzE,GACF,GACC,CAACnzE,EAAamzE,IAEjB,MAAMX,GAAoBptH,EAAAA,EAAAA,KAAamtG,IACrC/C,EAAQ,CAAE+C,MAAK8gB,cAAc,GAAO,GACnC,CAAC7jB,IAEE3vC,GAAoBnU,EAAAA,GAAAA,GAAkB,GAAItO,EAAAA,KAEhD,OACEt3C,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACLpY,WAAWuG,EAAAA,GAAAA,GAAe,YAAavG,EAAW6F,EAAAA,GAAe,eAAiB,kBAEhFmnH,EAEEpzD,GAAqB/sB,GAAaA,EAAUxxC,OAC9CwxC,EAAUvtC,KAAKgtG,GACbzsG,EAAAA,GAAAA,cAACwtH,GAAS,CACRjpH,IAAKkoG,EAAI33G,GACT23G,IAAKA,EACLtyD,oBAAqBA,EACrB7+C,YAAa4+C,EACb15C,QAAS2sH,EAAcC,OAAcv1H,EACrCs0H,cAAeO,EACf9wE,gBAAiBA,MAGnBme,GAAqB/sB,EACvBhtC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAkB,kBAEjCH,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAhBRrtB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAkB,8CAmBjC,KCzEH,IAAKstH,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,6BAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,eAAdA,CAAc,MAOnB,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAevyE,aAAc,yBAC9B,CAACuyE,GAAeG,UAAW,mBAC3B,CAACH,GAAeI,MAAO,WAGnBC,GAAwB,CAC5B,CAACL,GAAeE,OAAQ,aACxB,CAACF,GAAevyE,aAAc,gBAC9B,CAACuyE,GAAeG,UAAW,gBAC3B,CAACH,GAAeI,MAAO,aAqEzB,IAAepwH,EAAAA,EAAAA,KAlEwBlG,IAGjC,IAHkC,UACtCokE,EAAS,YAAEQ,EAAW,eAAEihD,EAAc,aAAE2Q,EAAY,kBAAExK,EAAiB,iBACvEC,GACDjsH,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEb,SAASiuH,EAAgBjyD,GACvB,OACE/7D,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAY,sBAAoBw7D,IAAcI,EAAM,YAAc,IAElEv7D,QAASA,IAAM27D,EAAYJ,GAC3Bx4D,UAAWzD,EAAK4tH,GAAuB3xD,IACvCz4D,OAAK,EACLqjD,OAAK,EACLrmD,MAAM,eAENN,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQonH,GAAsB/xD,MAGjE,CAEA,MAAMkyD,GAAmB3uH,EAAAA,EAAAA,KAAY,KACnCyuH,EAAapyD,IAAc8xD,GAAeG,SAAW,WAAa,OAAO,GACxE,CAACjyD,EAAWoyD,IAMf,OACE/tH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoBK,QALrC,SAAyB2d,GACvBA,EAAMvX,iBACR,EAG+DC,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACpF8jE,IAAc8xD,GAAeE,OAAShyD,IAAc8xD,GAAevyE,aAClEl7C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVoD,UAAWo4D,IAAc8xD,GAAeG,SAAW,kBAAoB,cACvEtqH,OAAK,EACLqjD,OAAK,EACLrmD,MAAM,cACNE,QAASytH,GAETjuH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAIhBqjH,GAAoBwK,EAAgBP,GAAeE,OACnDnK,GAAoBwK,EAAgBP,GAAevyE,cAClDqoE,GAAqByK,EAAgBP,GAAeG,WACpDrK,GAAqByK,EAAgBP,GAAeI,OAEpDlyD,IAAc8xD,GAAeE,OAAShyD,IAAc8xD,GAAevyE,cACnEl7C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVK,QAAS48G,EACT75G,UAAU,gBACVD,OAAK,EACLqjD,OAAK,EACLrmD,MAAM,eAENN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,2BAGb,IC3BV,IAAIkqC,IAAc,EAElB,MA+QA,IAAe5sC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLuwH,mBAAmB73G,EAAAA,EAAAA,IAAe1Y,GAAQuwH,kBAC1CnyE,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GACjD+3D,aAAc/3D,EAAO+3D,aACrBy4D,yBAAyBnnE,EAAAA,EAAAA,IAA+BrpD,MAN1CD,EA/Q0BnG,IA4BxC,IA5ByC,OAC7C6G,EAAM,SACNN,EAAQ,OACRgB,EAAM,gBACNmvG,EAAe,YACfkf,EAAW,kBACXe,EAAiB,qBACjBnyE,EAAoB,aACpB2Z,EAAY,OACZrzB,EAAM,QACNpjC,EAAO,cACPo+G,EAAa,kBACbkG,EAAiB,iBACjBC,EAAgB,oBAChBj/D,EAAmB,gBACnBjI,EAAe,UACfn8C,EAAS,YACTitH,EAAW,eACXhQ,EAAc,aACd2Q,EAAY,eACZxQ,EAAc,qBACdD,EAAoB,UACpBj5G,EAAS,UACT2L,EAAS,iBACTo3C,EAAgB,iBAChB2+C,EAAgB,MAChBvwG,EAAK,wBACL24H,GACD52H,EACC,MAAM,uBAAE62H,IAA2BhvH,EAAAA,EAAAA,OAC5Bu8D,EAAWC,IAAgBh2D,EAAAA,EAAAA,IAAiB,IAC5Cg2G,EAAcyS,IAAmBzoH,EAAAA,EAAAA,IAAmB,KACpD+9C,EAAoB2qE,IAAyB1oH,EAAAA,EAAAA,IAAmB,KACjE,SAAEpD,IAAaC,EAAAA,EAAAA,OAEd8rH,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe3vH,EAAQG,OAASpH,EAAW2K,IAClF,aAAE4Q,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,EAAQG,GAAS,GAAO,IAEpForC,IAAevrC,IAClBurC,IAAc,IAGhBvuC,EAAAA,EAAAA,KAAU,KACRumC,GAAQ,GACP,CAACA,KAGJvmC,EAAAA,EAAAA,KAAU,KACJ0nH,GACJ5nD,EA5FuB,EA4FS,GAC/B,CAAC4nD,KAEJ1nH,EAAAA,EAAAA,KAAU,KACJ45D,GAAgB3Z,GAClBqyE,GACF,GACC,CAACryE,EAAsB2Z,EAAc04D,KAExCxiH,EAAAA,EAAAA,KAAgB,KACd,GAAKpJ,GAAa1D,IAAUykH,EAO5B,OAHAjwH,SAAS2b,KAAKzb,UAAUC,IAAI,iCAC5BH,SAAS2b,KAAKzb,UAAUC,IAAI,uBAErB,KACLH,SAAS2b,KAAKzb,UAAU0b,OAAO,uBAE/B7S,YAAW,MACT0M,EAAAA,EAAAA,KAAgB,KACdzV,SAAS2b,KAAKzb,UAAU0b,OAAO,gCAAgC,GAC/D,GApHiB,IAqHC,CACvB,GACA,CAACq0G,EAAmB/gH,EAAU1D,IAEjC,MAAM4vH,GAAkBh0H,EAAAA,EAAAA,IAAOkhH,GAC/B8S,EAAgB7zH,QAAU+gH,GAC1B9/G,EAAAA,EAAAA,KAAU,KACH4yH,EAAgB7zH,QAAQW,SAAUsD,IAIvC4vH,EAAgB7zH,QAAQmN,SAASI,IAC/Bm1G,EAAe,CAAEv8D,MAAO54C,GAAO,IAGjCimH,EAAgB,IAAG,GAClB,CAACvvH,EAAQy+G,IAEZ,MAAMt3D,GAAoB3mD,EAAAA,EAAAA,KAAY,CAAC0hD,EAAe54C,KACpDimH,GAAiB5qE,GAAW,IAAIA,EAAQr7C,KAExCi1G,EAAcr8D,EAAM,GACnB,CAACq8D,IAEEsR,GAAwBj0H,EAAAA,EAAAA,IAAOipD,GACrCgrE,EAAsB9zH,QAAU8oD,GAChC7nD,EAAAA,EAAAA,KAAU,KACH6yH,EAAsB9zH,QAAQW,SAAUsD,IAI7C6vH,EAAsB9zH,QAAQmN,SAASizC,IACrCqiE,EAAqB,CACnBriE,cACA,IAGJozE,EAAgB,IAAG,GAClB,CAACvvH,EAAQw+G,IAEZ,MAAMsR,GAA0BtvH,EAAAA,EAAAA,KAAa0hD,IAC3CstE,GAAuB3/F,GAAQ,IAAIA,EAAKqyB,EAAMlsD,MAE9CyvD,EAAoBvD,EAAM,GACzB,CAACuD,IAEEqN,GAAetyD,EAAAA,EAAAA,KAAasC,IAChC3C,IACA8uH,EAAansH,EAAK,GACjB,CAAC3C,EAAS8uH,IAEPhC,GAAsBzsH,EAAAA,EAAAA,KAAY,CACtC4qC,EAAqB+gB,EAAoBijD,EAA0B2gB,KAEnEvyE,IAAkBpS,EAAS+gB,EAAUijD,GAAgB,EAAM2gB,EAA0B,GACpF,CAACvyE,IAEEx8C,IAAOC,EAAAA,EAAAA,KAEb,SAAS8pD,GAAc7/C,EAAmB2qF,GACxC,OAAQh5B,GACN,KAAK8xD,GAAeE,MAClB,OACE3tH,EAAAA,GAAAA,cAAC8uH,GAAW,CACV3uH,UAAU,aACVk9G,cAAep3D,IAGrB,KAAKwnE,GAAevyE,YAClB,OACEl7C,EAAAA,GAAAA,cAAC4nD,GAAiB,CAChBznD,UAAU,aACV2F,UAAWhH,IAAWkL,EACtBkwC,YAAap7C,IAAWkL,GAAY2qF,GACpCv2F,OAAQA,EACRg+C,eAAgB55C,GAAY2rH,EAC5B5pE,oBAAqBqqE,IAG3B,KAAKnB,GAAeG,SAClB,OACE5tH,EAAAA,GAAAA,cAAC+uH,GAAa,CACZ5uH,UAAU,aACV2F,UAAWhH,IAAWkL,EACtBkwC,cAAa+zD,GAAkBnvG,IAAWkL,GAAY2qF,GACtDsZ,gBAAiBA,EACjB7vG,OAAQA,EACRN,SAAUA,EACVs+C,eAAgB55C,GAAY2rH,EAC5B7xE,gBAAiByvE,IAGvB,KAAK0B,GAAeI,KAClB,OACE7tH,EAAAA,GAAAA,cAACgvH,GAAS,CACR7uH,UAAU,aACV+5C,cAAaizE,GAAcruH,IAAWkL,GAAY2qF,GAClDw4B,YAAaA,EACbC,YAAaA,IAMvB,CAMA,MAAMj2G,GACJnX,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBK,QANrC,SAAyB2d,GACvBA,EAAMvX,iBACR,GAKOyjC,IACCrqC,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACTphB,KAAK,QACLqhB,UAAWkyC,EACXS,YAAa9mE,OAAOq2B,OAAO+hG,IAAwBlyH,QAElDquD,KAINrnD,GACCxC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLiD,OAAK,EACLqjD,OAAK,EACLrmD,MAAM,cACNiD,UAAWzD,GAAK,SAChBK,UAAU,sBACVlE,KAAK,OACLuE,QAASvB,GAETe,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAACivH,GAAgB,CACftzD,UAAWA,EACXQ,YAAaP,EACbwhD,eAAgBA,EAChB2Q,aAAcn8D,EACd2xD,kBAAmBA,EACnBC,iBAAkBA,KAKxB,GAAIhhH,EAAU,CACZ,IAAK4Q,EACH,OAGF,MAAM87G,GAAkBxoH,EAAAA,GAAAA,GACtB,yBACA4M,EACA46G,GAAqB,mBACrB3K,GAAqB,uBAGvB,OAAIA,EAEAvjH,EAAAA,GAAAA,cAAA,OAAKG,UAAW+uH,GACb/3G,IAMLnX,EAAAA,GAAAA,cAACwnD,GAAAA,EAAM,KACLxnD,EAAAA,GAAAA,cAAA,OAAKG,UAAW+uH,GACb/3G,IAIT,CAEA,OACEnX,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACRuF,UAAWk/G,EAAoBl/G,EAAY,OAC3C2L,UAAWuzG,EAAoBvzG,EAAY,SAC3C/Q,QAASA,EACT+3G,WAAYuM,EACZpjH,WAAWuG,EAAAA,GAAAA,GAAe,aAAcvG,GACxCoqB,oBAAqBtrB,EACrB2/F,aAAe54F,EAAAA,QAAkCnO,EAAnB02H,EAC9BY,aAAenpH,EAAAA,QAAkCnO,EAAnB22H,EAC9B7mE,mBAAoB3hD,EAAAA,GACpByhD,WAAS,EACTL,iBAAkBA,EAClB2+C,iBAAkBA,EAClBvwG,MAAOA,GAEN2hB,GACI,KCtSX,IAAe1Z,EAAAA,EAAAA,KA3BkBlG,IAM3B,IAN4B,WAChC63H,EAAU,MACVtyF,EAAK,WACLuyF,EAAU,IACVt+F,EAAG,QACHvwB,GACDjJ,EACC,OACEyI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAK8qH,EAAWjc,QAChBjzG,WAAWuG,EAAAA,GAAAA,GAAe,6CAA8C0oH,GAAc,eACtF58D,WAAS,EAEThyD,QAASA,IAAMA,EAAQ6uH,GACvBvyF,MAAOA,GAENsyF,GACCpvH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAChmB,KAAK,QAAQimB,KAAM6O,IAE7B/wB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ,IAAEkvH,EAAWjc,SACrCpzG,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYM,EAAAA,GAAAA,GAAW4uH,EAAWrnF,eAE3C,ICiEf,IAAevqC,EAAAA,EAAAA,KAjFyBlG,IAOlC,IAPmC,OACvCuH,EAAM,aACNy0D,EAAY,YACZs9C,EAAW,QACX2L,EAAO,QACPh8G,EAAO,QACPvB,GACD1H,EACC,MAAM,eAAE46G,IAAmB/yG,EAAAA,EAAAA,MAGrBmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GAEzFy3H,GAAoBhwH,EAAAA,EAAAA,KAAYI,IAAuC,IAAtC,MAAEi1B,EAAK,QAAEy+E,GAAwB1zG,EAEtE,MACMqxB,GADYjC,EAAAA,EAAAA,MAAYE,MAAMpB,KACd+G,GAEtBw9E,EAAe,CACbiB,QAAU,IAAGA,IAAU7/C,GAAgBxiC,EAAO,IAAGA,EAAIuxC,UAAW,GAAG1C,WAAa,OAElFp/D,GAAS,GACR,CAACA,EAAS2xG,EAAgB5+C,IAEvB7B,GAAepyD,EAAAA,EAAAA,KAAa+vH,KAE3BA,EAAWjc,QAAQj7C,WAAWqkD,IAAUhxE,MAAM,MAInD8jF,EAAkBD,IACX,IACN,CAAC7S,EAAS8S,IAEPC,EAAuBpX,GAAsB,CACjDnuG,SAAUlL,EACV+tB,MAAOgkF,EACPl+C,SAAUjB,EACVzyD,aAGFnD,EAAAA,EAAAA,KAAU,KACJ+0G,IAAgBA,EAAYr1G,QAC9ByD,GACF,GACC,CAAC4xG,EAAa5xG,KAEjBnD,EAAAA,EAAAA,KAAU,KACRk8G,GAAsB,uBAAwBuX,EAAsBh3G,EAAa,GAChF,CAACg3G,IAEJ,MAAMC,GAAe3rG,EAAAA,EAAAA,GAAYgtF,GAAeA,EAAYr1G,OAASq1G,OAAch5G,EAAWub,GACxFq8G,EAAmB5e,IAAgBA,EAAYr1G,OAASg0H,EAAe3e,EAE7E,IAAKz9F,GAAiBq8G,IAAqBA,EAAiBj0H,OAC1D,OAGF,MAAM2E,GAAYuG,EAAAA,GAAAA,GAChB,mDACA4M,GAGF,OACEtT,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAW2E,IAAKyT,GAC7Bk3G,GAAoBA,EAAiBhwH,KAAI,CAACiwH,EAAgBznH,IACzDjI,EAAAA,GAAAA,cAAC2vH,GAAU,CACTprH,IAAM,GAAEmrH,EAAe/6F,SAAS+6F,EAAetc,UAC/Cic,WAAYK,EAEZ3+F,KAAKjC,EAAAA,EAAAA,MAAYE,MAAMpB,KAAK8hG,EAAe/6F,OAC3Cy6F,YAAU,EACV5uH,QAAS8uH,EACTxyF,MAAOyyF,IAAyBtnH,MAGhC,IC7CV,IAAexK,EAAAA,EAAAA,KAvCsBlG,IAE/B,IAFgC,OACpCuH,EAAM,YAAE+xG,EAAW,QAAE5xG,GACtB1H,EACC,MAAM,eAAE46G,IAAmB/yG,EAAAA,EAAAA,OACrB,SAAEoD,IAAaC,EAAAA,EAAAA,OAEd8rH,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe3vH,EAAQG,OAASpH,EAAW2K,GAElFqR,GAAcvU,EAAAA,EAAAA,KAAa+vH,IAC/Bld,EAAe,CACbiB,QAAU,IAAGic,EAAWjc,YAE1Bn0G,GAAS,GACR,CAACA,EAASkzG,IAEb,OACEnyG,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACRuF,UAAU,OACV2L,UAAU,SACV/Q,QAASA,EACTkB,UAAU,iBACVoqB,oBAAqBtrB,EACrB2/F,aAAe54F,EAAAA,QAAkCnO,EAAnB02H,EAC9BY,aAAenpH,EAAAA,QAAkCnO,EAAnB22H,EAC9B7mE,mBAAoB3hD,EAAAA,GACpByhD,WAAS,GAERopD,EAAYpxG,KAAK4vH,GAChBrvH,EAAAA,GAAAA,cAAC2vH,GAAU,CACTprH,IAAK8qH,EAAWjc,QAChBic,WAAYA,EACZ7uH,QAASqT,MAGR,ICwCX,IAAepW,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAM,SAAEyrC,GAAaxtC,EAAOwtC,SAASkxE,SAGrC,MAAO,CAAElxE,WAAUyQ,iBAFKj5B,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAEjB29C,sBADP3J,EAAAA,EAAAA,IAA2Bz0C,GACE,GAL1CD,EA5D8BnG,IAS5C,IAT6C,OACjD6G,EAAM,SACNN,EAAQ,OACRgB,EAAM,gBACNw9C,EAAe,QACfr9C,EAAO,SACPksC,EAAQ,gBACRyQ,EAAe,qBACfG,GACDxkD,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GACzF+3H,GAAe/rG,EAAAA,EAAAA,GAAYsnB,GAAU,GACrC0kF,EAAoB1kF,GAAYykF,EAChCvE,GAAoBC,EAAAA,GAAAA,GAAqBltH,EAAQN,IAGrD+5C,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAcwgC,WArBzB,OAuB5Bj9C,EAAAA,EAAAA,KAAU,IAAOgD,GAASkqB,EAAAA,EAAAA,GAAsB/pB,QAAWpH,GAAY,CAACiH,EAAQG,IAEhF,MAIMkB,GAAYuG,EAAAA,GAAAA,GAChB,gDACA4M,GACEu8G,GAAmBr0H,QAAW,UAGlC,OACEwE,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACLpY,UAAWA,EACXgV,YAdoB6sD,KACtBqpD,EAAkB,CAAEzpH,KAAM,iBAAkB,GAezCwR,GAAgBy8G,EACfA,EAAkBpwH,KAAKyqC,GACrBlqC,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ18C,IAAK2lC,EAAQp1C,GACbo1C,QAASA,EACTjuC,KAAM8iD,EAAAA,IACN5E,oBAAqBA,EACrB35C,QAAS1B,EAASw9C,OAAkBzkD,EACpCq1B,SAAUgd,EACV0R,gBAAiBA,EACjBuF,YAAU,EACVpF,qBAAsBA,MAGxB3oC,EACFpT,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,WACNx1B,EACA,KC3FV,IAAgB,KAAO,uBAAuB,YAAc,wBC8G5D,IAAe4F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAQyrC,SAAUyW,GAAgBjkD,EAAOylD,aAAai5D,SAItD,MAAO,CAAEz6D,cAAahG,iBAHEj5B,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAGd29C,sBAFV3J,EAAAA,EAAAA,IAA2Bz0C,GAEK,GAN7CD,EAtEkCnG,IAShD,IATiD,OACrDuH,EAAM,qBACNw+G,EAAoB,oBACpB/4D,EAAmB,QACnBtlD,EAAO,YACP2iD,EAAW,gBACXhG,EAAe,qBACfG,EAAoB,OACpBzrC,GACD/Y,EACC,MAAM,yBAAEu4H,IAA6B1wH,EAAAA,EAAAA,MAG/BmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GACzF+3H,GAAe/rG,EAAAA,EAAAA,GAAY+9B,GAAa,GACxCiuE,EAAoBjuE,GAAeguE,GAEzC9pE,EAAAA,GAAAA,GAAoBvtC,GAEpB,MACEs/B,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAcwgC,WAxBzB,IAwB4Dz9C,YAAawD,KAErGhD,EAAAA,EAAAA,KAAU,IAAOgD,GAASkqB,EAAAA,EAAAA,GAAsB/pB,QAAWpH,GAAY,CAACiH,EAAQG,IAEhF,MAAM2vH,GAA0BtvH,EAAAA,EAAAA,KAAaywH,IACtCjxH,IACLylD,EAAoBwrE,GACpBzS,EAAqB,CACnBriE,WAAY80E,EAAGj7H,KAEjBg7H,IAA0B,GACzB,CAACxS,EAAsBwS,EAA0BhxH,EAAQylD,IAEtDpkD,GAAYuG,EAAAA,GAAAA,GAChBrR,GAAAA,KACA,mCACAie,GACCu8G,GAAmBr0H,QAAUnG,GAAAA,QAGhC,OACE2K,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACLpY,UAAWA,GAEViT,GAAgBy8G,EACfA,EAAkBpwH,KAAKyqC,GACrBlqC,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ18C,IAAK2lC,EAAQp1C,GACbo1C,QAASA,EACT/pC,UAAW9K,GAAAA,YACX4G,KAAM+zH,EAAAA,IACN71E,oBAAqBA,EACrB35C,QAASouH,EACT1hG,SAAUgd,EACV0R,gBAAiBA,EACjBuF,YAAU,EACVpF,qBAAsBA,EACtBzrC,OAAQA,MAGV8C,EACFpT,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,WACNx1B,EACA,KC7BV,IAAe4F,EAAAA,EAAAA,KAnDsBlG,IAU/B,IAVgC,OACpCuH,EAAM,eACNmxH,GAAiB,EAAK,gBACtBr0E,EAAe,uBACf+sD,EAAsB,aACtBuU,EAAY,eACZ8G,EAAc,iBACdkM,EAAgB,QAChBjxH,EAAO,oBACPsrB,GACDhzB,EACC,MAAOg3H,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe3vH,EAAQG,IAC7DkxH,EAA4BC,IAAiCxqH,EAAAA,EAAAA,KAAS,GAEvE9F,GAAOC,EAAAA,EAAAA,KASb,OAPAixE,EAAAA,GAAAA,IAAsBtxE,IAAkB,IAAhBu3B,GAAWv3B,EAE7BZ,IAAWm4B,GACbm5F,EAA8Bt3H,QAAQ6vG,GACxC,GACC,CAAC7pG,EAAQ6pG,IAGV3oG,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACRmR,WAAS,EACT5L,UAAU,QACV2L,UAAWigH,EAAiB,MAAQ,SACpC9vH,UAAU,uCACVlB,QAASA,EACTsrB,oBAAqBA,EACrBq0E,aAAe54F,EAAAA,QAAkCnO,EAAnB02H,EAC9BY,aAAenpH,EAAAA,QAAkCnO,EAAnB22H,EAC9B7mE,mBAAoB3hD,EAAAA,IAEnBk3G,GAAgBl9G,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,OAAOtD,QAAS08G,GAAep9G,EAAK,qBACnEkkH,GACChkH,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,WAAWtD,QAASwjH,GAChClkH,EAAK87C,EAAkB,cAAgB,oBAG3CooE,GAAkBmM,GACjBnwH,EAAAA,GAAAA,cAACsE,GAAAA,EAAQ,CAACR,KAAK,cAActD,QAAS0vH,GACnCpwH,EAAK,mBAGL,I,4BC9DX,MAyCA,IAAerC,EAAAA,EAAAA,KAhCyBlG,IAElC,IAFmC,MACvCypD,EAAK,MAAElkB,EAAK,QAAEt8B,EAAO,oBAAE25C,GACxB5iD,EACC,MAAMsc,GAAcvU,EAAAA,EAAAA,KAAaqH,IAE/BA,EAAEoO,iBAEFvU,IAAUwgD,EAAM,GACf,CAACA,EAAOxgD,IAELL,GAAYuG,EAAAA,GAAAA,GAChB,cACAo2B,GAAS,SAGX,OACE98B,EAAAA,GAAAA,cAAA,OACEG,UAAWA,EACXiiE,YAAavuD,EACbzT,MAAO4gD,EAAMA,OAEbhhD,EAAAA,GAAAA,cAACk7C,GAAAA,EAAW,CACVD,WAAY+F,EAAMlsD,GAClBmH,KAhCkB,GAiClBo0H,qBAAmB,EACnBC,sBAAoB,EACpBl1E,8BAA+BjB,IAE7B,IC4HV,IAAe18C,EAAAA,EAAAA,KAvGoBlG,IAS7B,IAT8B,OAClCuH,EAAM,OACN2kD,EAAM,aACNL,EAAY,QACZnkD,EAAO,cACPo+G,EAAa,oBACb94D,EAAmB,eACnBg5D,EAAc,qBACdD,GACD/lH,EAEC,MAAMghB,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GACzF04H,GAAqCtd,EAAAA,GAAAA,GACzCxvD,EAAOjoD,OAAS,IAAI4nD,KAAiBK,QAAU5rD,EAzD5B,MA0DhB,IAELiuD,EAAAA,GAAAA,GAAoBvtC,GAEpB,MACEs/B,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAcwgC,WAvBzB,IAuB4Dz9C,YAAawD,IAE/F0xH,GAAoBlxH,EAAAA,EAAAA,KAAa0hD,IACrCq8D,EAAcr8D,EAAM0mE,QACpBnK,EAAe,CAAEv8D,MAAOA,EAAMlsD,IAAK,GAClC,CAACyoH,EAAgBF,IAEduR,GAA0BtvH,EAAAA,EAAAA,KAAa0hD,IAC3CuD,EAAoBvD,GACpBs8D,EAAqB,CAAEriE,WAAY+F,EAAMlsD,IAAK,GAC7C,CAACwoH,EAAsB/4D,IAEpBmN,GAAepyD,EAAAA,EAAAA,KAAa0hD,IAC5B,WAAYA,EACdwvE,EAAkBxvE,GAElB4tE,EAAwB5tE,EAC1B,GACC,CAAC4tE,EAAyB4B,IAEvB38G,GAAcvU,EAAAA,EAAAA,KAAY,CAACooH,EAAgB5yH,KAC/CuoH,EAAcqK,GACdnK,EAAe,CAAEv8D,MAAOlsD,GAAK,GAC5B,CAACyoH,EAAgBF,IAEdoT,GAAyBnxH,EAAAA,EAAAA,KAAa0hD,IAC1CuD,EAAoBvD,GACpBs8D,EAAqB,CAAEriE,WAAY+F,EAAMlsD,IAAK,GAC7C,CAACwoH,EAAsB/4D,IAEpBmsE,EAAgBvY,GAAsB,CAC1CnuG,SAAUlL,EACV24G,cAAc,EACd5qF,MAAO0jG,EACP59D,SAAUjB,EACVzyD,aAGF+xE,EAAAA,GAAAA,IAAsBtxE,IAAyB,IAAvBixH,GAAkBjxH,OACd7H,IAAtB84H,IAA0D,IAAvBA,GArG3C,SAAwB1oH,EAAesQ,GACrC,MAAM/jB,EAAY+jB,EAAa1d,QAC/B,IAAKrG,EACH,OAGF,MAAM,eAAEqjH,EAAc,YAAED,GAAgBN,GACtC9iH,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKojH,EAAYp8G,SAAWo8G,EAAY3vG,GACtC,OAEF,MAAMgwG,EAAQJ,EAAe,GAC7B,IAAKA,EAAe9iH,SAASkT,IACvBA,IAAUgwG,IAAUC,GAAe1jH,EAAWojH,EAAYK,IAAQ,GAAQ,CAC9E,MACMlyD,EAAuB,UADZ99C,EAAQ4vG,EAAeA,EAAer8G,OAAS,GAAK,QAAU,OAxBxD,GAyBgByM,EAA6B,GAEpE2mC,EAAAA,GAAAA,GAAwBp6C,EAAWuxD,EACrC,CACF,CA+EI6qE,CAAeF,EAAen4G,EAAa,GAC1C,CAACm4G,IAEJ,MAAMvwH,GAAYuG,EAAAA,GAAAA,GAChB,gDACA4M,GAGF,OACEtT,EAAAA,GAAAA,cAAA,OACE8E,IAAKyT,EACLpY,UAAWA,GAEViT,GAAgBm9G,EACfA,EAAW9wH,KAAI,CAACuhD,EAAO/4C,IACrB,WAAY+4C,EACVhhD,EAAAA,GAAAA,cAAC4oH,GAAW,CACVrkH,IAAKy8C,EAAMlsD,GACXksD,MAAOA,EACPlkB,MAAO4zF,IAAkBzoH,EACzBzH,QAASqT,IAGX7T,EAAAA,GAAAA,cAAC6wH,GAAiB,CAChBtsH,IAAKy8C,EAAMlsD,GACXksD,MAAOA,EACPlkB,MAAO4zF,IAAkBzoH,EACzBzH,QAASiwH,EACTt2E,oBAAqBA,MAIzB/mC,EACFpT,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,WACNx1B,EACA,ICzGV,IAAe4F,EAAAA,EAAAA,KAxCkBlG,IAQ3B,IACA4f,GAT4B,MAChC/W,EAAK,YACL4nC,EAAW,UACXqI,EAAS,SACTygF,EAAQ,MACRh0F,EAAK,qBACLxpB,EAAuB,GAAE,QACzB9S,GACDjJ,EAGC,MAAMw5H,GAAmBp3H,EAAAA,EAAAA,GAAS02C,EAAa,eAAcA,EAAUxoC,WAAQhQ,GAW/E,OAVAi5H,EAAWA,GAAYC,EAEnBD,EACF35G,EACEnX,EAAAA,GAAAA,cAAA,OAAKjM,IAAK+8H,EAAU3wH,UAAWmT,EAAsBsE,IAAI,GAAGo5G,SAAS,QAAQp9H,WAAW,IAEjFwM,IACT+W,GAAUwrC,EAAAA,GAAAA,IAAgBviD,EAAO,IAIjCJ,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP6P,MAAOA,EACP38B,UAAU,iCACViiE,YAAa0qD,GAAAA,EACbtsH,QAASA,GAETR,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SACM,iBAAZgX,GAAuB1W,EAAAA,GAAAA,GAAW0W,GAAWA,GAEvDnX,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZC,GAAUJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASC,GAClC4nC,GAAgBhoC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe6nC,IAExC,ICWf,IAAevqC,EAAAA,EAAAA,KAjDmBlG,IAE5B,IACAI,EACA04C,EACA4gF,GAL6B,MACjCn0F,EAAK,aAAEo0F,EAAY,aAAEC,EAAY,QAAE3wH,GACpCjJ,EAKK,UAAW45H,IACbx5H,EAAQw5H,EAAax5H,OAGnB,cAAew5H,IACjB9gF,EAAY8gF,EAAa9gF,WAEvB,iBAAkB8gF,GAAgBD,IACpCD,EAAeE,EAAaF,cAG9B,MAAMF,GAAmBp3H,EAAAA,EAAAA,GAASs3H,EAAgB,eAAcA,EAAappH,WAAQhQ,GAC/Ei+D,GAAen8D,EAAAA,EAAAA,GAAShC,GAAU,QAAOA,EAAM7C,aAC/Cwe,GAAuBo1B,EAAAA,GAAAA,GAAmBotB,GAE1CjiD,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQ2wH,EAAa,GACpB,CAACA,EAAc3wH,IAElB,GAAI0wH,EACF,OACElxH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCAAkCK,QAASqT,GACxD7T,EAAAA,GAAAA,cAAA,OAAKjM,IAAM4D,GAAO04C,WAAW71C,SAAYu2H,EAAkBn5G,IAAI,KAC/D5X,EAAAA,GAAAA,cAAA,OAAKjM,IAAK+hE,EAAc31D,WAAWuG,EAAAA,GAAAA,GAAe,aAAc4M,GAAuBsE,IAAI,MAKjG,MAAM,MAAExX,EAAK,YAAE4nC,GAAgBmpF,EAE/B,OACEnxH,EAAAA,GAAAA,cAACoxH,GAAU,CACTt0F,MAAOA,EACPg0F,SAAUh7D,GAAiBzlB,GAAW71C,SAAWu2H,EACjDz9G,qBAAsBA,EACtBlT,MAAOA,EACP4nC,YAAaA,EACbxnC,QAASqT,GACT,IClCN,IAAepW,EAAAA,EAAAA,KApBqBlG,IAAsC,IAArC,MAAEulC,EAAK,aAAEq0F,EAAY,QAAE3wH,GAASjJ,EACnE,MAAM,MACJ6I,EAAK,IAAEyH,EAAG,YAAEmgC,EAAW,aAAEipF,GACvBE,EAEEt9G,GAAcvU,EAAAA,EAAAA,KAAY,KAC9BkB,EAAQ2wH,EAAa,GACpB,CAACA,EAAc3wH,IAElB,OACER,EAAAA,GAAAA,cAACoxH,GAAU,CACTt0F,MAAOA,EACPuT,UAAW4gF,EACX7wH,MAAOA,GAASyH,EAChBmgC,YAAaA,EACbxnC,QAASqT,GACT,ICYN,IAAepW,EAAAA,EAAAA,KAxBiBlG,IAE1B,IAF2B,aAC/B45H,EAAY,gBAAEv1E,EAAe,YAAEuxE,EAAW,oBAAEhzE,EAAmB,QAAE35C,GAClEjJ,EACC,MAAM,IAAEk1G,GAAQ0kB,EAEVt9G,GAAcvU,EAAAA,EAAAA,KAAY,CAAC+xH,EAAgBpmE,EAAoBijD,KACnE1tG,EAAQ2wH,EAAclmE,EAAUijD,EAAe,GAC9C,CAACijB,EAAc3wH,IAElB,GAAKisG,EAIL,OACEzsG,EAAAA,GAAAA,cAACwtH,GAAS,CACR/gB,IAAKA,EACLtyD,oBAAqBA,EACrBh6C,UAAU,sBACVK,QAAS2sH,EAAct5G,OAAchc,EACrC+jD,gBAAiBA,GACjB,ICWN,IAAen+C,EAAAA,EAAAA,KA9BqBlG,IAM9B,IAN+B,aACnC45H,EAAY,gBACZv1E,EAAe,oBACfzB,EAAmB,QACnB35C,EAAO,qBACPu7C,GACDxkD,EACC,MAAM,QAAE2yC,GAAYinF,EAEpB,GAAKjnF,EAIL,OACElqC,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ/W,QAASA,EACTjuC,KAAMq1H,EAAAA,IACNn3E,oBAAqBA,EACrB/5C,MAAO8pC,EAAQ8W,MACf7gD,UAAU,sBACVK,QAASA,EACT0sB,SAAUikG,EACVv1E,gBAAiBA,EACjBuF,YAAU,EACVowE,eAAa,EACbx1E,qBAAsBA,GACtB,ICXA6Y,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAK,GA4MjD,IAAep3D,EAAAA,EAAAA,KAzLwBlG,IAajC,IAbkC,OACtCuH,EAAM,MACN61B,EAAK,UACL68F,EAAS,iBACTC,EAAgB,SAChBC,EAAQ,cACRC,EAAa,gBACb/1E,EAAe,YACfuxE,EAAW,SACX/iG,EAAQ,QACRnrB,EAAO,eACP2yH,EAAc,qBACd71E,GACDxkD,EACC,MAAM,SACJgnC,EAAQ,SACRszF,EAAQ,qBACRC,IACE1yH,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OACtC,aAAE0Y,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB1U,OAAQjH,OAAWA,GAAW,GACzFk6H,GAAoBriG,EAAAA,GAAAA,GAAiB8hG,EAAWp+G,IAEpDykC,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7/B,EACT+0G,WAhD6B,IAiD7BhyH,YAAawD,IAGTmwD,GAAiB3vD,EAAAA,EAAAA,KAAYI,IAAqD,IAApD,UAAEic,GAA6Cjc,EAC7Eic,IAAc4zC,EAAAA,GAAAA,WAChBqF,GAAaxqC,EACf,GACC,CAACA,IAEEsmG,EAAgBvY,GAAsB,CAC1CnuG,SAAUlL,EACVu5G,6BAA8B0Z,EAC9BzZ,kBAAmByZ,EACnBllG,MAAO4kG,EACP9+D,SAAUi/D,EACV3yH,aAGFnD,EAAAA,EAAAA,KAAU,KACRk8G,GAAsB,uBAAwB0Y,EAAen4G,EAAa,GACzE,CAACm4G,IAEJ,MAAMsB,GAAe1yH,EAAAA,EAAAA,KAAY,KAC/Bi/B,EAAS,CAAEzpC,GAAI6/B,IACfk9F,EAAS,CAAEl9F,MAAOA,EAAQs9F,MAAOP,EAAU1gG,YAAa,GACvD,CAAC2D,EAAO4J,EAAUszF,EAAUH,IAEzBQ,GAAoB5yH,EAAAA,EAAAA,KAAY,KACpC,MAAMu+B,GAAQkC,EAAAA,GAAAA,MAEd+xF,EAAqB,CACnBn9F,MAAOA,EACP9sB,IAAK8pH,EAAe9pH,IACpBq4B,WAAYyxF,EAAepsH,KAC3Bs4B,SACA,GACD,CAAClJ,EAAOg9F,IAELQ,GAAuBtuG,EAAAA,EAAAA,GAC3B4tG,GAAkBj2H,OACdi2H,OACA55H,EACJub,GAEIg/G,EAA2BX,GAAkBj2H,OAASi2H,EAAmBU,EAE/E,IAAK/+G,IAAkBg/G,GAA0B52H,SAAUk2H,EACzD,OAGF,MAAMvxH,GAAYuG,EAAAA,GAAAA,GAChB,oCACAV,EAAAA,GAAe,eAAiB,gBAChC+rH,GAAqB,UACrBz+G,GAqFF,OACEtT,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACb9nB,IAAKyT,EACLpY,UAAWA,EACX0sB,MAAOulG,EACPl4D,aAAa,uBACbpB,YAAU,EACVxrC,WAAY2hC,EACZojE,cAAe,KAEdX,GA1FD1xH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACzd,QAAM,EAACrP,UAAU,wBAAwBK,QAASwxH,GAC1DhyH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASuxH,EAAUnsH,OA0FpCosH,GAnFD3xH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACzd,QAAM,EAACrP,UAAU,wBAAwBK,QAAS0xH,GAC1DlyH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASwxH,EAAepsH,OAmFzCzM,QAAQs5H,GAA0B52H,SA7E9B42H,EAA0B3yH,KAAI,CAAC6yH,EAAiBrqH,KACrD,OAAQqqH,EAAgB1wH,MACtB,IAAK,MACH,OACE5B,EAAAA,GAAAA,cAACuyH,GAAS,CACRhuH,IAAK+tH,EAAgBx9H,GACrBq8H,aAAcmB,EACdn4E,oBAAqBA,EACrB35C,QAASoxH,EACTh2E,gBAAiBA,EACjBuxE,YAAaA,IAInB,IAAK,QACH,OACEntH,EAAAA,GAAAA,cAACwyH,GAAW,CACVjuH,IAAK+tH,EAAgBx9H,GACrBo8H,aAAca,EACdZ,aAAcmB,EACd9xH,QAASoxH,IAIf,IAAK,UACH,OACE5xH,EAAAA,GAAAA,cAACyyH,GAAa,CACZluH,IAAK+tH,EAAgBx9H,GACrBq8H,aAAcmB,EACdn4E,oBAAqBA,EACrB35C,QAASoxH,EACTh2E,gBAAiBA,EACjBG,qBAAsBA,IAI5B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACE/7C,EAAAA,GAAAA,cAACwyH,GAAW,CACVjuH,IAAK+tH,EAAgBx9H,GACrBgoC,MAAO4zF,IAAkBzoH,EACzBkpH,aAAcmB,EACd9xH,QAASoxH,IAGf,IAAK,UACL,IAAK,QACL,IAAK,QACH,OACE5xH,EAAAA,GAAAA,cAAC0yH,GAAa,CACZnuH,IAAK+tH,EAAgBx9H,GACrBgoC,MAAO4zF,IAAkBzoH,EACzBkpH,aAAcmB,EACd9xH,QAASoxH,IAIf,QACE,OAAiB,IAkBN,ICrFrB,IAAen0H,EAAAA,EAAAA,KApHkBlG,IAO3B,IAP4B,OAChCuH,EAAM,OACNV,EAAM,iBACNu0H,EAAgB,cAChBC,EAAa,qBACb72E,EAAoB,QACpB98C,GACD1H,EACC,MAAM,kBAAEs7H,EAAiB,iBAAE5iG,IAAqB7wB,EAAAA,EAAAA,MAG1C2vB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9B3D,GAAY6E,EAAAA,EAAAA,MAAYnB,MAAMC,KAE9B9tB,GAAOC,EAAAA,EAAAA,KAEPwY,GAAe7d,EAAAA,EAAAA,IAAuB,OAErC6zH,EAAkBC,EAAkBsE,IAAmBrE,EAAAA,GAAAA,GAAe3vH,EAAQG,OAASpH,IAE9FiE,EAAAA,EAAAA,KAAU,KACJgD,GACFg0H,GACF,GACC,CAACh0H,EAAQg0H,IAEZ,MAAMpZ,GAAmBp6G,EAAAA,EAAAA,KAAaxK,IACpCmK,IACA4zH,EAAkB,CAAEz0H,OAAQA,EAAS20H,SAAUj+H,GAAK,GACnD,CAACsJ,EAAQa,EAAS4zH,IAEfG,EAAsB7a,GAAsB,CAChDnuG,SAAUlL,EACV+tB,MAAO+lG,EACPjgE,SAAU+mD,EACVnB,mBAAmB,EACnBH,kCAAkC,EAClCn5G,YAaF,OAVAnD,EAAAA,EAAAA,KAAU,KACRk8G,GAAsB,uBAAwBgb,EAAqBz6G,EAAa,GAC/E,CAACy6G,KAEJl3H,EAAAA,EAAAA,KAAU,KACJ82H,IAAkBA,EAAcp3H,QAClCyD,GACF,GACC,CAAC2zH,EAAe3zH,IAGjBe,EAAAA,GAAAA,cAAC+P,GAAAA,EAAI,CACHjR,OAAQA,EACRuF,UAAU,OACV2L,UAAU,SACV/Q,QAASA,EACTkB,UAAU,aACVoqB,oBAAqBtrB,EACrB2/F,aAAe54F,EAAAA,QAAkCnO,EAAnB02H,EAC9BY,aAAenpH,EAAAA,QAAkCnO,EAAnB22H,EAC9B7mE,mBAAoB3hD,EAAAA,GACpByhD,WAAS,GAETznD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBAAgB0G,IAAI,QAAQ/G,EAAK,uBAC/CivB,GAAa9E,GAAa2oG,GAAenzH,KAAI,CAAAC,EAAoBuI,KAAU,IAA7B,GAAEnT,EAAE,UAAE44C,GAAWhuC,EAC9D,MAAMwiB,GAAO5jB,EAAAA,EAAAA,IAASxJ,GAAMi6B,EAAUj6B,QAAM+C,EACtCqG,EAAQgkB,OAAuBrqB,EAAhBoyB,EAAUn1B,GACzB+zF,EAAa3mE,GAAQhkB,EAiBrB+0H,GAAkBvsH,EAAAA,GAAAA,GAAeisH,IAAqB79H,GAAM,YAElE,OACEkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,yDAEVK,QAtBgBqT,MACb65B,GAAaqO,EAChB29D,EAAiB5kH,GAEjBm7B,EAAiB,CACfv6B,QAASoK,EAAK,+BACdszB,WAAYtzB,EAAK,QACjBsX,OAAQ,CACNA,OAAQ,mBACR8lD,QAAS,CAAC,IAGhB,EAWEpgC,MAAOk2F,IAAwB/qH,EAC/B+3E,cAAejkC,GAAwBrO,GAClC1tC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,8CAElBH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,QACLiC,KAAMA,EACNgkB,KAAMA,EACN/hB,UAAW8yH,IAEbjzH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACZ0oF,GAAc7oF,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAACC,KAAM64B,EAAYqqC,QAAM,IACtDlzH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY+hB,EACxBpiB,EAAK,4BACLA,EAAK,cAAe5B,GAAMwlF,aAAc,OAGrC,IAGV,I,gBClGX,MA+IA,IAAejmF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1B+0H,EAAej1H,IAAQ+kB,EAAAA,EAAAA,IAAmBtlB,EAAQO,EAAKpJ,IAC7D,IAAKoJ,IAASi1H,EACZ,MAAO,CAAC,EAGV,MAAM,MAAEtxF,EAAK,QAAEitB,IAAY2lD,EAAAA,EAAAA,IAAwB92G,IAAW,CAAC,GACzD,WAAE0/E,EAAU,SAAE/5D,GAAawrC,GAAW,CAAC,EAE7C,MAAO,CACL5wD,OACAi1H,eACAtxF,QACAw7C,aACA/5D,WACD,GAjBe5lB,EA/I2BnG,IAUzC,IAV0C,OAC9C6G,EAAM,SACNN,EAAQ,SACRkM,EAAQ,KACR9L,EAAI,aACJi1H,EAAY,MACZtxF,EAAK,WACLw7C,EAAU,SACV/5D,EAAQ,QACRrkB,GACD1H,EACC,MAAM,wBACJq9G,EAAuB,aACvBlzF,IACEtiB,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCoF,GAAOC,EAAAA,EAAAA,MACbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACR,GAAKkO,EAML,OAFA2a,EAAAA,EAAAA,MAEOG,EAAAA,EAAqB,GAC3B,CAAC9a,IAEJ,MAAMopH,GAAgC9zH,EAAAA,EAAAA,KAAY,KAChDs1G,GAAyB,GACxB,CAACA,KAEGhqF,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBsoG,EAA+B9vG,GAE1E+vG,GAAkBh6H,EAAAA,EAAAA,KAAQ,IACzBwoC,GAAUjX,GAAapvB,QAAW23H,EAIhCvoG,EAAYnrB,KAAK3K,IACtB,MAAMY,EAAUy9H,EAAar+H,GAC7B,IAAKY,EACH,OAGF,MAAM49H,EAAa59H,EAAQ8gB,UAAWhY,EAAAA,EAAAA,KAAWswB,EAAAA,EAAAA,MAAap5B,EAAQ8gB,eAAY3e,EAElF,IAAI07H,EACJ,GAAIr1H,IAAQssD,EAAAA,EAAAA,IAActsD,GACxBq1H,EAAar1H,OACR,GAAIxI,EAAQ89H,YAAa,CAC9B,MAAM,cAAEC,EAAa,WAAE3qG,GAAepzB,EAAQ89H,YAC9CD,EAAaE,GAAiB3qG,GAAa3qB,EAAAA,EAAAA,KAAW2wB,EAAAA,EAAAA,MAAahG,QAAcjxB,CACnF,MACE07H,EAAa79H,EAAQ8gB,UAAWrY,EAAAA,EAAAA,KAAW2wB,EAAAA,EAAAA,MAAap5B,EAAQ8gB,eAAY3e,EAG9E,MAAO,CACLnC,UACA49H,aACAC,aACA/yH,QAASA,IAAMkhB,EAAa,CAAEtjB,SAAQN,WAAUsL,UAAWtU,IAC5D,IACAy5B,OAAOz1B,SA3BD+rD,GAAAA,GA4BR,CAAChjB,EAAOjX,EAAauoG,EAAcj1H,EAAMwjB,EAActjB,EAAQN,IAE5DgX,GAAgBsX,EAAAA,GAAAA,GAA0B7T,GAAc,GAAOtQ,IACnE,MAAMyrH,EAAcL,KAA6B,IAAXprH,EAAe,EAAIA,GACrDyrH,GACFA,EAAYlzH,SACd,GACC,oBAAoB,GAoCjBmzH,EAAU/oG,IAAc,KAAOtH,IAAW,GAEhD,OACEtjB,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACb9nB,IAAKyT,EACLpY,UAAU,4BACV0sB,MAAOwmG,EACPO,iBAAkB,EAClBtmG,WAAYzC,EACZ6B,UAAW5X,GAEV6+G,GACC3zH,EAAAA,GAAAA,cAAA,KAAGuE,IAAI,cAAcpE,UAAU,cAAc0G,IAAI,QAC7Cg7B,EAEkB,IAAfw7C,GAAqBg2C,EAAgB73H,OAEvB,IAAf6hF,EACF,kBAEC,GAAGg2C,EAAgB73H,SAAW6hF,GAAcg2C,EAAgB73H,yBAJ7DsE,EAAK,yBAFLA,EAAK,gCAUVuzH,EAAgB5zH,KA1DMC,IAOrB,IAPsB,QAC1BhK,EAAO,WAAE49H,EAAU,WAAEC,EAAU,QAAE/yH,GAMlCd,EACC,MAAM6F,GAAO4wD,EAAAA,EAAAA,GAAqBr2D,EAAMpK,OAASmC,EAAWgqC,GAE5D,OACE7hC,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAK7O,EAAQZ,GACb++H,eAAgBn+H,EAAQ0sB,KACxBjiB,UAAU,gDACVK,QAASA,GAETR,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACL/jB,KAAMq1H,EACNrxG,KAAMoxG,IAERtzH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BACbH,EAAAA,GAAAA,cAAC+vD,GAAAA,EAAa,CAACC,KAAOsjE,GAAcC,EAActjE,iBAAe,IACjEjwD,EAAAA,GAAAA,cAAC8zH,GAAAA,EAAe,CAACp+H,QAASA,KAE5BsK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WAAW0G,IAAI,QAC3BtB,IAGI,IA6BI,KC/DrB,IAAe9H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMuiB,KAAmC,IAAjC,aAAEq+B,GAAcr+B,EACvB,MAAO,CACL/jB,KAAKg9C,EAAAA,EAAAA,IAAiBx7C,EAAQ4gD,GAC9B6D,YAAY6oE,EAAAA,EAAAA,IAAyBttH,GACrCo+C,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GAClD,GANeD,EA1FgCnG,IAG9C,IAH+C,aACnDgnD,EAAY,oBAAEpE,EAAmB,IAAEh+C,EAAG,WAAEimD,EAAU,YAClD1wB,EAAW,qBAAEqqB,GACdxkD,EACC,MAAM,aAAE0lD,EAAY,iBAAED,EAAgB,eAAEuyC,IAAmBnwF,EAAAA,EAAAA,MAGrDg7C,GAAkB1/C,EAAAA,EAAAA,IAA0B,MAE5CoF,GAAOC,EAAAA,EAAAA,KACPuuG,EAAUnyG,IAAQA,EAAIwjD,YAAc7mD,QAAQqD,EAAIujD,eAChDq0E,EAAoBj7H,QAAQqD,GAAKgvC,UAEjC0kF,GAAoBx2H,EAAAA,EAAAA,KAAQ,KAAM,IAAA26H,EACtC,IAAK73H,EACH,MAAO,GAGT,MAAM83H,GAAuE,QAAnDD,EAAC73H,EAAIgvC,UAAU5c,QAAO7uB,IAAA,IAAC,UAAE+rH,GAAW/rH,EAAA,OAAK+rH,CAAS,WAAC,IAAAuI,EAAAA,EAAI,IAC9ExoF,MAAM,EAtBuB,GAuB1B0oF,GAAmB/3H,EAAIg4H,QAAU,IAAI10H,KAAII,IAAA,IAAC,GAAE/K,GAAI+K,EAAA,OAAK/K,CAAE,IACvDs/H,EAAgBj4H,EAAIgvC,SAAWhvC,EAAIgvC,SAAS5c,QAAO3wB,IAAA,IAAC,GAAE9I,GAAI8I,EAAA,OAAMs2H,EAAgBn/H,SAASD,EAAG,IAAI,GAEtG,MAAO,IAAIm/H,KAAuB93H,EAAIg4H,QAAU,MAAQC,GAAe5oF,MAAM,EAzBrD,EAyB4E,GACnG,CAACrvC,KAEJL,EAAAA,EAAAA,KAAU,MAEHi4H,GAAqBlE,EAAkBr0H,OA9BpB,GA8BoDW,GAC1E8gD,EAAa,CACX0B,eAAgB,CACd9X,UAAW1qC,EAAI0qC,YAGrB,GACC,CAACktF,EAAmBlE,EAAkBr0H,OAAQyhD,EAAc9gD,EAAKoiD,IAEpE,MAAMD,GAAiBh/C,EAAAA,EAAAA,KAAY,KACjC09C,EAAiB,CAAEuB,gBAAe,GACjC,CAACvB,EAAkBuB,IAEhB81E,GAAqB/0H,EAAAA,EAAAA,KAAa4qC,IACtCqlD,EAAe,CAAE5wC,eAAgBzU,EAAQyU,gBAAiB,GACzD,CAAC4wC,IAEJ,IAAKpzF,EACH,OAGF,MAAMm4H,EAAoBzE,EAAkBr0H,OAAS,EAErD,OACEwE,EAAAA,GAAAA,cAAA,OAAKuE,IAAKpI,EAAIrH,GAAIqL,UAAU,cAAc0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAClEmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,QAAQ0G,IAAI,QAAQ1K,EAAIiE,OACtCJ,EAAAA,GAAAA,cAAA,KAAGG,UAAU,QAAQ0G,IAAI,QAAQ/G,EAAK,WAAY3D,EAAIotC,MAAO,OAE/DvpC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAWmuG,EAAU,gBAAaz2G,EAClCyI,MAAM,UACNrE,KAAK,OACLqkD,MAAI,EACJC,OAAK,EACL//C,QAAS89C,GAERx+C,EAAKwuG,EAAU,qBAAuB,sBAG3CtuG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,UAAQ8E,IAAKs1C,EAAiBj6C,UAAU,mBACtCm0H,GAAqBt0H,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,MAC9B48G,GAAqBzE,EAAkBpwH,KAAKyqC,GAC3ClqC,EAAAA,GAAAA,cAACihD,GAAAA,EAAa,CACZ/W,QAASA,EACTjuC,KAAMs4H,EAAAA,IACNp6E,oBAAqBA,EACrB7pC,QAAS8xC,GAAc1wB,EACvBxE,SAAUgd,EACV1pC,QAAS6zH,EACTxtE,eAAa,EACb9K,qBAAsBA,EACtB3B,gBAAiBA,OAInB,KCvFJwa,IAAetuD,EAAAA,GAAAA,KAAUuuD,GAAOA,KAAM,KAAO,GA2EnD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMylB,GAAgBoxG,EAAAA,EAAAA,IAA2B72H,IAC3C,MAAEkkC,EAAK,UAAE4yF,GAAcrxG,GAAiB,CAAC,GACzC,SAAEsxG,GAAa/2H,EAAOwtC,SAE5B,MAAO,CACLtJ,QACAyhB,YAAaoxE,EAASzwE,OACtBwwE,YACA/iG,YAAa54B,SAAQud,EAAAA,EAAAA,IAAe1Y,GAAQg3H,2BAC7C,GAXej3H,EAzE6BnG,IAO3C,IAP4C,SAChDyS,EAAQ,MACR63B,EAAK,YACLyhB,EAAW,UACXmxE,EAAS,YACT/iG,EAAW,QACXzyB,GACD1H,EACC,MAAM,qBAAEq9H,IAAyBx1H,EAAAA,EAAAA,MAG3BmZ,GAAe7d,EAAAA,EAAAA,IAAuB,MAEtCoF,GAAOC,EAAAA,EAAAA,MAGX83C,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAcwgC,WArBzB,MAsE5B,OA7CAj9C,EAAAA,EAAAA,KAAU,KACR84D,IAAa,KACXggE,GAAsB,GACtB,KAGJ16G,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAsCRe,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,EAAcpY,UAAU,8BAA8B0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAnC5F,WACE,QAAcA,IAAVgqC,EAIJ,OAAKA,GAASyhB,EACLA,EAAY7jD,KAAK3K,GACtBkL,EAAAA,GAAAA,cAAC60H,GAAgB,CACftwH,IAAKzP,EACLypD,aAAczpD,EACdqlD,oBAAqBA,EACrBzoB,YAAaA,MAKf+iG,EACGA,EAAUj5H,OAIRi5H,EAAUh1H,KAAK3K,GACpBkL,EAAAA,GAAAA,cAAC60H,GAAgB,CACftwH,IAAKzP,EACLypD,aAAczpD,EACdqlD,oBAAqBA,EACrBzoB,YAAaA,MARR1xB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAc0G,IAAI,QAAO,kBAa1C7G,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,KACjB,CAIKw8B,GACG,KC+CV,IAAepsD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMylB,GAAgB0xG,EAAAA,EAAAA,IAAuBn3H,IACvC,MAAEkkC,EAAK,QAAEitB,GAAY1rC,GAAiB,CAAC,GACvC,OAAEhlB,EAAM,SAAEN,IAAaC,EAAAA,EAAAA,IAAyBJ,IAAW,CAAC,EAC5DO,EAAOE,GAASD,EAAAA,EAAAA,IAAWR,EAAQS,QAAUvG,EAC7Ck9H,EAAgB72H,GAAO82H,EAAAA,EAAAA,IAAoBr3H,EAAQO,QAAQrG,EAC3D+jD,EAAkB9iD,QAAQsF,KAAWukB,EAAAA,EAAAA,IAAqBhlB,EAAQS,GAClEyvG,EAAazvG,GAAUN,GAAWgwG,EAAAA,EAAAA,IAAiBnwG,EAAQS,EAAQN,QAAYjG,EAC/Ek2G,EAAaj1G,QAAQ+0G,GAAYG,iBAGvC,MAAO,CACLnsE,QACAitB,UACA5wD,OACA62H,gBACAn5E,kBACAq5E,cARoBn8H,QAAQoF,IAASpF,QAAQgF,KAAaiuB,EAAAA,EAAAA,IAAiB7tB,EAAMJ,EAAUiwG,GAS3FpF,uBAAwB7vG,QAAQsF,KAAWwqG,EAAAA,EAAAA,IAA6BjrG,EAAQS,GACjF,GApBeV,EAvGyBnG,IAUvC,IAVwC,SAC5CyS,EAAQ,MACR63B,EAAK,QACLitB,EAAO,KACP5wD,EAAI,cACJ62H,EAAa,uBACbpsB,EAAsB,gBACtB/sD,EAAe,cACfq5E,EAAa,QACbh2H,GACD1H,EACC,MAAM,eACJ29H,EAAc,YACdzjG,EAAW,kBACX0jG,IACE/1H,EAAAA,EAAAA,MAGEmZ,GAAe7d,EAAAA,EAAAA,IAAuB,OAErC+vG,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYhC,IAG9C9wD,QAASsC,IACPhC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7/B,EAAc+0G,WA1BzB,MA4BtBH,EAAc8H,IAAiBrnB,EAAAA,EAAAA,IAA4B1vG,EAAM62H,GAAe5H,YAEhFiI,GAAiB91H,EAAAA,EAAAA,KAAY,CAACmtG,EAAexhD,EAAoBijD,KACjEif,IACEjf,EACFzD,GAAiBuB,IACfv6E,EAAY,CAAEg7E,MAAKT,cAAa/gD,YAAW,IAG7Cx5B,EAAY,CAAEg7E,MAAKxhD,cAInBjlD,EAAAA,IACFmvH,EAAkB,CAAEtzF,WAAOhqC,GAC7B,GACC,CAACs1H,EAAa1iB,EAAiBh5E,EAAa0jG,IAEzCE,GAAuB/1H,EAAAA,EAAAA,KAAY,KACvC41H,GAAgB,GACf,CAACA,IAEEp1H,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IA+BV,MAAMq2H,EAAax8H,aAAkBjB,IAAVgqC,GAAuBitB,GAAWA,EAAQtzD,QAErE,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YAAY0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACnDmI,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACb9nB,IAAKyT,EACLpY,WAAWuG,EAAAA,GAAAA,GAAe,8BAA+B4uH,GAAc,QACvEzoG,MAAOiiC,EACPoL,aAAa,aACb05D,iBA/FkB,GAgGlB96D,YAAU,EACVxrC,WAAY+nG,GAvClB,WACE,QAAcx9H,IAAVgqC,EAIJ,OAAKitB,EAMAA,EAAQtzD,OAMNszD,EAAQrvD,KAAKgtG,GAClBzsG,EAAAA,GAAAA,cAACwtH,GAAS,CACRjpH,IAAKkoG,EAAI33G,GACT23G,IAAKA,EACLtyD,oBAAqBA,EACrB35C,QAAS2sH,EAAciI,OAAiBv9H,EACxC+jD,gBAAiBA,MAVjB57C,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAc0G,IAAI,QAAQ/G,EAAK,gBAN5CE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,KAmBd,CAeOw8B,IAEF6gD,EACG,KC3HJ6qB,GAAqC,CACzC,CACE,CAAEntH,KAAM,YAAahI,MAAO,mCAC5B,CAAEgI,KAAM,uBAAwBhI,MAAO,6CAA8Co1H,cAAc,IAErG,CACE,CAAEptH,KAAM,eAAgBhI,MAAO,sCAC/B,CAAEgI,KAAM,gBAAiBhI,MAAO,yCAI9Bq1H,GAAmC,CACvC,CACE,CAAErtH,KAAM,UAAWhI,MAAO,sBAC1B,CAAEgI,KAAM,WAAYhI,MAAO,wBAE7B,CACE,CAAEgI,KAAM,UAAWhI,MAAO,sBAC1B,CAAEgI,KAAM,UAAWhI,MAAO,wBAIxBs1H,GAAqC,CACzC,CACE,CAAEttH,KAAM,QAAShI,MAAO,sBAAuBu1H,SAAS,GACxD,CACEvtH,KAAM,WAAYhI,MAAO,8BAA+Bu1H,SAAS,EAAMC,eAAe,IAG1F,CACE,CAAExtH,KAAM,iBAAkBhI,MAAO,6BAA8Bu1H,SAAS,KA2F5E,IAAel4H,EAAAA,EAAAA,KAjF0BlG,IAAwC,IAAvC,QAAEkzD,EAAO,UAAEorE,EAAS,WAAEC,GAAYv+H,EAC1E,MAAMuI,GAAOC,EAAAA,EAAAA,MAsBP,OAAEg2H,GAAYD,EAEpB,OACE91H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BAA6BL,EAAK,sBAEhDi2H,GACC/1H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACZ61H,EAAAA,GAAAA,IAAel2H,EAAuB,IAAjBi2H,EAAOngG,SAAgB,OAAIogG,EAAAA,GAAAA,IAAel2H,EAAuB,IAAjBi2H,EAAOlgG,WAKnF71B,EAAAA,GAAAA,cAAA,SAAOG,UAAU,8BACb01H,EAAYH,GAAmBjrE,EAAUgrE,GAAiBF,IAAkB91H,KAAKw2H,GACjFj2H,EAAAA,GAAAA,cAAA,UACGi2H,EAAIx2H,KAAKy2H,IACR,MAAMC,EAASL,EAAmBI,EAAK9tH,MAEvC,OAAI8tH,EAAKP,QAEL31H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCACV+1H,EAAKN,cAAiB,KAAGQ,EAAAA,GAAAA,IAAcD,MAAWC,EAAAA,GAAAA,IAAcD,IAEnEn2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKo2H,EAAK91H,SAK/D81H,EAAKV,aAELx1H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmCg2H,EAAME,WAAW,KACjEr2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKo2H,EAAK91H,SAMjEJ,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oCACVqvD,EAAAA,GAAAA,IAAqB2mE,EAAMt7H,UAE7B,IAjEe6E,KAAoD,IAAnD,OAAE42H,EAAM,WAAED,GAAoC32H,EAC7E,IAAK42H,EACH,OAGF,MAAMC,EAAmB3hH,OAAO0hH,GAAU,EAE1C,OACEt2H,EAAAA,GAAAA,cAAA,QAAMG,WAAWuG,EAAAA,GAAAA,GAAe,4BAA6B6vH,GAAoB,aAC9EA,EAAoB,KAAG/mE,EAAAA,GAAAA,IAAqBxrD,KAAKiZ,IAAIq5G,MAAc,KAAG9mE,EAAAA,GAAAA,IAAqB8mE,KAC3FD,GACCr2H,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG,IAAI,IACHq2H,EAAW,MAGZ,EAkDMG,CAAwBL,GACzBn2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKo2H,EAAK91H,QAC1D,QAMX,IC1DV,IAAe3C,EAAAA,EAAAA,KAvD+BlG,IAAiB,IAAhB,QAAE7B,GAAS6B,EACxD,MAAMuI,GAAOC,EAAAA,EAAAA,MACP,wBAAE02H,IAA4Br3H,EAAAA,EAAAA,MAE9Bw2D,GAAiBp5D,EAAAA,EAAAA,IAA4B9G,GAC7CogE,GAAen8D,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoB/D,EAAS,UACrDqgE,EAAej9D,SAAQk9D,EAAAA,EAAAA,IAAqBtgE,IAE5Cme,GAAcvU,EAAAA,EAAAA,KAAY,KAC9Bm3H,EAAwB,CAAErtH,UAAW1T,EAAQZ,IAAK,GACjD,CAAC2hI,EAAyB/gI,EAAQZ,KAErC,OACEkL,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,0BACA5N,QAAQg9D,GAAgBF,IAAmB,uCAE7Cp1D,QAASqT,GAET7T,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oCAoBvB,SAAuBL,EAAcpK,EAAqB2E,EAAkB07D,GAC1E,OAAK17D,EAKH2F,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBACdH,EAAAA,GAAAA,cAAA,OAAKjM,IAAKsG,EAASud,IAAI,GAAGzX,WAAWuG,EAAAA,GAAAA,GAAe,uBAAwBqvD,GAAgB,YAC3F/9D,EAAAA,EAAAA,IAAgBtC,IAAYsK,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBACzCg2D,EAAAA,EAAAA,GAAqBr2D,EAAMpK,GAAS,KAPhCygE,EAAAA,EAAAA,GAAqBr2D,EAAMpK,EAUtC,CA/BW4gE,CAAcx2D,EAAMpK,EAASogE,GAAgBF,EAAgBG,IAEhE/1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZL,EAAK,0BAA2BpK,EAAQghI,MAAO,OAIpD12H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZykF,EAAAA,GAAAA,IAAsC,IAAflvF,EAAQ0sB,KAAatiB,EAAKw5B,OAEpDt5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZzK,EAAQqoF,SAAWj+E,EAAK,2BAA4BpK,EAAQqoF,UAAY,cAGzE,ICpCV,IAAI44C,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,mCAEfC,GAAiBhiI,OAAO02B,KAAK6qG,IAE7BU,GAAsB,CAC1BT,YAAa,yBACbU,aAAc,0BACdJ,eAAgB,4BAChBK,cAAe,2BACfC,aAAc,0BACdT,cAAe,4BAEXU,GAAeriI,OAAO02B,KAAKurG,IA8IjC,IAAe95H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMo2H,GAAa8B,EAAAA,EAAAA,IAAiBj6H,EAAQS,GACtCF,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1By5H,GAAOlwB,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAS05H,eAGjD,MAAO,CACLhC,aAAY+B,OAAMptE,QAHW,uBAAfvsD,GAAM0D,KAIrB,GATelE,EAlI0BnG,IAKxC,IALyC,OAC7C6G,EAAM,WACN03H,EAAU,KACV+B,EAAI,QACJptE,GACDlzD,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPwY,GAAe7d,EAAAA,EAAAA,IAAuB,OACrCoP,EAASiuH,IAAcnyH,EAAAA,EAAAA,KAAS,GACjCoyH,GAAet9H,EAAAA,EAAAA,IAAiB,KAEhC,eAAEu9H,EAAc,yBAAEC,IAA6B94H,EAAAA,EAAAA,MAC/CzD,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACRm8H,EAAe,CAAE75H,SAAQqsD,WAAU,GAClC,CAACrsD,EAAQ65H,EAAgBxtE,IAE5B,MAAM0tE,GAAS9+H,EAAAA,EAAAA,KAAQ,IACdoxD,EAAUktE,GAAeL,IAC/B,CAAC7sE,IAEE2tE,GAAc/+H,EAAAA,EAAAA,KAAQ,IACnBoxD,EAAU8sE,GAAsBV,IACtC,CAACpsE,IA4EJ,OAzEA3uD,EAAAA,EAAAA,KAAU,KACHg6H,GAILqC,EAAOnwH,SAASI,IACd,MAAMiwH,EAAQvC,EAAW1tH,GACQ,iBAAViwH,GAGrBH,EAAyB,CACvB9vH,OACAhK,SACAk6H,MAAOD,EAEP7C,aAAuB,mBAATptH,GAElB,GACA,GACD,CAAC+vH,EAAQ/5H,EAAQ03H,EAAYoC,KAEhCp8H,EAAAA,EAAAA,KAAU,KACR,iBA3FJqN,iBAME,OALKwtH,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAqFY4B,GAEDzuH,EAKAgsH,GAAev9G,EAAa1d,UAIjCs9H,EAAOnwH,SAAQ,CAACI,EAAMH,KACpB,MAAMowH,EAAQvC,EAAW1tH,GAGzB,GAFiC,iBAAViwH,GAERL,EAAan9H,QAAQ9F,SAASqT,GAC3C,OAGF,IAAKiwH,EAGH,YAFAL,EAAan9H,QAAQgJ,KAAKuE,GAK5B,MAAM,UAAEowH,GAAcH,EAEtBzB,GAAY6B,OACVlgH,EAAa1d,QAASkJ,SAASkE,GAC/B,CACE7H,MAAON,EAAMs4H,EAAuChwH,OACjDowH,EAAY,CACbx5G,OAASpG,IAAcpP,EAAAA,GAAAA,IAAQ,4BAA6B,CAAE8uH,MAAOE,EAAW5/G,IAAGi/G,SACnFa,aAAc54H,EAAK,kBACjB,CAAC,KACFu4H,IAIPL,EAAan9H,QAAQgJ,KAAKuE,GAE1BmQ,EAAa1d,QAASkJ,SAASkE,GAAOzU,UAAU0b,OAAO,SAAS,IAGlEvT,KAzCEo8H,GAAW,EA0Cd,EA9CD,EA8CI,GACH,CACDI,EAAQC,EAAatuH,EAASgsH,EAAYh2H,EAAM1B,EAAQ85H,EAA0BL,EAAMl8H,IAGrFmO,GAAYgsH,EAKf91H,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,2BAA4BoD,GAAW,UACpE9J,EAAAA,GAAAA,cAAC24H,GAAkB,CAAC7C,WAAYA,EAAYrrE,QAASA,KAEnDutE,EAAan9H,QAAQW,QAAUwE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAEzCrtB,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,GACP4/G,EAAO14H,KAAK44H,GACXr4H,EAAAA,GAAAA,cAAA,OAAKuE,IAAK8zH,EAAOl4H,UAAU,gCAI9BrH,QAASg9H,EAAoC8C,mBAAmBp9H,SAC/DwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,8BAA8BL,EAAK,+BAE/Cg2H,EAAoC8C,kBAAkBn5H,KAAK/J,GAC3DsK,EAAAA,GAAAA,cAAC64H,GAAuB,CAACnjI,QAASA,QApBnCsK,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,KAwBT,KCzJV,IAAe5vB,EAAAA,EAAAA,KA1B+BlG,IAAc,IAAb,KAAE+R,GAAM/R,EACrD,MAAMuI,GAAOC,EAAAA,EAAAA,MACP,mBAAE+4H,IAAuB15H,EAAAA,EAAAA,MAEzBwgE,GAAWvmE,EAAAA,EAAAA,KAAQ,KAAMsvF,EAAAA,EAAAA,IAAgBr/E,EAAKpL,OAAO,CAACoL,EAAKpL,OAC3D2V,GAAcvU,EAAAA,EAAAA,KAAY,KAC9Bw5H,EAAmB,CAAEl5D,SAAUA,EAAWx2D,UAAWE,EAAKF,WAAY,GACrE,CAACE,EAAKF,UAAW0vH,EAAoBl5D,IAExC,OACE5/D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BAA0BK,QAASqT,GAChD7T,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CAAChmB,KAAK,SAASiC,KAAMoL,EAAKpL,OAEjC8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZmJ,EAAKlJ,OAGRJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZL,EAAK,0BAA2BwJ,EAAKotH,MAAO,OAG7C,ICnBV,IAAIC,GACAC,GAWJ,MAAMmC,GAAe,CACnBC,WAAY,kCAERC,GAAS3jI,OAAO02B,KAAK+sG,IAyI3B,IAAet7H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMm4H,GAAOlwB,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAS05H,eAC3CtsE,GAAWn1C,EAAAA,EAAAA,IAAe1Y,GAIhC,MAAO,CAAEm4H,WAHUtqE,EAASsqE,WAAWoD,eAGlBrB,OAAMzuH,UAFToiD,EAASsqE,WAAWqD,iBAEA,GAPtBz7H,EA5H0BnG,IAMxC,IANyC,OAC7C6G,EAAM,SACN4L,EAAQ,WACR8rH,EAAU,KACV+B,EAAI,UACJzuH,GACD7R,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPwY,GAAe7d,EAAAA,EAAAA,IAAuB,OACrCoP,EAASiuH,IAAcnyH,EAAAA,EAAAA,KAAS,GACjCoyH,GAAet9H,EAAAA,EAAAA,IAAiB,KAEhC,sBAAE0+H,EAAqB,yBAAElB,IAA6B94H,EAAAA,EAAAA,MACtDzD,GAAcC,EAAAA,EAAAA,KAiFpB,OA/EAE,EAAAA,EAAAA,KAAU,KACJsN,GACFgwH,EAAsB,CAAEh7H,SAAQgL,aAClC,GACC,CAAChL,EAAQg7H,EAAuBhwH,KAEnCtN,EAAAA,EAAAA,KAAU,KACHkO,IAAYZ,IACf4uH,EAAan9H,QAAU,GACvBk9H,GAAW,GACb,GACC,CAAC/tH,EAAUZ,KAGdtN,EAAAA,EAAAA,KAAU,KACHg6H,GAILmD,GAAOjxH,SAASI,IACd,MAAMiwH,EAAQvC,EAAW1tH,GACQ,iBAAViwH,GAGrBH,EAAyB,CAAE9vH,OAAMhK,SAAQk6H,MAAOD,GAClD,GACA,GACD,CAACj6H,EAAQ03H,EAAYoC,KAExBp8H,EAAAA,EAAAA,KAAU,KACR,iBAvEJqN,iBAME,OALKwtH,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiEY4B,GAEDzuH,EAKAgsH,GAAev9G,EAAa1d,UAIjCo+H,GAAOjxH,SAAQ,CAACI,EAAMH,KACpB,MAAMowH,EAAQvC,EAAW1tH,GAGzB,GAFiC,iBAAViwH,GAERL,EAAan9H,QAAQ9F,SAASqT,GAC3C,OAGF,IAAKiwH,EAGH,YAFAL,EAAan9H,QAAQgJ,KAAKuE,GAK5B,MAAM,UAAEowH,GAAcH,EAEtBzB,GAAY6B,OACVlgH,EAAa1d,QAASkJ,SAASkE,GAC/B,CACE7H,MAAON,EAAMi5H,GAAwC3wH,OAClDowH,EAAY,CACbx5G,OAASpG,IAAcpP,EAAAA,GAAAA,IAAQ,4BAA6B,CAAE8uH,MAAOE,EAAW5/G,IAAGi/G,SACnFa,aAAc54H,EAAK,kBACjB,CAAC,KACFu4H,IAIPL,EAAan9H,QAAQgJ,KAAKuE,EAAK,IAGjCzM,KAvCEo8H,GAAW,EAwCd,EA5CD,EA4CI,GACH,CACDjuH,EAASgsH,EAAYh2H,EAAM1B,EAAQgL,EAAW8uH,EAA0BL,EAAMl8H,IAG3EmO,GAAYgsH,GAAe1sH,EAK9BpJ,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,2BAA4BoD,GAAW,UACpE9J,EAAAA,GAAAA,cAAC24H,GAAkB,CAAC7C,WAAYA,EAAYD,WAAS,KAEnDmC,EAAan9H,QAAQW,QAAUwE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAEzCrtB,EAAAA,GAAAA,cAAA,OAAK8E,IAAKyT,GACP0gH,GAAOx5H,KAAK44H,GACXr4H,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,qBAAsBsxH,EAAan9H,QAAQ9F,SAASsjI,IAAU,eAIhGv/H,QAAQg9H,EAAWuD,iBAClBr5H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAK,+BAEvDg2H,EAAWwD,mBAAoB75H,KAAKw5G,GACnCj5G,EAAAA,GAAAA,cAACu5H,GAAuB,CAACjwH,KAAM2vG,QApBhCj5G,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,KAwBT,KClCV,IAAe5vB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAAuC,IAArC,OAAE85H,GAAkB95H,EAC3B,MAAM,OAAE+5H,EAAM,QAAEC,IAAYrjH,EAAAA,EAAAA,IAAe1Y,GAAQg8H,YAEnD,MAAO,CACLF,OAAQA,IAASD,EAAOvqF,QACxB9iC,OAASutH,IAAUF,EAAOvqF,SAAY,GACvC,GAPevxC,EAhGiCnG,IAQ/C,IARgD,KACpD2G,EAAI,QACJxI,EAAO,OACP8jI,EAAM,WACNI,EAAU,YACVC,EAAW,OACXJ,EAAM,OACNttH,GACD5U,EACC,MAAM,sBACJuiI,EAAqB,SACrBv7F,EAAQ,iBACRw7F,IACE36H,EAAAA,EAAAA,MAEE46H,GAAkBn2G,EAAAA,EAAAA,GAAoB+1G,EAAWK,cAChDtgE,EAAWugE,IAAgBt0H,EAAAA,EAAAA,KAAkB,GAC9Cu0H,EAAkBrhI,QAAQ2gI,IAC1B,OAAExqF,EAAM,KAAE1pC,GAASi0H,EACnB15H,GAAOC,EAAAA,EAAAA,MAEbjE,EAAAA,EAAAA,KAAU,KAEHq+H,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB57H,OAAMkL,UAAW1T,EAAQZ,GAAIm6C,SAAQ9iC,SAAQ0S,MA5B/B,EA4BqDu7G,mBAAmB,GAE1F,GAEC,CAACR,EAAWK,YAAaE,IAE5B,MAAME,GAAsB/6H,EAAAA,EAAAA,KAAY,KACtC46H,GAAa,GACbJ,EAAsB,CACpB57H,OAAMkL,UAAW1T,EAAQZ,GAAIm6C,SAAQ9iC,SAAQ0S,MApC3B,IAqClB,GACD,CAAC3gB,EAAM47H,EAAuBpkI,EAAQZ,GAAIqX,EAAQ8iC,KAErDnzC,EAAAA,EAAAA,KAAU,KACRo+H,GAAa,EAAM,GAClB,CAACT,IAEJ,MAAMa,GAAoBh7H,EAAAA,EAAAA,KAAaxK,IACrCypC,EAAS,CAAEzpC,OACXilI,GAAkB,GACjB,CAACA,EAAkBx7F,IAetB,OACEv+B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZs5H,EACGA,EAAOh6H,KAAK3K,GACZkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,sBAEVK,QAASA,IAAM85H,EAAkBxlI,IAEjCkL,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdknC,WAAW,OACXhnC,OAAQ34B,EACR8pE,eAAa,EACbxQ,kBAAgB,OAIpBpuD,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MACXosG,GAjCP,WACE,MAAMc,EAAkBX,EAAWK,YAAcR,EAAQj+H,OAEzD,OAAOo+H,EAAWK,YArDA,GAqD+BM,EAAkB,GACjEv6H,EAAAA,GAAAA,cAAC8tE,GAAc,CACbvkC,MAAOgxF,EACP5vD,SAAS,QACThR,UAAWA,EACXn5D,QAAS65H,GAGf,CAsBiBG,IAEbx6H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cAAc0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACrDmI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,eAAe0G,IAAI,QAAQtB,GAC3CvF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBAAiB0G,IAAK/G,EAAKmhB,MAAQ,YAASppB,IAQ7C8X,EAPEiqH,EAAWK,aAOEp6C,EAPWg6C,GAQhC,GAAMlqH,EAAQkwE,EAAS,KAAK3+D,UAAY,GARK,OAO9D,IAAuBvR,EAAekwE,CAJ5B,KCvDV,IAAepiF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEg8H,aAAa,OAAEv7H,EAAM,UAAEgL,KACrBiN,EAAAA,EAAAA,IAAe1Y,IACb,aAAE+3D,GAAiB/3D,EAEzB,OAAKS,GAAWgL,EAOT,CACLlL,MAJWC,EAAAA,EAAAA,IAAWR,EAAQS,GAK9B1I,SAJc6gB,EAAAA,EAAAA,IAAkB5Y,EAAQS,EAAQgL,GAKhDssD,gBATO,CAAC,CAUT,GAlBeh4D,EA5C2BnG,IAMzC,IAN0C,QAC9C0H,EAAO,SACP+K,EAAQ,KACR9L,EAAI,QACJxI,EAAO,aACPggE,GACDn+D,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAMb,IALAma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGLvJ,IAAYwI,EACf,OAAO8B,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAGjB,MAAM,QAAE64F,EAAO,QAAEp3D,IAAY2rE,EAAAA,EAAAA,IAAe/kI,GAC5C,IAAKo5D,EAAQA,QACX,OAGF,MAAM4rE,GAAkBC,EAAAA,GAAAA,IAAqB7rE,EAAQA,QAAS,UAE9D,OACE9uD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cAAc0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACrDmI,EAAAA,GAAAA,cAAA,MAAIG,UAAU,gBAAgB0G,IAAI,SAAQpG,EAAAA,GAAAA,GAAWylH,EAAQ5B,SAAU,CAAC,QAAS,QACjFtkH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mCACZrH,QAAQ48D,IAAiBwwD,EAAQC,QAAQ1mH,KAAK+5H,GAC7Cx5H,EAAAA,GAAAA,cAAC46H,GAAiB,CAChBr2H,IAAM,GAAE7O,EAAQZ,MAAM0kI,EAAOvqF,SAC7B/wC,KAAMA,EACNxI,QAASA,EACT8jI,OAAQA,EACRI,WAAYc,EAAgBlB,EAAOvqF,QACnC4qF,YAAa/qE,EAAQ+qE,iBAGvBnkE,GAAgB11D,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAExB,K,gBCnEV,SAAuB,uBAAvB,GAAwD,uBAAxD,GAAyF,uBAAzF,GAAsH,uBAAtH,GAAsJ,uBAAtJ,GAA2L,uBAA3L,GAAyN,uBAAzN,GAA6R,uBAA7R,GAAsW,uBC2BhWwtG,GAAY,EAAIz0H,EAAAA,GAqItB,IAAe3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,iBAAEm9H,IAAqBzkH,EAAAA,EAAAA,IAAe1Y,GAC5C,MAAO,CACLO,KAAM48H,GAAkB18H,QAASD,EAAAA,EAAAA,IAAWR,EAAQm9H,EAAiB18H,aAAUvG,EAC/EijI,mBACA/+E,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GAClD,GAPeD,EAxH2BnG,IAMzC,IAN0C,SAC9CyS,EAAQ,KACR9L,EAAI,iBACJ48H,EAAgB,qBAChB/+E,EAAoB,QACpB98C,GACD1H,EACC,MAAM,YAAEwjI,EAAW,iBAAElmF,IAAqBz1C,EAAAA,EAAAA,OACnCgB,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAAS,KAC5Bo1H,EAAgBC,IAAqBr1H,EAAAA,EAAAA,IAAS,IAC9Cs1H,EAAaC,IAAkBv1H,EAAAA,EAAAA,SAA6B/N,GAC7DiI,GAAOC,EAAAA,EAAAA,KAEPmtE,EAAYp0E,QAAQsH,GACpBu5D,EAAY7gE,QAAQgiI,GAAkBnhE,YAE5Cz/C,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMm5F,GAAoB94F,EAAAA,EAAAA,KAAaqH,IACrCoxF,EAASpxF,EAAEwV,OAAOxM,MAAM,GACvB,IAEGyrH,GAAkB97H,EAAAA,EAAAA,KAAY,KAClC27H,GAAmB7oC,IAAS3mD,EAAAA,GAAAA,IAAc4vF,EAAAA,GAAAA,MAAiB7/H,OAAQ42F,EAAO,IAAG,GAC5E,IAEGkpC,GAAoBh8H,EAAAA,EAAAA,KAAY,KACpCy7H,EAAY,CACV38H,OAAQF,EAAMpJ,GACdsL,QACAm7H,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,eACA,GACD,CAACh9H,EAAM68H,EAAaC,EAAgBE,EAAa96H,IAE9CwuH,GAA0BtvH,EAAAA,EAAAA,KAAa0hD,IACtCA,EAAMxB,QAAWzD,GAAwBiF,EAAMlsD,KAAO2pD,EAAAA,IAKvDuC,EAAMlsD,KAAO2pD,EAAAA,IAKjB08E,EAAen6E,EAAMlsD,IAJnBqmI,OAAetjI,GALfg9C,EAAiB,CAAErH,eAAgB,kBASb,GACvB,CAACuO,EAAsBlH,IAEpB2mF,GAAaniI,EAAAA,EAAAA,KAAQ,KAClB,CACLvE,GAAI,EACJsL,QACAm7H,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,iBAED,CAACF,EAAgBE,EAAa96H,IAEjC,GAAKlC,GAAMmuB,QAIX,OACErsB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgB,kBAC7C2K,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgBA,KAC7C2K,EAAAA,GAAAA,cAAA,QAAMG,UAAW9K,IAAiByK,EAAK,qBACvCE,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACTphB,KAAK,WACLqhB,UAAW7U,OAAO4mH,EAAWN,cAAgB,EAC7CO,eAAa,EACb9/G,UAAW,EACXxb,UAAW9K,IAEX2K,EAAAA,GAAAA,cAACmtB,GAAAA,EAAS,CACRrB,MAAO0vG,EACPr7H,WAAWuG,EAAAA,GAAAA,GAAerR,GDvHoN,wBCwH9OmL,QAAS46H,EACTn/H,KAAM4+H,GACNa,aAAW,KAGf17H,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOvP,EACPwP,SAAUwoF,EACVljE,MAAOp1B,EAAK,yBACZqQ,SAAUwpD,EACVrH,2BAAyB,KAG7BtyD,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgBA,KAC7C2K,EAAAA,GAAAA,cAAC4nD,GAAiB,CAChBnQ,SAAS,0BACT3xC,UAAWkE,EACXkwC,YAAalwC,EACbu6C,oBAAqBqqE,EACrBzuH,UAAW9K,GACXivD,uBAAqB,MAI3BtkD,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9C,EACT/8D,SAAUwpD,EACVn5D,QAAS86H,EACT/3H,UAAWzD,EAAK,SAEf65D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KClIJ06H,GAAY,EAAIz0H,EAAAA,GAoJtB,IAAe3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEg+H,IAAmBtlH,EAAAA,EAAAA,IAAe1Y,GACpCO,EAAOy9H,GAAgBv9H,QAASD,EAAAA,EAAAA,IAAWR,EAAQg+H,EAAev9H,aAAUvG,EAGlF,MAAO,CACLqG,OACA4tB,MAJY6vG,GAAgBnvG,QAAUtuB,GAAMqtB,SAASowG,GAAgBnvG,cAAW30B,EAKhF8jI,iBACA5/E,sBAAsB3J,EAAAA,EAAAA,IAA2Bz0C,GAClD,GAXeD,EArIyBnG,IAOvC,IAPwC,SAC5CyS,EAAQ,KACR9L,EAAI,MACJ4tB,EAAK,eACL6vG,EAAc,qBACd5/E,EAAoB,QACpB98C,GACD1H,EACC,MAAM,UAAEqkI,EAAS,iBAAE/mF,IAAqBz1C,EAAAA,EAAAA,OACjCgB,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAAS,KAC5Bs1H,EAAaC,IAAkBv1H,EAAAA,EAAAA,SAA6B/N,GAC7DiI,GAAOC,EAAAA,EAAAA,KAEP45D,EAAY7gE,QAAQ6iI,GAAgBhiE,WACpCkiE,EAAY/vG,GAAOh3B,KAAOgnI,EAAAA,KAEhC5hH,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,MACJgwB,GAAO1rB,OAAS0rB,GAAOovG,eACzBnjC,EAASjsE,EAAM1rB,OACf+6H,EAAervG,EAAMovG,aACvB,GACC,CAACpvG,IAEJ,MAAMohD,GAAY7zE,EAAAA,EAAAA,KAAQ,IACjB+G,IAAU0rB,GAAO1rB,OAAS86H,IAAgBpvG,GAAOovG,aACvD,CAACA,EAAa96H,EAAO0rB,GAAOovG,YAAapvG,GAAO1rB,QAE7Cg4F,GAAoB94F,EAAAA,EAAAA,KAAaqH,IACrC,MAAMo1H,EAAWp1H,EAAEwV,OAAOxM,MAC1BooF,EAASgkC,EAAS,GACjB,IAEGC,GAAkB18H,EAAAA,EAAAA,KAAY,KAClCs8H,EAAU,CACRx9H,OAAQF,EAAMpJ,GACdsL,QACAosB,QAASV,EAAOh3B,GAChBomI,eACA,GACD,CAACh9H,EAAM09H,EAAWV,EAAa96H,EAAO0rB,IAEnC8iG,GAA0BtvH,EAAAA,EAAAA,KAAa0hD,IACtCA,EAAMxB,QAAWzD,GAAwBiF,EAAMlsD,KAAO2pD,EAAAA,IAKvDuC,EAAMlsD,KAAO2pD,EAAAA,IAKjB08E,EAAen6E,EAAMlsD,IAJnBqmI,EAnEgB,KA8DhBtmF,EAAiB,CAAErH,eAAgB,kBASb,GACvB,CAACuO,EAAsBlH,IAEpB2mF,GAAaniI,EAAAA,EAAAA,KAAQ,KAClB,IACFyyB,EACH1rB,QACA86H,iBAED,CAACA,EAAa96H,EAAO0rB,IAExB,GAAK5tB,GAAMmuB,QAIX,OACErsB,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,IACd2K,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgB,mBAC3Cy2B,GAAS9rB,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MAClBvB,GACC9rB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgBA,KAC7C2K,EAAAA,GAAAA,cAAA,QAAMG,UAAW9K,IAAiByK,EAAK,qBACvCE,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CACTphB,KAAK,WACLqhB,UAAW7U,OAAO4mH,EAAWN,cAAgB,EAC7CO,eAAa,EACb9/G,UAAW,EACXxb,UAAW9K,IAEX2K,EAAAA,GAAAA,cAACmtB,GAAAA,EAAS,CACRrB,MAAO0vG,EACPr7H,UAAW9K,GACX4G,KAAM4+H,GACNa,aAAW,KAGf17H,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR9c,MAAOvP,EACPwP,SAAUwoF,EACVljE,MAAOp1B,EAAK,yBACZqQ,SAAUwpD,EACVrH,2BAAyB,MAG3BupE,GACA77H,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAgBA,KAC7C2K,EAAAA,GAAAA,cAAC4nD,GAAiB,CAChBnQ,SAAS,wBACT3xC,UAAWkE,EACXkwC,YAAalwC,EACbu6C,oBAAqBqqE,EACrBzuH,UAAW9K,GACXivD,uBAAqB,OAOjCtkD,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9C,EACT/8D,SAAUwpD,EACVn5D,QAASw7H,EACTz4H,UAAWzD,EAAK,SAEf65D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCzHJikE,GAA2B,4BA6OjC,IAAe3mE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAE+tB,GAAQ/tB,EACjB,MAAMwiB,GAAO1jB,EAAAA,EAAAA,IAAWb,EAAQ8vB,GAC1BvvB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQ8vB,GAC1BuiF,GAAeltF,EAAAA,EAAAA,IAAmBnlB,EAAQ8vB,IAC1C,SAAEhpB,IAAa4R,EAAAA,EAAAA,IAAe1Y,GAAQs+H,WACtCjuH,EAAU9P,IAAQ+0D,EAAAA,EAAAA,IAAkB/0D,GAAMg1D,EAAAA,EAAAA,IAAqBv1D,IAASw1D,EAAAA,EAAAA,IAAuBx1D,IAC/Fu+H,EAAgBlsB,GAAcksB,cAGpC,MAAO,CACLh6G,OAAMzd,WAAUuJ,UAASkuH,gBAAeC,iBAHjBnsB,GAAcnyB,cAAgBmyB,GAAcjtF,cAIpE,GAZerlB,EA3O0BnG,IASxC,IATyC,OAC7Ck2B,EAAM,KACNvL,EAAI,SACJzd,EAAQ,QACRuJ,EAAO,QACP/O,EAAO,SACP+K,EAAQ,cACRkyH,EAAa,iBACbC,GACD5kI,EACC,MAAM,cACJokC,EAAa,cACbygG,EAAa,gBACbC,EAAe,0BACfC,IACEl9H,EAAAA,EAAAA,OAEGm9H,EAAoBC,EAAkBC,IAAqBl6H,EAAAA,EAAAA,MAC3Dm6H,EAAgCC,EAA8BC,IAAiCr6H,EAAAA,EAAAA,MAC/F4iE,EAAwBC,IAA6Bx/D,EAAAA,EAAAA,KAAS,IAC9DurB,EAAOk0C,IAAYz/D,EAAAA,EAAAA,MACpB9F,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMwlE,EAAmBviD,GAAQA,EAAK+Z,WAAmB,GACnDyoC,EAAkBxiD,GAAQA,EAAKia,UAAkB,IAEhDF,EAAWC,IAAgBt2B,EAAAA,EAAAA,IAAS6+D,IACpCtoC,EAAUC,IAAex2B,EAAAA,EAAAA,IAAS8+D,IAClCm4D,EAAwBC,IAA6Bl3H,EAAAA,EAAAA,KAAUoI,IAEtElS,EAAAA,EAAAA,KAAU,KACRghI,GAA2B9uH,EAAQ,GAClC,CAACA,KAEJlS,EAAAA,EAAAA,KAAU,KACRspE,GAA0B,GAC1Bq3D,GAAmB,GAClB,CAACA,EAAmBhvG,KAEvB3xB,EAAAA,EAAAA,KAAU,KACRogC,EAAauoC,GACbroC,EAAYsoC,EAAgB,GAC3B,CAACD,EAAkBC,EAAiBxiD,KAEvCpmB,EAAAA,EAAAA,KAAU,KACJ2I,IAAas4H,EAAAA,GAAAA,WACf33D,GAA0B,GAC1BC,OAASxtE,GACT4kI,IACF,GACC,CAACA,EAAmBh4H,IAEvB,MAAMs4B,GAAwBz9B,EAAAA,EAAAA,KAAaqH,IACzCu1B,EAAav1B,EAAEwV,OAAOxM,OACtBy1D,GAA0B,GAEtBj0C,IAAUizC,IACZiB,OAASxtE,EACX,GACC,CAACs5B,IAEE+L,GAAuB59B,EAAAA,EAAAA,KAAaqH,IACxCy1B,EAAYz1B,EAAEwV,OAAOxM,OACrBy1D,GAA0B,EAAK,GAC9B,IAEG43D,GAA2B19H,EAAAA,EAAAA,KAAaqH,IAC5Cm2H,EAA0Bn2H,EAAEwV,OAAO8Y,SACnCmwC,GAA0B,EAAK,GAC9B,IAEGc,GAAoB5mE,EAAAA,EAAAA,KAAY,KACpC,MAAM6mE,EAAmBlqC,EAAUmF,OAC7BglC,EAAkBjqC,EAASiF,OAE5B+kC,EAAiB3qE,OAKtBmgC,EAAc,CACZlO,SACAzf,SAAU6uH,EACV5gG,UAAWkqC,EACXhqC,SAAUiqC,IARVf,EAASjB,GAST,GACD,CAACnoC,EAAWE,EAAUR,EAAelO,EAAQovG,IAE1CI,GAAsB39H,EAAAA,EAAAA,KAAY,KACtC88H,EAAc,CAAE3uG,WAChBgvG,IACAJ,GAAiB,GAChB,CAACI,EAAmBJ,EAAiBD,EAAe3uG,IAGjDuO,GAAWthC,EAAAA,EAAAA,IAAyB,MACpCwiI,GAAexiI,EAAAA,EAAAA,KAAO,GAEtByiI,GAAqB79H,EAAAA,EAAAA,KAAY,KACrC08B,EAASnhC,SAASgoF,QAClBq6C,EAAariI,SAAU,CAAI,GAC1B,IAEGuiI,GAAyB99H,EAAAA,EAAAA,KAAY,KACzC08B,EAASnhC,SAASgoF,QAClBq6C,EAAariI,SAAU,CAAK,GAC3B,IAEGwiI,GAA4B/9H,EAAAA,EAAAA,KAAY,KAC5Cs9H,IACAx3D,GAA0B,GAC1Bk3D,EAA0B,CAAE7uG,UAAS,GACpC,CAACmvG,EAA+BN,EAA2B7uG,IAExD6vG,GAAqBh+H,EAAAA,EAAAA,KAAa2iF,IACtC7c,GAA0B,GAC1Bk3D,EAA0B,CAAE7uG,SAAQw0D,OAAMs7C,UAAWL,EAAariI,SAAU,GAC3E,CAACyhI,EAA2B7uG,IAE/B,IAAKvL,EACH,OAGF,MAAMs7G,IAAuBrsD,EAAAA,EAAAA,IAAUjvD,IAASA,EAAKptB,KAAO4zG,EAAAA,IACtD/uC,EAAYl1D,IAAas4H,EAAAA,GAAAA,WAE/B,OACE/8H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQvL,EAAKptB,GACb2/D,WAAW,QACXjnC,OAAO,gBACPiwG,cAAY,IAEdz9H,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR33B,GAAG,kBACHogC,MAAOp1B,EAAK,iCACZ8P,SAAUmtB,EACVptB,MAAOssB,EACP9K,MAAOA,IAAUizC,GAA2BjzC,OAAQt5B,IAEtDmI,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR33B,GAAG,iBACHogC,MAAOp1B,EAAK,gCACZ8P,SAAUstB,EACVvtB,MAAOwsB,IAETn8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAAS4nG,EACT3nG,MAAOp1B,EAAK,iBACZozE,SAAUpzE,EAAK+8H,EACX,gCACA,kCACJjtH,SAAUotH,MAIfQ,GACCx9H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,aAAa0L,QAAM,EAAChP,QAAS28H,GAC1Cn9H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,sBAAsBL,EAAK,wBAAyBoiB,EAAK+Z,aAE3Ej8B,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,aAAa0L,QAAM,EAAChP,QAAS48H,GAC1Cp9H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,sBAAsBL,EAAK,0BAA2BoiB,EAAK+Z,aAE5EigG,GACCl8H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP8xC,YACE/+D,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLtqB,MAAOwkI,EACPuB,iBAAe,EACfx7G,KAAMA,EACNjmB,KAAK,OACLkE,UAAU,mBAGdqP,QAAM,EACNhP,QAASm8H,GAER78H,EAAK,8BAGVE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAa0G,IAAI,QAAQ/G,EAAK,2BAA4BoiB,EAAK+Z,aAGhFj8B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAACi2B,aAAW,EAACjlC,QAASg8H,GACjD18H,EAAK,oBAIZE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASi1C,EACT3kE,QAAS0lE,EACT/1D,SAAUwpD,EACVp2D,UAAWzD,EAAK,SAEf65D,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQy9H,EACRt9H,QAASw9H,EACTl3H,KAAMzF,EAAK,2BACXg0B,aAAch0B,EAAK,iBACnBi0B,eAAgBkpG,EAChBp3F,sBAAoB,IAEtB7lC,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQ49H,EACRz9H,QAAS29H,EACTr3H,KAAMzF,EAAK,oCAAqCoiB,EAAK+Z,WACrDnI,aAAch0B,EAAK,SACnBi0B,eAAgBspG,EAChBx3F,sBAAoB,IAEtB7lC,EAAAA,GAAAA,cAAC8iF,GAAY,CACXlzE,SAAU0tH,EACVthG,SAAUA,IAER,KC5NJ2hG,GAAoB,6BAGpBC,GAAoD,CACxD,eACA,aACA,YACA,aACA,cACA,cACA,eACA,aACA,aACA,kBACA,aACA,aACA,YAIIC,GAA0BD,GAAgBpiI,OAAS,EAEnD6/E,IAAe5/D,EAAAA,GAAAA,KAAUo5C,GAAOA,KAAM,KAAK,GAqZjD,IAAep3D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1BspG,GAAeC,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAC1C,WAAE69H,EAAU,kBAAE6B,IAAsBznH,EAAAA,EAAAA,IAAe1Y,IACnD,SAAE8G,GAAaw3H,EACf8B,EAAmBjlI,QAAQ4uG,GAAckJ,cACzCotB,GAAer/H,EAAAA,EAAAA,IAAiBT,IAChC,QAAE6sE,GAAYkxD,EAAW3kE,SAASl5D,IAAW,CAAC,EAC9C6/H,GAAgBF,KAAqB1tB,EAAAA,EAAAA,IAAiBnyG,EAAM,eAAiBA,EAAKiyG,WAExF,MAAO,CACLjyG,OACAwpG,eACAjjG,WACAu5H,eACAD,mBACAG,cAAeF,EAAe9/H,EAAKiyG,WAAYE,EAAAA,EAAAA,IAAiBnyG,EAAM,cACtEigI,YAAaH,EAAe9/H,EAAKiyG,WAAYE,EAAAA,EAAAA,IAAiBnyG,EAAM,YACpEkgI,UAAWJ,EAAe9/H,EAAKiyG,WAAYE,EAAAA,EAAAA,IAAiBnyG,EAAM,eAClEmgI,gBAAiBtzD,EACjBrV,aAAc/3D,EAAO+3D,aACrB4oE,8BAA4D,aAA7BR,GAAmBj/G,MAClDm7B,mBAAoBr8C,EAAOq8C,mBAC3BikF,eACD,GAzBevgI,EAnZ2BnG,IAkBzC,IAAAgnI,EAAA,IAlB0C,OAC9CngI,EAAM,KACNF,EAAI,aACJwpG,EAAY,SACZjjG,EAAQ,aACRu5H,EAAY,iBACZD,EAAgB,cAChBG,EAAa,YACbC,EAAW,UACXC,EAAS,aACTH,EAAY,SACZj0H,EAAQ,gBACRq0H,EAAe,aACf3oE,EAAY,8BACZ4oE,EAA6B,mBAC7BtkF,EAAkB,eAClBqjB,EAAc,QACdp+D,GACD1H,EACC,MAAM,uBACJinI,EAAsB,WACtBC,EAAU,WACVC,EAAU,aACVC,EAAY,cACZC,EAAa,gBACbvC,EAAe,SACf99F,EAAQ,wBACRsgG,EAAuB,qBACvBC,EAAoB,YACpBC,IACE3/H,EAAAA,EAAAA,OAEGm9H,EAAoBC,EAAkBC,IAAqBl6H,EAAAA,EAAAA,KAC5Dy8H,EAAe9gI,EAAKkC,MACpB6+H,EAAev3B,GAAcz1E,OAAS,IAErCkzC,EAAwBC,IAA6Bx/D,EAAAA,EAAAA,KAAS,IAC9DxF,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAASo5H,IAC5B/sG,EAAO+lE,IAAYpyF,EAAAA,EAAAA,IAASq5H,IAC5BtnI,EAAO2tE,IAAY1/D,EAAAA,EAAAA,OACnBurB,EAAOk0C,IAAYz/D,EAAAA,EAAAA,OACnBs5H,EAAgBC,IAAqBv5H,EAAAA,EAAAA,IAAS1H,EAAKmuB,SACpD+yG,IAAY5lI,EAAAA,EAAAA,IAAkB0E,GAC9BwnE,IAAuB/rE,EAAAA,EAAAA,GAASylI,IAAW,EAAOxlI,EAAAA,GAAAA,SAClDylI,IAAgBhmI,EAAAA,EAAAA,KAAQ,IAAM0kI,IAAoBuB,EAAAA,EAAAA,IAAaphI,IAAO,CAACA,EAAM6/H,IAC7Ej+H,IAAOC,EAAAA,EAAAA,KAEPw/H,IAAgC7kI,EAAAA,EAAAA,IAAuB,OAE7Dwf,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACJ45D,GAAgB0oE,IAClBS,EAAwB,CAAEzgI,WAC1BygI,EAAwB,CAAEzgI,SAAQohI,WAAW,IAC7CV,EAAqB,CAAE1gI,WACzB,GACC,CAACA,EAAQygI,EAAyBnpE,EAAc0oE,EAAWU,KAG9DhjI,EAAAA,EAAAA,KAAU,KACRqjI,EAAkBrmI,QAAQoF,EAAKmuB,SAAS,GACvC,CAACnuB,EAAKmuB,WAETvwB,EAAAA,EAAAA,KAAU,KACJ2I,IAAas4H,EAAAA,GAAAA,WACf33D,GAA0B,GAC1BC,OAASxtE,GACX,GACC,CAAC4M,IAEJ,MAAMg7H,IAAsBngI,EAAAA,EAAAA,KAAY,KACtC+9D,EAAeqiE,EAAAA,GAAAA,gBAAkC,GAChD,CAACriE,IAEEsiE,IAAwBrgI,EAAAA,EAAAA,KAAY,KACxC+9D,EAAeqiE,EAAAA,GAAAA,WAA6B,GAC3C,CAACriE,IAEEuiE,IAAuBtgI,EAAAA,EAAAA,KAAY,KACvC+9D,EAAeqiE,EAAAA,GAAAA,UAA4B,GAC1C,CAACriE,IAEEwiE,IAAyBvgI,EAAAA,EAAAA,KAAY,KACzC+9D,EAAeqiE,EAAAA,GAAAA,iBAAmC,GACjD,CAACriE,IAEEyiE,IAA4BxgI,EAAAA,EAAAA,KAAY,KAC5C+9D,EAAeqiE,EAAAA,GAAAA,mBAAqC,GACnD,CAACriE,IAEE0iE,IAAqBzgI,EAAAA,EAAAA,KAAY,KACrC+9D,EAAeqiE,EAAAA,GAAAA,QAA0B,GACxC,CAACriE,IAEE2iE,IAAsB1gI,EAAAA,EAAAA,KAAY,KACtC+9D,EAAeqiE,EAAAA,GAAAA,aAA+B,GAC7C,CAACriE,IAEE4iE,IAAiB3gI,EAAAA,EAAAA,KAAa2iF,IAClC3c,EAAS2c,GACT7c,GAA0B,EAAK,GAC9B,IAEGgzB,IAAoB94F,EAAAA,EAAAA,KAAaqH,IACrCoxF,EAASpxF,EAAEwV,OAAOxM,OAClBy1D,GAA0B,EAAK,GAC9B,IAEG86D,IAAoB5gI,EAAAA,EAAAA,KAAaqH,IACrCqxF,EAASrxF,EAAEwV,OAAOxM,OAClBy1D,GAA0B,EAAK,GAC9B,IAEG+6D,IAAoB7gI,EAAAA,EAAAA,KAAY,KACpC,MAAM8gI,EAAehgI,EAAMghC,OACrBi/F,EAAepuG,EAAMmP,OAEtBg/F,EAAa5kI,OAKlBijI,EAAW,CACTrgI,SACAgC,MAAOggI,EACPnuG,MAAOouG,EACP1oI,UARA0tE,EAASs4D,GAST,GACD,CAAC1rG,EAAO7zB,EAAQzG,EAAOyI,EAAOq+H,IAE3B6B,IAAqBhhI,EAAAA,EAAAA,KAAY,KACrC+9D,EAAeqiE,EAAAA,GAAAA,aAA+B,GAC7C,CAACriE,IAEEkjE,IAAyBjhI,EAAAA,EAAAA,KAAY,KACzC,IAAKooG,EACH,OAGF,MAAM,mBAAE84B,GAAuB94B,EAE/B82B,EAAuB,CAAEpgI,OAAQF,EAAKpJ,GAAIsvC,WAAYo8F,GAAqB,GAC1E,CAACtiI,EAAKpJ,GAAI4yG,IAEP+4B,IAAoBnhI,EAAAA,EAAAA,KAAY,KACpC6/H,GAAmBtkI,IACjB,MAAM6lI,GAAqB7lI,EAM3B,OAJAwgF,IAAa,KACX0jD,EAAY,CAAE3gI,SAAQgmC,UAAWs8F,GAAoB,IAGhDA,CAAiB,GACxB,GACD,CAACtiI,EAAQ2gI,KAEZjjI,EAAAA,EAAAA,KAAU,KACR,IAAKwiI,EACH,OAKF,MAAMqC,EAAWpB,GAA8B1kI,SAASxG,cAAc,SACtEssI,EAAS1rG,SAAWyyE,GAAc84B,kBAAkB,GACnD,CAAClC,EAA+B52B,GAAc84B,qBAEjD,MAAMI,IAA2BvnI,EAAAA,EAAAA,KAAQ,KACvC,IAAKquG,GAAc5I,iBACjB,OAAOh/F,GAAK,gBAGd,GAA2C,QAAvC4nG,EAAa5I,iBAAiBl9F,KAChC,OAAO9B,GAAK,gBAGd,MAAM+gI,EAAgBn5B,EAAa5I,iBAAiBiX,QAAQv6G,OACtDslI,EAAc9mF,GAAoBzrB,QAAQwrB,IAAcA,EAASg0C,aAAYvyF,QAAU,EAE7F,OAAOslI,EACF,GAAED,OAAmBC,IACrB,GAAED,GAAe,GACrB,CAAC7mF,EAAoB0tD,GAAc5I,iBAAkBh/F,KAElDihI,IAA0B1nI,EAAAA,EAAAA,KAAQ,KACtC,IAAK6E,EAAK8iI,oBACR,OAAO,EAGT,IAAI3jD,EAAaugD,GAAgBrvG,QAC9BhqB,KACa,iBAARA,IAA2B26H,GACvBhhI,EAAK8iI,oBAAqBz8H,MAEpC/I,OAEF,MAAM,aAAEylI,EAAY,SAAEC,GAAahjI,EAAK8iI,oBAOxC,OAJKC,GAAiBC,IACpB7jD,GAAc,GAGTA,CAAU,GAChB,CAACn/E,EAAK8iI,oBAAqB9B,IAExBiC,IAAc9nI,EAAAA,EAAAA,KAAQ,IACnB/D,OAAO02B,KAAK07E,GAAc05B,kBAAoB,CAAC,GAAG5lI,QACxD,CAACksG,GAAc05B,mBAEZC,IAAoB/hI,EAAAA,EAAAA,KAAY,KAChC0+H,EACFU,EAAW,CAAEtgI,OAAQF,EAAKpJ,KAChBoJ,EAAKiyG,UAGfyuB,EAAc,CAAExgI,OAAQF,EAAKpJ,KAF7B6pI,EAAa,CAAEvgI,OAAQF,EAAKpJ,KAI9B2nI,IACAJ,IACA99F,EAAS,CAAEzpC,QAAI+C,GAAY,GAC1B,CACDmmI,EAAc9/H,EAAKiyG,UAAWjyG,EAAKpJ,GACnC2nI,EAAmBJ,EAAiBsC,EAAcC,EAAeF,EAAYngG,IAG/E,GAAIrgC,EAAKoxG,cAAgBpxG,EAAKsqG,YAC5B,OAGF,MAAM7uC,GAAYl1D,IAAas4H,EAAAA,GAAAA,WAE/B,OACE/8H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACsmE,GAAAA,EAAc,CACbg7D,WAAYpC,EACZx5D,qBAAsBA,GACtB91D,SAAUqwH,GACV9vH,UAAW+tH,IAEbl+H,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR33B,GAAG,cACHogC,MAAOp1B,GAAK,aACZ8P,SAAUwoF,GACVzoF,MAAOvP,EACP+wB,MAAOA,IAAUwsG,GAAoBxsG,OAAQt5B,EAC7CsY,UAAW+tH,IAEbl+H,EAAAA,GAAAA,cAACumE,GAAQ,CACPzxE,GAAG,cACHqL,UAAU,OACV+0B,MAAOp1B,GAAK,0BACZqqC,UAzRkB,IA0RlBy2B,oBA1RkB,IA0R2B3uC,EAAMz2B,QAAQ+zC,WAC3D3/B,SAAUswH,GACVvwH,MAAOsiB,EACP9hB,UAAW+tH,EACXl9D,mBAAiB,IAElB9iE,EAAKiyG,WACJnwG,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,OAAO0uD,WAAS,EAAChyD,QAASi/H,IACvCz/H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA4BL,GAAhBu/H,GAAqB,aAAqB,iBAGzEtB,GACC/9H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,UACL0uD,WAAS,EACThyD,QAASm/H,IAET3/H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,kBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,GAAK,sBAGrCE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,cACL0uD,WAAS,EACThyD,QAASq/H,GACT1vH,UAAWguH,GAEXn+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,uBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5Bk6H,GAAwB,IAAElD,IAA2BqB,EAAiB,EAAI,KAG/El/H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,gBACL0uD,WAAS,EACThyD,QAASo/H,GACTzvH,UAAW+tH,GAEXl+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B+5H,KAGL5gI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,QACL0uD,WAAS,EACThyD,QAASs/H,IAET9/H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYi2H,EAAAA,GAAAA,IAAc+K,MAE3C/C,GACCp+H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OACLtD,QAASu/H,GACTvtE,WAAS,EACTriD,UAAWkuH,GAEXr+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACbk+H,GAAkBjI,EAAAA,GAAAA,IAAciI,EAAgB7iI,QAAUsE,GAAK,aAIrEhH,QAAQoF,EAAKqjI,cAAc/lI,SAC1BwE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,kBACLtD,QAASw/H,GACTxtE,WAAS,GAETxyD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,mBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aACbi2H,EAAAA,GAAAA,IAAcl4H,EAAKqjI,aAAc/lI,UAIvCyiI,GACCj+H,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAAChP,QAASigI,IACtCzgI,EAAAA,GAAAA,cAAA,YAAOF,GAAK,kBACZE,EAAAA,GAAAA,cAAColF,GAAAA,EAAQ,CACPtwF,GAAG,sBACHogC,MAAOp1B,GAAK,iBACZm1B,QAASiqG,EACTz0D,UAAQ,KAGZzqE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCAAkCL,GAAK,6BAI5DE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,QAAQ0uD,WAAS,EAAChyD,QAAS8/H,IACxCtgI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,GAAK,iBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYi2H,EAAAA,GAAAA,IAA+B,QAAlBmI,EAACrgI,EAAKwlF,oBAAY,IAAA66C,EAAAA,EAAI,MAG/Dc,IAAiBvmI,QAAQ4uG,IACzB1nG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BAA+B2E,IAAKy6H,IACjDv/H,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,SAAUyyE,EAAa84B,mBACvBtrG,MAAOp1B,GAAK,eACZ8P,SAAU2wH,GACVpwH,UAAWguH,MAKnBn+H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAACi2B,aAAW,EAACjlC,QAASg8H,GACjD18H,GAAK,iBAIZE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASi1C,EACT3kE,QAAS2/H,GACThwH,SAAUwpD,GACVp2D,UAAWzD,GAAK,SAEf65D,GACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQy9H,EACRt9H,QAASw9H,EACTvlH,WAAWzW,EAAAA,GAAAA,GACTu9H,IAAiB9/H,EAAKiyG,UAClBrwG,GAAK,2BACLA,GAAK,oCAAqC5B,EAAKkC,OACnD,CAAC,KAAM,oBAET0zB,aAAckqG,IAAiB9/H,EAAKiyG,UAAYrwG,GAAK,cAAgBA,GAAK,qBAC1Ei0B,eAAgBstG,GAChBx7F,sBAAoB,IAElB,KCheJ27F,GAAsD,CAC1D,aACA,YACA,aACA,aACA,kBACA,aACA,aACA,WACA,eACA,YAEIC,GAAgD,IAAID,GAAmB,aAE9D,SAASE,GAAqBC,GAC3C,MAAOC,EAAaC,IAAkBj8H,EAAAA,EAAAA,IAA8B,CAAC,IAC9Dk8H,EAAuBC,IAA4Bn8H,EAAAA,EAAAA,KAAS,IAC5D+zD,EAAWugE,IAAgBt0H,EAAAA,EAAAA,KAAS,IAE3C9J,EAAAA,EAAAA,KAAU,KACR+lI,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,GACzB1lI,YAAW,KACT69H,GAAa,EAAM,GAxBoB,IAyBD,GACvC,CAACyH,IAEJ,MAAMK,GAAyB1iI,EAAAA,EAAAA,KAAaqH,IAC1C,MAAQyB,KAAM65H,GAAet7H,EAAEwV,OAEzB/T,EAAO65H,EAEb,SAASC,EAA0BvyH,GACjC,OAAOA,QAAQ9X,CACjB,CAEA,MAAMsqI,EAAiBP,EAEvB,IAAIQ,EAAsC,IACrCD,EACH,CAAC/5H,GAAO85H,EAA0BC,EAAe/5H,OACpC,iBAATA,GAA2B,CAC7B84H,SAAUgB,EAA0BC,EAAe/5H,MAIvD,MAAMi6H,EAAaA,KACjB,MAAMC,EAAmBd,GAAkB/hI,KAAK8E,GAAQ69H,EAAe79H,KACnE+9H,EAAiB/iF,MAAMkxC,IAAOA,IAChC2xC,EAAiB,IACZA,EACHG,eAAW1qI,GAEJyqI,EAAiB/wC,MAAMz4F,WAChCspI,EAAiB,IACZA,EACHG,WAAW,GAEf,EAGW,cAATn6H,EACFi6H,IAEAD,EAAiB,IACZA,KACCZ,GAAkB51G,QAAO,CAACC,EAAKtnB,IACjCjP,OAAOC,OAAOs2B,EAAK,CAAE,CAACtnB,GAAM69H,EAAeG,aAC1C,CAAC,IAKK,eAATn6H,IAA0Bg6H,EAAeI,YAAcJ,EAAeK,YACxEL,EAAiB,IACZA,EACHI,YAAY,IAIH,cAATp6H,IAAyBg6H,EAAeI,YAAcJ,EAAeK,YACvEL,EAAiB,IACZA,EACHK,eAAW5qI,IAIF,cAATuQ,GACFi6H,IAGF,MAAMK,EAAejB,GAAoBlwC,OAAOhtF,GAAQ69H,EAAe79H,KACvE69H,EAAiB,IACZA,EACHM,eAAcA,QAAsB7qI,GAGtCgqI,EAAeO,GAEfL,GAA0BJ,GAAsBrsI,OAAO02B,KAAKo2G,GAAgB7iF,MAAM/hC,IAChF,MAAMjZ,EAAMiZ,EACZ,OAAO1kB,QAAQ6oI,EAAmBp9H,MAAUzL,QAAQspI,EAAe79H,GAAK,IACvE,GACF,CAACo9H,EAAoBC,IAExB,MAAO,CACLA,cACAjoE,YACAmoE,wBACAE,yBACA9H,eAEJ,CCpCA,MAoVA,IAAez8H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1BukI,GAAWh7B,EAAAA,EAAAA,IAAmBhqG,EAAQS,GACtCuyG,EAAgB73G,QAAQ6pI,GAAU/xB,cAExC,MAAO,CACL1yG,OACAqkB,cAAe5kB,EAAO4kB,cACtBouF,gBACAiyB,kBAAmBD,GAAUE,eAAernI,QAAU,EACtD0gH,QAASymB,GAAUzmB,QACpB,GAZex+G,EApVsCnG,IAUpD,IAVqD,eACzD8lE,EAAc,mBACdylE,EAAkB,KAClB5kI,EAAI,cACJqkB,EAAa,cACbouF,EAAa,kBACbiyB,EAAiB,QACjB1mB,EAAO,QACPj9G,EAAO,SACP+K,GACDzS,EACC,MAAM,8BAAEwrI,EAA6B,iBAAE9yG,IAAqB7wB,EAAAA,EAAAA,OAEtD,YACJwiI,EAAW,sBAAEE,EAAqB,UAAEnoE,EAAS,uBAAEqoE,EAAsB,aAAE9H,GACrEwH,GAAqBxjI,GAAM8iI,qBACzBlhI,GAAOC,EAAAA,EAAAA,MACP,QAAEssB,GAAYnuB,GAAQ,CAAC,EACvBmoH,GAAWhtH,EAAAA,EAAAA,KAAQ,IAAM6E,IAAQohI,EAAAA,EAAAA,IAAaphI,IAAO,CAACA,IACtD8kI,EAAwCryB,GAAiB0V,GAE/DnsG,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMgkI,GAA0B3jI,EAAAA,EAAAA,KAAY,KAC1C+9D,EAAeqiE,EAAAA,GAAAA,kBAAoC,GAClD,CAACriE,IAEE6lE,GAA0B5jI,EAAAA,EAAAA,KAAY,KAC1C+9D,EAAeqiE,EAAAA,GAAAA,2BAA6C,GAC3D,CAACriE,IAEE8lE,GAA6B7jI,EAAAA,EAAAA,KAAau6G,IAC9CipB,EAAmBjpB,EAAOpsF,OAAQosF,EAAOupB,mBAAqB7gH,GAC9D86C,EAAeqiE,EAAAA,GAAAA,qBAAuC,GACrD,CAACn9G,EAAeugH,EAAoBzlE,KAEhCgmE,EAAqBC,IAA0B19H,EAAAA,EAAAA,KAAS,GACzD29H,GAA0BjkI,EAAAA,EAAAA,KAAaqH,KAC3C7S,EAAAA,EAAAA,GAAU6S,GACV28H,GAAwBD,EAAoB,GAC3C,CAACA,IAEEG,GAAsBlkI,EAAAA,EAAAA,KAAY,KACtC2wB,EAAiB,CAAEv6B,QAASoK,EAAK,sCAAuC,GACvE,CAACA,EAAMmwB,IAEJwzG,GAAwBnkI,EAAAA,EAAAA,KAAY,KACnCpB,IAILg8H,GAAa,GACb6I,EAA8B,CAAE3kI,OAAQF,EAAKpJ,GAAI4uI,aAAc9B,IAAc,GAC5E,CAAC1jI,EAAM0jI,EAAa1H,EAAc6I,IAE/BY,GAAmBtqI,EAAAA,EAAAA,KAAQ,IAC1B6iH,EAIEA,EAAQ3tF,QAAO7uB,IAAA,IAAC,aAAEgkI,GAAchkI,EAAA,OAAK5G,QAAQ4qI,EAAa,IAHxD,IAIR,CAACxnB,IAEE0nB,GAAsBtkI,EAAAA,EAAAA,KAAau6G,IACvC,MAAM,aAAE6pB,GAAiB7pB,EACzB,IAAK6pB,IAAiBxlI,EACpB,OAGF,MAAM,oBAAE8iI,GAAwB9iI,EAEhC,OAAO5I,OAAO02B,KAAK03G,GAAc93G,QAAO,CAACriB,EAAQiU,KAC/C,MAAMjZ,EAAMiZ,EACZ,IACGkmH,EAAan/H,IACVy8H,IAAsBz8H,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAOgF,EAGT,MAAMs6H,EA3HZ,SAAqCt/H,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,YACH,MAAO,6BACT,IAAK,WACH,MAAO,6BACT,IAAK,kBACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,aACH,MAAO,+BACT,QACE,OAEN,CAsFsBu/H,CAA4Bv/H,GAE5C,IAAKs/H,EACH,OAAOt6H,EAGT,MAAMw6H,EAAmBjkI,EAAK+jI,GAE9B,MAAQ,GAAEt6H,IAAUA,EAAO/N,OAA6B,KAAIuoI,IAAxBA,GAA4C,GAC/E,GAAG,GACL,CAAC7lI,EAAM4B,IAEV,OACEE,EAAAA,GAAAA,cAAA,OACEG,UAAU,mCACV3K,MAAQ,uDAGRwK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkB0G,IAAI,QAAQ/G,EAAK,6BAEjDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAYa,UACtBvtG,MAAOp1B,EAAK,wBACZkkI,UAAQ,EACRp0H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAYW,UACtBrtG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRjxC,UAAWswC,EAAsB,KAAO,OACxCzzH,SAAUoyH,EACVhvC,aAAcuwC,KAGlBvjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,eACA28H,GAAuB,uBAGzBrjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYqC,WACtB/uG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYsC,WACtBhvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,SAAU2sG,EAAYX,eAAiBW,EAAYV,SACnDhsG,MAAOp1B,EAAK,gCACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYuC,WACtBjvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,WACL6sB,SAAU2sG,EAAYwC,SACtBlvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYyC,WACtBnvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,kBACL6sB,SAAU2sG,EAAY0C,gBACtBpvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYY,WACtBttG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAY2C,UACtBrvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRp0H,SAAUoyH,OAMlBhiI,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ28H,GAAuB,YAC5DrjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,SAAU2sG,EAAY4C,YACtBtvG,MAAOp1B,EAAK,+BACZkkI,UAAQ,EACRp0H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OACEG,UAAU,sCACVK,QAASwiI,EAAwCQ,OAAsB3rI,GAEvEmI,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,SAAU2sG,EAAY6C,YACtBvvG,MAAOp1B,EAAK,+BACZqQ,SAAU6yH,EACVgB,UAAQ,EACRp0H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OACEG,UAAU,sCACVK,QAASwiI,EAAwCQ,OAAsB3rI,GAEvEmI,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAY8C,WACtBxvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAU6yH,EACVpzH,SAAUoyH,KAGb31G,GACCrsB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,SAAU2sG,EAAY+C,aACtBzvG,MAAOp1B,EAAK,0BACZkkI,UAAQ,EACRp0H,SAAUoyH,OAOpBhiI,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,UACA28H,GAAuB,YAGzBrjI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,cACL0uD,WAAS,EACTC,QAAM,EACNjyD,QAASyiI,GAETjjI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,wBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYyiI,KAIhC5iI,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,UACA28H,GAAuB,YAGzBrjI,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkB0G,IAAI,QAAQ/G,EAAK,sBAEjDE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,WACLtD,QAAS0iI,GAERpjI,EAAK,wBAGP6jI,EAAiBlkI,KAAKo6G,GACrB75G,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKs1G,EAAOpsF,OACZttB,UAAU,wCAEVK,QAASA,IAAM2iI,EAA2BtpB,IAE1C75G,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQosF,EAAOpsF,OACfD,OAAQo2G,EAAoB/pB,GAC5Bj7C,eAAa,SAOvB5+D,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAAS4xG,EACTthI,QAASijI,EACTlgI,UAAWzD,EAAK,QAChBqQ,SAAUwpD,GAETA,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCxVV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA2B,IAAzB,KAAExB,GAAMwB,EACf,MAAM,cAAE6iB,GAAkB5kB,EAE1B,MAAO,CACL4kB,gBACAqiH,aAAaj9B,EAAAA,EAAAA,IAAmBhqG,EAAQO,EAAKpJ,KAAKonH,QACnD,GAPex+G,EAjDoCnG,IAMlD,IANmD,KACvD2G,EAAI,cACJqkB,EAAa,YACbqiH,EAAW,OACX9lI,EAAM,QACNG,GACD1H,EACC,MAAM,gBACJstI,EAAe,iBACfC,IACE1lI,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACNmqB,EAAQwE,IAAa9oB,EAAAA,EAAAA,IAAS,IAE/Bm/H,GAAU1rI,EAAAA,EAAAA,KAAQ,KACtB,MAAM2rI,GAAsBJ,GAAe,IACxCh5G,QAAO,CAACC,EAAeguF,KACjBA,EAAOorB,SAAYprB,EAAOqrB,SAAWrrB,EAAOpsF,SAAWlL,GAC1DsJ,EAAIhoB,KAAKg2G,EAAOpsF,QAEX5B,IACN,IAGCkD,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAEpC,OAAO2B,EAAAA,EAAAA,IAAkBy1G,EAAoBj2G,EAAW7E,EAAO,GAC9D,CAAC06G,EAAariH,EAAe2H,IAE1B+9D,GAAmB3oF,EAAAA,EAAAA,KAAamuB,IACpCq3G,EAAiB,CAAE1mI,OAAQF,EAAKpJ,GAAI24B,WACpCxuB,GAAS,GACR,CAACf,EAAKpJ,GAAIgwI,EAAkB7lI,IAE/B,OACEe,EAAAA,GAAAA,cAAC2vB,GAAgB,CACf7wB,OAAQA,EACRkrB,cAAe+6G,EACf56G,kBAAmBrqB,EAAK,oBACxBoqB,OAAQA,EACRG,eAAgBqE,EAChBtE,SAAUy6G,EACVv6G,mBAAoB29D,EACpBhpF,QAASA,GACT,KCqDN,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IACxBwvB,KAAMmB,GAAcpxB,EAAOqxB,MAGnC,MAAO,CACL9wB,OACA6wB,YACAo2G,iBALuBjnI,KAASmyG,EAAAA,EAAAA,IAAiBnyG,EAAM,aAAeA,EAAKiyG,WAM3Ei1B,gBAAgBz9B,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAASykI,eAAiBh+E,GAAAA,EACrE1yB,UAAWj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAClC,GAZeR,EA3FsCnG,IAQpD,IARqD,KACzD2G,EAAI,UACJ6wB,EAAS,iBACTo2G,EAAgB,eAChBC,EAAc,UACdjzG,EAAS,QACTlzB,EAAO,SACP+K,GACDzS,EACC,MAAM,6BAAE8tI,IAAiCjmI,EAAAA,EAAAA,MAEnCU,GAAOC,EAAAA,EAAAA,MACNulI,EAAuBC,EAAqBC,IAAwBjjI,EAAAA,EAAAA,MAE3E2X,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMwmI,GAAenmI,EAAAA,EAAAA,KAAau6G,IAChC,IAAKA,EAAO6rB,eACV,OAGF,MAAMC,EAAe52G,EAAU8qF,EAAO6rB,gBACtC,OAAKC,EAIE7lI,EAAK,iBAAiBq1B,EAAAA,EAAAA,IAAgBwwG,SAJ7C,CAI2D,GAC1D,CAAC7lI,EAAMivB,IAEJ62G,GAAoBtmI,EAAAA,EAAAA,KAAau6G,IACrC,GAAK37G,EAIL,MAAO,CAAC,CACNkC,MAAON,EAAK,WACZgE,KAAM,SACN2hC,aAAa,EACb0+B,QAASA,IAAMkhE,EAA6B,CAC1CjnI,OAAQF,EAAKpJ,GACb24B,OAAQosF,EAAOpsF,OACfi2G,aAAc,CAAC,KAEjB,GACD,CAAC5jI,EAAM5B,EAAMmnI,IAEhB,OACErlI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjDmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAKqyB,EAAY,oBAAsB,oBAEjEizG,EAAe3lI,KAAKo6G,GACnB75G,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKs1G,EAAOpsF,OACZttB,UAAU,sBACVqP,QAAM,EACN8kD,eAAgBsxE,EAAkB/rB,IAElC75G,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQosF,EAAOpsF,OACfD,OAAQi4G,EAAa5rB,GACrBj7C,eAAa,OAIlBumE,GACCnlI,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,SAAO,EACP1vB,QAAS+kI,EACThiI,UAAWzD,EAAK,0CAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BAGhBjC,GAAQinI,GACPnlI,EAAAA,GAAAA,cAAC6lI,GAAoB,CACnB3nI,KAAMA,EACNY,OAAQwmI,EACRrmI,QAASumI,MAKb,KCpEJM,GAAsB,+BA0T5B,IAAeroI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IAC1B,WAAE69H,IAAe5lH,EAAAA,EAAAA,IAAe1Y,IAChC,SAAE8G,GAAaw3H,EACf8J,EAAoBjtI,QAAQoF,GAAM6nI,oBAClC,QAAEh7D,GAAYkxD,EAAW3kE,SAASl5D,IAAW,CAAC,EAEpD,MAAO,CACLF,OACAwpG,cAAcC,EAAAA,EAAAA,IAAmBhqG,EAAQS,GACzCqG,WACAshI,oBACA7H,eAAe7tB,EAAAA,EAAAA,IAAiBnyG,EAAM,cACtCkgI,WAAW/tB,EAAAA,EAAAA,IAAiBnyG,EAAM,eAClCw3D,aAAc/3D,EAAO+3D,aACrB2oE,gBAAiBtzD,EACjB/wB,mBAAoBr8C,EAAOq8C,mBAC5B,GAlBet8C,EAvT6BnG,IAc3C,IAAAgnI,EAAA,IAd4C,OAChDngI,EAAM,KACNF,EAAI,aACJwpG,EAAY,SACZjjG,EAAQ,kBACRshI,EAAiB,cACjB7H,EAAa,UACbE,EAAS,gBACTC,EAAe,aACf3oE,EAAY,SACZ1rD,EAAQ,mBACRgwC,EAAkB,eAClBqjB,EAAc,QACdp+D,GACD1H,EACC,MAAM,WACJknI,EAAU,iBACVuH,EAAgB,gBAChB3J,EAAe,aACfsC,EAAY,cACZC,EAAa,SACbrgG,EAAQ,wBACRsgG,EAAuB,qBACvBC,IACE1/H,EAAAA,EAAAA,MAEE4/H,EAAe9gI,GAAMkC,OAAS,GAC9B6+H,EAAev3B,GAAcz1E,OAAS,GACtC0+E,EAAgB73G,QAAQ4uG,GAAckJ,eAErC2rB,EAAoBC,EAAkBC,IAAqBl6H,EAAAA,EAAAA,MAC3D4iE,EAAwBC,IAA6Bx/D,EAAAA,EAAAA,KAAS,IAC9DxF,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAASo5H,IAC5B/sG,EAAO+lE,IAAYpyF,EAAAA,EAAAA,IAASq5H,IAC5BtnI,EAAO2tE,IAAY1/D,EAAAA,EAAAA,OACnBurB,EAAOk0C,IAAYz/D,EAAAA,EAAAA,MACpBw5H,EAAYlhI,IAAQ1E,EAAAA,EAAAA,IAAkB0E,GACtCwnE,GAAuB/rE,EAAAA,EAAAA,GAASylI,GAAW,EAAOxlI,EAAAA,GAAAA,SAClDkG,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACJ45D,IACFmpE,EAAwB,CAAEzgI,WAC1BygI,EAAwB,CAAEzgI,SAAQohI,WAAW,IAC7CV,EAAqB,CAAE1gI,WACzB,GACC,CAACA,EAAQygI,EAAyBnpE,EAAcopE,KAEnDhjI,EAAAA,EAAAA,KAAU,KACJ2I,IAAas4H,EAAAA,GAAAA,WACf33D,GAA0B,GAC1BC,OAASxtE,GACX,GACC,CAAC4M,IAEJ,MAAM08H,GAAc9nI,EAAAA,EAAAA,KAAQ,IACnB/D,OAAO02B,KAAK07E,GAAc05B,kBAAoB,CAAC,GAAG5lI,QACxD,CAACksG,GAAc05B,mBACZwB,EAAoBl7B,GAAcm7B,eAAernI,QAAU,EAE3DikI,GAAsBngI,EAAAA,EAAAA,KAAY,KACtC+9D,EAAeqiE,EAAAA,GAAAA,gBAAkC,GAChD,CAACriE,IAEEsiE,GAAwBrgI,EAAAA,EAAAA,KAAY,KACxC+9D,EAAeqiE,EAAAA,GAAAA,WAA6B,GAC3C,CAACriE,IAEEuiE,IAAuBtgI,EAAAA,EAAAA,KAAY,KACvC+9D,EAAeqiE,EAAAA,GAAAA,UAA4B,GAC1C,CAACriE,IAEEyiE,IAA4BxgI,EAAAA,EAAAA,KAAY,KAC5C+9D,EAAeqiE,EAAAA,GAAAA,mBAAqC,GACnD,CAACriE,IAEE0iE,IAAqBzgI,EAAAA,EAAAA,KAAY,KACrC+9D,EAAeqiE,EAAAA,GAAAA,QAA0B,GACxC,CAACriE,IAEE2iE,IAAsB1gI,EAAAA,EAAAA,KAAY,KACtC+9D,EAAeqiE,EAAAA,GAAAA,aAA+B,GAC7C,CAACriE,IAEE4iE,IAAiB3gI,EAAAA,EAAAA,KAAa2iF,IAClC3c,EAAS2c,GACT7c,GAA0B,EAAK,GAC9B,IAEGgzB,IAAoB94F,EAAAA,EAAAA,KAAaqH,IACrCoxF,EAASpxF,EAAEwV,OAAOxM,OAClBy1D,GAA0B,EAAK,GAC9B,IAEG86D,IAAoB5gI,EAAAA,EAAAA,KAAaqH,IACrCqxF,EAASrxF,EAAEwV,OAAOxM,OAClBy1D,GAA0B,EAAK,GAC9B,IAEG6gE,IAAsB3mI,EAAAA,EAAAA,KAAY,KACtC,MAAM8gI,EAAehgI,EAAMghC,OACrBi/F,EAAepuG,EAAMmP,OAEtBg/F,EAAa5kI,OAKlBijI,EAAW,CACTrgI,SACAgC,MAAOggI,EACPnuG,MAAOouG,EACP1oI,UARA0tE,EAASygE,GAST,GACD,CAAC7zG,EAAO7zB,EAAQzG,EAAOyI,EAAOq+H,IAE3ByH,IAAyB5mI,EAAAA,EAAAA,KAAY,KACzC0mI,EAAiB,CAAE5nI,SAAQgmC,WAAY2hG,GAAoB,GAC1D,CAAC3nI,EAAQ2nI,EAAmBC,IAEzBG,IAAyB7mI,EAAAA,EAAAA,KAAY,KACzC+9D,EAAeqiE,EAAAA,GAAAA,mBAAqC,GACnD,CAACriE,IAEE4lE,IAA0B3jI,EAAAA,EAAAA,KAAY,KAC1C+9D,EAAeqiE,EAAAA,GAAAA,oBAAsC,GACpD,CAACriE,IAEE+oE,IAAsB9mI,EAAAA,EAAAA,KAAY,KAClCpB,EAAKiyG,UACPyuB,EAAc,CAAExgI,OAAQF,EAAKpJ,KAE7B6pI,EAAa,CAAEvgI,OAAQF,EAAKpJ,KAG9B2nI,IACAJ,IACA99F,EAAS,CAAEzpC,QAAI+C,GAAY,GAC1B,CAACqG,EAAKiyG,UAAWjyG,EAAKpJ,GAAI2nI,EAAmBJ,EAAiBsC,EAAcC,EAAergG,IAExFqiG,IAA2BvnI,EAAAA,EAAAA,KAAQ,KACvC,IAAKquG,GAAc5I,iBACjB,OAAOh/F,EAAK,gBAGd,GAA2C,QAAvC4nG,EAAa5I,iBAAiBl9F,KAChC,OAAO9B,EAAK,gBAGd,MAAM+gI,EAAgBn5B,EAAa5I,iBAAiBiX,QAAQv6G,OACtDslI,EAAc9mF,GAAoBzrB,QAAQwrB,IAAcA,EAASg0C,aAAYvyF,QAAU,EAE7F,OAAOslI,EAAe,GAAED,OAAmBC,IAAiB,GAAED,GAAe,GAC5E,CAAC7mF,EAAoB0tD,GAAc5I,iBAAkBh/F,IAClDumI,IAAkBhtI,EAAAA,EAAAA,KAAQ,KAAMimI,EAAAA,EAAAA,IAAaphI,IAAO,CAACA,IAE3D,GAAIA,EAAKoxG,cAAgBpxG,EAAKsqG,YAC5B,OAGF,MAAM7uC,GAAYl1D,IAAas4H,EAAAA,GAAAA,WAE/B,OACE/8H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACsmE,GAAAA,EAAc,CACbZ,qBAAsBA,EACtB91D,SAAUqwH,GACV9vH,UAAW+tH,IAEbl+H,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR33B,GAAG,gBACHogC,MAAOp1B,EAAK,oBACZ8P,SAAUwoF,GACVzoF,MAAOvP,EACP+wB,MAAOA,IAAU20G,GAAsB30G,OAAQt5B,EAC/CsY,UAAW+tH,IAEbl+H,EAAAA,GAAAA,cAACumE,GAAQ,CACPzxE,GAAG,gBACHqL,UAAU,OACV+0B,MAAOp1B,EAAK,0BACZ8P,SAAUswH,GACVvwH,MAAOsiB,EACPkY,UAhMoB,IAiMpBy2B,oBAjMoB,IAiM2B3uC,EAAMz2B,QAAQ+zC,WAC7Dp/B,UAAW+tH,EACXl9D,mBAAiB,IAElB9iE,EAAKiyG,WACJnwG,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,OAAO0uD,WAAS,EAAChyD,QAASi/H,GACvCz/H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,gBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA8BL,EAAlBumI,GAAuB,aAAqB,iBAG5ErmI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,UACL0uD,WAAS,EACThyD,QAASm/H,EACTxvH,UAAW+tH,GAEXl+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,eAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA4BL,EAAhB6wG,EAAqB,mBAA2B,SAE7EytB,GACCp+H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,OACLtD,QAASu/H,GACTvtE,WAAS,EACTriD,UAAWkuH,GAEXr+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACbk+H,GAAkBjI,EAAAA,GAAAA,IAAciI,EAAgB7iI,QAAUsE,EAAK,aAIrEhH,QAAQoF,EAAKqjI,cAAc/lI,SAC1BwE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,kBACLtD,QAASw/H,GACTxtE,WAAS,GAETxyD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,sBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aACbi2H,EAAAA,GAAAA,IAAcl4H,EAAKqjI,aAAc/lI,UAIxCwE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,gBACL0uD,WAAS,EACThyD,QAASo/H,GACTzvH,UAAW+tH,GAEXl+H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B+5H,KAGL5gI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAAS8wG,EACT7wG,MAAOp1B,EAAK,uBACZ8P,SAAUs2H,OAIhBlmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,QACL0uD,WAAS,EACThyD,QAASs/H,IAET9/H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYghI,IAE9BnhI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,QACL0uD,WAAS,EACThyD,QAAS2lI,IAETnmI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,QAAQ0G,IAAI,QAAQ/G,EAAK,uBACzCE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAAQ/G,EAAK,cAAgC,QAAnBy+H,EAAErgI,EAAKwlF,oBAAY,IAAA66C,EAAAA,EAAI,EAAG,OAErFv+H,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,cACL0uD,WAAS,EACTC,QAAM,EACNjyD,QAASyiI,IAETjjI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,wBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYyiI,KAGhC5iI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAACi2B,aAAW,EAACjlC,QAASg8H,GACjDt+H,EAAKiyG,UAAYrwG,EAAK,iBAAmBA,EAAK,mBAIrDE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASi1C,EACT3kE,QAASylI,GACT91H,SAAUwpD,GACVp2D,UAAWzD,EAAK,SAEf65D,GACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQy9H,EACRt9H,QAASw9H,EACTl3H,KAAMrH,EAAKiyG,UAAYrwG,EAAK,sBAAwBA,EAAK,qBACzDg0B,aAAc51B,EAAKiyG,UAAYrwG,EAAK,iBAAmBA,EAAK,gBAC5Di0B,eAAgBqyG,GAChBvgG,sBAAoB,IAElB,KCxEV,IAAepoC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAA6B,IAA3B,OAAEQ,GAAQR,EACjB,MAAMM,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IAC1B,oBAAEohE,EAAmB,gBAAEC,EAAe,MAAEtuC,IAAUm1G,EAAAA,EAAAA,IAAiB3oI,EAAQS,GAEjF,MAAO,CACLF,OACAi0B,WAAWq4B,EAAAA,EAAAA,IAActsD,GACzBuG,UAAU4R,EAAAA,EAAAA,IAAe1Y,GAAQs+H,WAAWx3H,SAC5C0sB,QACAquC,sBACAC,kBACAv+D,YAAahD,GAAMgD,YACnBqlI,gBAAgB/hE,EAAAA,GAAAA,GAAmB7mE,EAAQ,kBAC3C6oI,mBAAmB7+B,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAS0xE,WACxD,GAfepyE,EA7OqCnG,IAYnD,IAZoD,KACxD2G,EAAI,SACJ8L,EAAQ,UACRmoB,EAAS,SACT1tB,EAAQ,oBACR+6D,EAAmB,gBACnBC,EAAe,MACftuC,EAAK,YACLjwB,EAAW,eACXqlI,EAAc,kBACdC,EAAiB,QACjBvnI,GACD1H,EACC,MAAM,iBACJkvI,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,sBACjBt9D,IACEjqE,EAAAA,EAAAA,MAGEkgE,GADwBjmE,EAAAA,EAAAA,KAAQ,IAAM6E,EAAKokE,WAAWtzB,MAAKtvC,IAAA,IAAC,WAAE4jE,GAAY5jE,EAAA,OAAK4jE,CAAU,KAAG,CAACplE,EAAKokE,aACzD1C,UAAY,GACrDymD,GAAWhtH,EAAAA,EAAAA,KAAQ,KAAMimI,EAAAA,EAAAA,IAAaphI,IAAO,CAACA,KAE7CinE,EAAwBC,IAA6Bx/D,EAAAA,EAAAA,KAAS,IAC9DghI,EAAaC,IAAkBjhI,EAAAA,EAAAA,IAAsBygH,EAAW,SAAW,YAC3E7gD,EAAkBC,IAAuB7/D,EAAAA,EAAAA,OACzCkhI,EAA2BC,EAAyBC,IAA4BzkI,EAAAA,EAAAA,MAChF0kI,EAA0BC,EAAwBC,IAA2B5kI,EAAAA,EAAAA,KAE9Ew9D,GAA8Bl8C,EAAAA,EAAAA,GAAY27C,GAG1C99D,EAAYyjE,GAA0BrsE,QACzB,WAAhB8tI,IACKphE,GAAqBlG,GAAwC,KAArBkG,KAJXhG,QAAAA,EAAuBO,IAMtC,YAAhB6mE,GAA6BvgB,IAGnCnsG,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACRspE,GAA0B,EAAM,GAC/B,CAAC9F,KAEJxjE,EAAAA,EAAAA,KAAU,KACJ8qI,IAAgBJ,GAClBE,GACF,GACC,CAACE,EAAaJ,EAAmBE,IAEpC,MAAMrmE,GAAuB/gE,EAAAA,EAAAA,KAAaqQ,IACxC81D,EAAoB91D,GACpBy1D,GAA0B,EAAK,GAC9B,IAEGgiE,GAAqB9nI,EAAAA,EAAAA,KAAY,CAACqQ,EAAehJ,KAIrD,GAHgBrR,OAAOq2B,QAAOmD,EAAAA,EAAAA,MAAYnB,MAAMC,MAC7CW,QAAO1uB,IAAA,IAAC,UAAEswG,EAAS,UAAE7tC,GAAWziE,EAAA,OAAKswG,GAAa7tC,GAAW/iB,MAAM8nF,GAAMA,EAAEr9H,UAAS,IAE3ExO,QAAU+qI,GAA4B,WAAV52H,EAAoB,CAC1D05D,EAAsB,CAAExqD,MAAO,mBAC/B,MAAMyoH,EAAa3gI,EAAEqN,cAAcnf,QAAQ,gBAK3C,OAFCyyI,EAAWjzI,cAAc,kBAAuC4gC,SAAU,OAC1EqyG,EAAWjzI,cAAc,mBAAwC4gC,SAAU,EAE9E,CACA4xG,EAAel3H,GACfy1D,GAA0B,EAAK,GAC9B,CAACmhE,EAAgBl9D,IAEdk+D,GAA+BjoI,EAAAA,EAAAA,KAAaqQ,IAChDg3H,EAAkB,CAChBvoI,OAAQF,EAAKpJ,GACboM,YAAuB,cAAVyO,GACb,GACD,CAACzR,EAAKpJ,GAAI6xI,IAEPa,GAAaloI,EAAAA,EAAAA,KAAY,KACzB+mH,GAA4B,YAAhBugB,EACdM,IAEAT,EAAiB,CAAE7mE,SAA0B,WAAhBgnE,GAA4BphE,GAA0B,IACrF,GACC,CAAC6gD,EAAU6gB,EAAwBN,EAAaH,EAAkBjhE,IAE/DiiE,GAAkCnoI,EAAAA,EAAAA,KAAY,KAClDmnI,EAAiB,CAAE7mE,SAAU,KAC7BunE,GAAyB,GACxB,CAACA,EAAyBV,IAEvBiB,GAA0BpoI,EAAAA,EAAAA,KAAY,KAC1C0nI,IACAN,GAAmB,GAClB,CAACM,EAA0BN,IAExB5mI,GAAOC,EAAAA,EAAAA,KACP4nI,EAAcx1G,EAAY,UAAY,OACtCy1G,EAAcz1G,EAAY,UAAY,QAEtC4c,EAAU,CACd,CAAEp/B,MAAO,UAAWulB,MAAOp1B,EAAM,GAAE6nI,YAAuBz0D,SAAUpzE,EAAM,GAAE6nI,iBAC5E,CAAEh4H,MAAO,SAAUulB,MAAOp1B,EAAM,GAAE6nI,WAAsBz0D,SAAUpzE,EAAM,GAAE6nI,iBAGtEE,EAAoB,CAAC,CACzBl4H,MAAO,UACPulB,MAAOp1B,EAAK,yCACX,CACD6P,MAAO,YACPulB,MAAOp1B,EAAK,2CAGR65D,EAAYl1D,IAAas4H,EAAAA,GAAAA,WACzBl3D,EAA8C,WAAhB+gE,GAA4B1oI,EAAKokE,WAAapkE,EAAKokE,UAAU9mE,OAAS,EAiB1G,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjDmI,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBAAmBL,EAAM,GAAE8nI,UACzC5nI,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACTC,SAAU0yD,EACVx+H,KAAK,eACL2mC,QAASA,EACTn/B,SAAUw3H,KAGG,YAAhBR,EACC5mI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChD2uI,EACCxmI,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACsqD,GAAAA,EAAQ,CAACziD,IAAK2+H,EAAmBrmI,UAAU,aAAaoF,KAAMihI,IAC/DxmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAe0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACnDiI,EAAM,GAAE6nI,qBAGX3nI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAACi2B,aAAW,EAACjlC,QAASumI,GACjDjnI,EAAK,eAERE,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQgoI,EACR7nI,QAAS+nI,EACTzhI,KAAMzF,EAAK,eACXg0B,aAAch0B,EAAK,gBACnBi0B,eAAgB2zG,EAChB7hG,sBAAoB,KAIxB7lC,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,OAIZrtB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAACwmE,GAAa,CACZjH,QAAM,EACND,gBAAiBA,EACjB3F,UAAWA,EACX6F,oBAAqBA,EACrBC,gBAAiBA,EACjB7vD,SAAUywD,IAEXlvC,IAAUs1C,EAAAA,KA9DrB,WACE,MAAMC,EAAoB,GAAE/lC,EAAAA,MAAkBgmC,EAAAA,MAE9C,OACE3mE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAe0G,IAAI,QAC5B/G,EAAK,mCACJ65B,QAAQ,SAAU,mBAClB4+B,MAAM,KACN94D,KAAKmnE,GACU,kBAANA,EAAwB5mE,EAAAA,GAAAA,cAACsqD,GAAAA,EAAQ,CAACziD,IAAK6+D,EAAkBnhE,KAAO,IAAGohE,EAAAA,QAA0BC,IAI/G,CAiDgDC,GACtC7mE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAe0G,IAAI,QAC7B/G,EAAM,GAAE8nI,qCAId/hE,GACC7lE,EAAAA,GAAAA,cAAC8mE,GAAe,CACd1oE,OAAQF,EAAKpJ,GACbwtE,UAAWpkE,EAAKokE,UAChBC,eAAgBlC,IAGpBrgE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjDmI,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAKqyB,EAAY,4CAA8C,4CAElEnyB,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACTC,SAAUhzE,EAAc,YAAc,UACtCkH,KAAK,kBACL2mC,QAAS84F,EACTj4H,SAAU23H,IAEZvnI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEPL,EADHqyB,EACQ,2CACA,6CAIfnyB,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASxuB,EACTyO,SAAUwpD,EACVp2D,UAAWzD,EAAK,QAChBU,QAASgnI,GAER7tE,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGjBH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQmoI,EACRhoI,QAASkoI,EACT5hI,KAAMzF,EAAK,gDAAiDw/D,GAC5DvrC,eAAgB0zG,EAChB5hG,sBAAoB,IAElB,KCHV,IAAepoC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IAC1B,aAAEwyG,IAAiBjJ,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAW,CAAC,GAC1D,iBAAE0pI,EAAkBl6G,KAAMs6D,GAAevqF,EAAOgwB,MAKtD,MAAO,CACLzvB,OACAgqF,aACA4/C,mBACAC,WARiBn3B,GACfzyG,EAAAA,EAAAA,IAAWR,EAAQizG,QACnB/4G,EAOFs6B,UAAWj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAClC,GAfeR,EAjPgCnG,IAU9C,IAV+C,KACnD2G,EAAI,QACJe,EAAO,SACP+K,EAAQ,OACR5L,EAAM,WACN8pF,EAAU,WACV6/C,EAAU,iBACVD,EAAgB,UAChB31G,EAAS,eACTkrC,GACD9lE,EACC,MAAM,wBACJywI,EAAuB,oBACvBC,EAAmB,sBACnBC,EAAqB,kBACrBC,EAAiB,iBACjBC,IACEhpI,EAAAA,EAAAA,OAEGipI,EAAeC,IAAoB1iI,EAAAA,EAAAA,OACnC2iI,EAAgCC,EAA8BC,IAAiClmI,EAAAA,EAAAA,MAC/FmmI,EAA8BC,EAA4BC,IAA+BrmI,EAAAA,EAAAA,MACzFsmI,EAAcC,IAAmBljI,EAAAA,EAAAA,IAAS9M,QAAQivI,GAAYc,gBAC9DE,EAAeC,IAAoBpjI,EAAAA,EAAAA,IAAS9M,QAAQivI,GAAYgB,gBACjEjpI,GAAOC,EAAAA,EAAAA,KACP6wG,EAAem3B,GAAYjzI,IAEjColB,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACRksI,GAAyB,GACxB,CAACA,KAEJlsI,EAAAA,EAAAA,KAAU,KACJkO,IACF8+H,EAAgBf,GAAYc,eAAgB,GAC5CG,EAAiBjB,GAAYgB,gBAAiB,GAChD,GACC,CAAChB,EAAY/9H,IAEhB,MAAMi/H,GAA4B3pI,EAAAA,EAAAA,KAAY,KAC5CmpI,IACAP,EAAsB,CAAEgB,UAAW/2G,EAAY/zB,EAASwyG,IACnDz+E,GACHkrC,EAAeqiE,EAAAA,GAAAA,QACjB,GACC,CAAC+I,EAA+BP,EAAuB/1G,EAAW/zB,EAAQwyG,EAAcvzC,IAErF8rE,GAA0B7pI,EAAAA,EAAAA,KAAY,KAC1CspI,IACAX,EAAoB,CAAEiB,UAAW9qI,EAAQA,OAAQiqI,GAAiB,GACjE,CAACO,EAA6BX,EAAqB7pI,EAAQiqI,IAExDe,GAAwB9pI,EAAAA,EAAAA,KAAa21B,IACzC6zG,EAAgB7zG,GAChBmzG,EAAiB,CAAEhqI,OAAQwyG,EAAexsE,UAAWnP,IAChDA,GACH+zG,GAAiB,EACnB,GACC,CAACp4B,EAAcw3B,IAEZiB,GAAyB/pI,EAAAA,EAAAA,KAAa21B,IAC1C+zG,EAAiB/zG,GACjBkzG,EAAkB,CAAE/pI,OAAQwyG,EAAexsE,UAAWnP,GAAU,GAC/D,CAAC27E,EAAcu3B,IAyIlB,OACEnoI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXp/B,OAAQs/B,GAAAA,EAAAA,iBACRpuE,KAAMqtI,EAAAA,IACNnpI,UAAU,iBAEX4nI,GAtFL/nI,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,sBACVsqE,UAAQ,GAERzqE,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAACtvB,OAAQ2pI,EAAYjzI,MAErCkL,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,SACL0L,QAAM,EACNi2B,aAAW,EACXjlC,QAASgoI,GAER1oI,EAAKqyB,EAAY,wBAA0B,4BAE9CnyB,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQypI,EACRtpI,QAASwpI,EACTj2G,OArEJxyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,OACLiC,KAAM6pI,IAER/nI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAKqyB,EAAY,wBAA0B,6BAgE5Cjb,WAAWzW,EAAAA,GAAAA,GACTX,EAAKqyB,EAAY,+BAAiC,6BAA8B41G,EAAY3nI,OAC5F,CAAC,KAAM,oBAET0zB,aAAch0B,EAAKqyB,EAAY,wBAA0B,2BACzD4B,eAAgBk1G,EAChBpjG,sBAAoB,MA8DlBkiG,GAtDN/nI,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAe0G,IAAI,QAAQ/G,EAAK,0BAE7CE,EAAAA,GAAAA,cAAA,OAAKkvG,eAAa,GAChBlvG,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAI,eACJT,KAAK,QACL0L,QAAM,EACNqkH,cAAe,EACf1jH,UAAQ,GAEPrQ,EAAK,0BAEPgoI,EACCA,EAAiBroI,KAAI,CAAC3K,EAAIwvB,IACxBtkB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACL++H,cAAevvG,EAAI,EACnBnkB,UAAU,kCAEVK,QAASA,KA9GrB8nI,EA+GgCxzI,GA9GhC6zI,GA8GmC,GAGvB3oI,EAAAA,GAAAA,cAAC0tB,GAAAA,EAAa,CAACtvB,OAAQtJ,OAI3BkL,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CAACz0D,IAAI,gBAAgBsvH,cAAe,EAAGtuH,KAAK,gCAG7DvF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yBAAyB0G,IAAI,QAAQ/G,EAAK,2BACvDE,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQ4pI,EACRzpI,QAAS2pI,EACTp2G,OA3GR,WACE,IAAK61G,EAAe,OACpB,MAAMkB,EAAcrhD,EAAWmgD,GAC/B,OAAKkB,EAGHvpI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACLhmB,KAAK,OACLiC,KAAMqrI,IAERvpI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAK,4CATZ,CAaF,CA2FgB0pI,GACRtyH,UA1FR,WACE,IAAKmxH,EAAe,OACpB,MAAMkB,EAAcrhD,EAAWmgD,GAC/B,OAAKkB,EAEDA,EAAYE,gBACPhpI,EAAAA,GAAAA,GACJ,yBAAwB8oI,EAAYnpI,sCAAsClC,EAAMkC,WACjF,CAAC,KAAM,qBAIJK,EAAAA,GAAAA,GAEJ,yBAAwB8oI,EAAYnpI,sCAAsClC,EAAMkC,kFACjF,CAAC,KAAM,yBAZT,CAcF,CAyEmBspI,GACX51G,aAAch0B,EAAK,uBACnBi0B,eAAgBo1G,MAkBjBpB,GACC/nI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBAAmBL,EAAK,6BACtCE,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAAS4zG,EACTzzG,QAASg0G,EACTl0G,MAAOp1B,EAAK,+BAEb+oI,GACC7oI,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPC,QAAS8zG,EACT3zG,QAASi0G,EACTn0G,MAAOp1B,EAAK,gCAGhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACKL,EAAf+oI,EAAoB,iCAAyC,oCAKlE,KCwFV,IAAeprI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAAsD,IAApD,OAAEzB,EAAM,wBAAEurI,GAAyB9pI,EAC1C,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1BukI,GAAWh7B,EAAAA,EAAAA,IAAmBhqG,EAAQS,GAG5C,MAAO,CACLF,OACA0rI,sBAJ4B1rI,EAAKiyG,WAAaw5B,GAK9ClhC,YAAa3vG,QAAQ6pI,GACrBzmB,QAASymB,GAAUzmB,QACpB,GAXex+G,EAhU0CnG,IASxD,IATyD,KAC7D2G,EAAI,qBACJ2rI,EAAoB,YACpBphC,EAAW,QACXyT,EAAO,eACP7+C,EAAc,oBACdusE,EAAmB,QACnB3qI,EAAO,SACP+K,GACDzS,EACC,MAAM,6BAAE8tI,IAAiCjmI,EAAAA,EAAAA,MAEnC0qI,GAAqBzwI,EAAAA,EAAAA,KAAQ,KACjC,GAAK6iH,EAIL,OAAOA,EAAQltE,MAAKtvC,IAAA,IAAC,OAAE+tB,GAAQ/tB,EAAA,OAAK+tB,IAAWo8G,CAAoB,GAAC,GACnE,CAAC3tB,EAAS2tB,KAEP,YACJjI,EAAW,sBAAEE,EAAqB,UAAEnoE,EAAS,uBAAEqoE,EAAsB,aAAE9H,GACrEwH,GAAqBoI,GAAoBpG,cAAgBxlI,GAAM8iI,sBAC5D+I,EAA6BC,EAA2BC,IAA8B1nI,EAAAA,EAAAA,KACvFzC,GAAOC,EAAAA,EAAAA,MAEP,QAAEssB,GAAYnuB,GAAQ,CAAC,GAE7Bgc,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACJ2sG,GAAeohC,IAAyBC,GAC1CzsE,EAAeqiE,EAAAA,GAAAA,iBACjB,GACC,CAACxhI,EAAMuqG,EAAaprC,EAAgBysE,EAAoBD,IAE3D,MAAMpG,GAAwBnkI,EAAAA,EAAAA,KAAY,KACnCpB,GAAS2rI,IAId3P,GAAa,GACbmL,EAA6B,CAC3BjnI,OAAQF,EAAKpJ,GACb24B,OAAQo8G,EACRnG,aAAc9B,IACd,GACD,CAAC1jI,EAAM2rI,EAAsB3P,EAAcmL,EAA8BzD,IAEtEsI,GAAqB5qI,EAAAA,EAAAA,KAAY,KAChCpB,GAAS2rI,GAIdxE,EAA6B,CAC3BjnI,OAAQF,EAAKpJ,GACb24B,OAAQo8G,EACRnG,aAAc,CACZyG,cAAc,IAEhB,GACD,CAACjsI,EAAM2rI,EAAsBxE,IAE1B+E,GAAuB9qI,EAAAA,EAAAA,KAAaiF,KACpCqlI,MAIC1rI,IAASA,EAAK8iI,sBAIZ9iI,EAAK8iI,oBAAoBz8H,IAC/B,CAACrG,EAAM0rI,KAEHvG,EAAqBC,IAA0B19H,EAAAA,EAAAA,KAAS,GACzD29H,GAA0BjkI,EAAAA,EAAAA,KAAaqH,KAC3C7S,EAAAA,EAAAA,GAAU6S,GACV28H,GAAwBD,EAAoB,GAC3C,CAACA,IAEJ,GAAKyG,EAIL,OACE9pI,EAAAA,GAAAA,cAAA,OACEG,UAAU,mCACV3K,MAAQ,uDAGRwK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACw9C,UAAQ,EAACtqE,UAAU,uBAC3BH,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQq8G,EAAmBr8G,OAAQmxC,eAAa,KAGnE5+D,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAI,QAAQ/G,EAAK,0BAEtDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAYa,UACtBvtG,MAAOp1B,EAAK,wBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,aAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAYW,UACtBrtG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACRjxC,UAAWswC,EAAsB,KAAO,OACxClzH,SAAUi6H,EAAqB,aAC/Bx6H,SAAUoyH,EACVhvC,aAAcuwC,KAIlBvjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,eACA28H,GAAuB,uBAGzBrjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYqC,WACtB/uG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYsC,WACtBhvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,SAAU2sG,EAAYX,eAAiBW,EAAYV,SACnDhsG,MAAOp1B,EAAK,gCACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,gBAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYuC,WACtBjvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,WACL6sB,SAAU2sG,EAAYwC,SACtBlvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,YAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYyC,WACtBnvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,kBACL6sB,SAAU2sG,EAAY0C,gBACtBpvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,mBAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAYY,WACtBttG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAIdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,SAAU2sG,EAAY2C,UACtBrvG,MAAOp1B,EAAK,6BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,aAC/Bx6H,SAAUoyH,OAMlBhiI,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ28H,GAAuB,YAE5DrjI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,SAAU2sG,EAAY4C,YACtBtvG,MAAOp1B,EAAK,+BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,eAC/Bx6H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,SAAU2sG,EAAY6C,YACtBvvG,MAAOp1B,EAAK,+BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,eAC/Bx6H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,SAAU2sG,EAAY8C,WACtBxvG,MAAOp1B,EAAK,8BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAGb31G,GACCrsB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,SAAU2sG,EAAY+C,aACtBzvG,MAAOp1B,EAAK,0BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,gBAC/Bx6H,SAAUoyH,QAOlB4H,GACA5pI,EAAAA,GAAAA,cAAA,OACEG,WAAWuG,EAAAA,GAAAA,GACT,UACA28H,GAAuB,YAGzBrjI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,cAAc0L,QAAM,EAACi2B,aAAW,EAACjlC,QAASwpI,GACtDlqI,EAAK,4BAMdE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAAS4xG,EACTthI,QAASijI,EACTlgI,UAAWzD,EAAK,QAChBqQ,SAAUwpD,GAETA,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAIjBH,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQirI,EACR9qI,QAASgrI,EACT1kI,KAAK,oEACLuuB,aAAa,SACbC,eAAgBm2G,EAChBrkG,sBAAoB,IAElB,KC9NV,IAAepoC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAEhC,MAAO,CACLF,OACAqkB,cAAe5kB,EAAO4kB,cACtB4P,WAAWq4B,EAAAA,EAAAA,IAActsD,GACzBkjI,kBAAkBz5B,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAASgjI,iBACvD,GATe1jI,EA7GwCnG,IAStD,IATuD,KAC3D2G,EAAI,UACJi0B,EAAS,cACT5P,EAAa,iBACb6+G,EAAgB,eAChB/jE,EAAc,mBACdylE,EAAkB,QAClB7jI,EAAO,SACP+K,GACDzS,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMorI,EAAkBvxI,QAAQoF,EAAKiyG,WAAajyG,EAAKosI,aAAaC,WAE9DC,GAAenxI,EAAAA,EAAAA,KAAQ,IACtB+nI,EAIE9rI,OAAOq2B,OAAOy1G,GAAkBpzE,MAAK,CAACwK,EAAGC,IAC1CD,EAAE0sE,SACI,EACCzsE,EAAEysE,QACJ,EAGF,IAVA,IAYR,CAAC9D,IAEEqJ,GAAyBnrI,EAAAA,EAAAA,KAAau6G,IAC1CipB,EAAmBjpB,EAAOpsF,OAAQosF,EAAOupB,mBAAqB7gH,GAC9D86C,EAAeqiE,EAAAA,GAAAA,gBAAkC,GAChD,CAACn9G,EAAeugH,EAAoBzlE,IAEjCqtE,GAAsBprI,EAAAA,EAAAA,KAAY,KACtC+9D,EAAeqiE,EAAAA,GAAAA,eAAiC,GAC/C,CAACriE,IAEEstE,GAAkBrrI,EAAAA,EAAAA,KAAau6G,IACnC,GAAIA,EAAOqrB,QACT,OAAOplI,EAAK,kBAId,MAAMivB,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9Bg9G,EAAiB/wB,EAAOupB,iBAAmBr0G,EAAU8qF,EAAOupB,uBAAoBvrI,EAEtF,OAAI+yI,EACK9qI,EAAK,uBAAuBq1B,EAAAA,EAAAA,IAAgBy1G,IAG9C9qI,EAAK,eAAe,GAC1B,CAACA,IAEJ,OACEE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,SACL0uD,WAAS,EACTriD,UAAQ,GAERnQ,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,aAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAKqyB,EAAY,4BAA8B,yBAI/EnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GACjDmI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAa0G,IAAI,QAC3BsrB,EACG,8DACA,6DAGLq4G,EAAa/qI,KAAKo6G,GACjB75G,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKs1G,EAAOpsF,OACZttB,UAAU,sBAEVK,QAASA,IAAMiqI,EAAuB5wB,IAEtC75G,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQosF,EAAOpsF,OACfD,OAAQm9G,EAAgB9wB,GACxBj7C,eAAa,OAKnB5+D,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASm6G,EACT7pI,QAASkqI,EACTnnI,UAAWzD,EAAK,oCAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAIf,KCgQV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAAsD,IAApD,OAAEtB,EAAM,wBAAEurI,GAAyBjqI,EAC1C,MAAMxB,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAC1BukI,GAAWh7B,EAAAA,EAAAA,IAAmBhqG,EAAQS,IACpCwvB,KAAMmB,GAAcpxB,EAAOqxB,OAC7B,cAAEzM,GAAkB5kB,EACpBw0B,GAAYq4B,EAAAA,EAAAA,IAActsD,GAC1B0rI,IAAwB1rI,EAAKiyG,WAAaw5B,GAGhD,MAAO,CACLzrI,OACA6wB,YACAxM,gBACA4P,YACA9F,QAPcnuB,EAAKmuB,QAQnBu9G,sBACAiB,cAAe3sI,EAAKosI,YACpB7hC,YAAa3vG,QAAQ6pI,GACrBvB,iBAAkBuB,GAAUvB,iBAC7B,GApBe1jI,EAvVsCnG,IAepD,IAfqD,WACzDuzI,EAAU,eACVC,EAAc,cACdF,EAAa,eACbxtE,EAAc,KACdn/D,EAAI,UACJ6wB,EAAS,cACTxM,EAAa,iBACb6+G,EAAgB,YAChB34B,EAAW,UACXt2E,EAAS,QACT9F,EAAO,oBACPu9G,EAAmB,QACnB3qI,EAAO,SACP+K,GACDzS,EACC,MAAM,gBAAEyzI,IAAoB5rI,EAAAA,EAAAA,OAErBwiI,EAAaC,IAAkBj8H,EAAAA,EAAAA,IAA6B,CAAC,IAC7DsnE,EAAWqB,IAAgB3oE,EAAAA,EAAAA,IAAS9M,QAAQgyI,KAC5CnxE,EAAWugE,IAAgBt0H,EAAAA,EAAAA,KAAS,IACpCqlI,EAAiCC,EAA+BC,IAAkC5oI,EAAAA,EAAAA,MAClG6oI,EAAaC,IAAkBzlI,EAAAA,EAAAA,IAAS,IACzC9F,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAM6qI,GAAqBzwI,EAAAA,EAAAA,KAAQ,KACjC,MAAMiyI,EAAsBP,EAAiB3J,IAAmB2J,QAAkBlzI,EAIlF,IAAIizI,IAAeQ,GAAwBP,EAA3C,CAIA,GAAID,EAAY,CACd,MAAM5oH,GAAO4M,EAAAA,EAAAA,MAAYE,MAAMpB,KAAKm9G,GAEpC,OAAO7oH,EAAO,CACZuL,OAAQvL,EAAKptB,GACbw1I,YAAaO,EACbO,YAAatrI,EAAK,gBAClBolI,SAAS,EACT9B,sBAAkBvrI,QAChBA,CACN,CAEA,OAAOyzI,CAdP,CAc0B,GACzB,CAAClK,EAAkByJ,EAAeC,EAAYhrI,EAAMirI,KAEvDjvI,EAAAA,EAAAA,KAAU,KACJ2sG,GAAesiC,IAAmBjB,GACpCzsE,EAAeqiE,EAAAA,GAAAA,mBACjB,GACC,CAACxhI,EAAMuqG,EAAaprC,EAAgBysE,EAAoBiB,KAE3DjvI,EAAAA,EAAAA,KAAU,KACR+lI,EAAeiI,GAAoBQ,aAAe,CAAC,GACnDe,GAAgBvB,GAAoBsB,aAAe,IAAIrqD,OAAO,EAhElC,KAiE5BxS,EAAaz1E,QAAQgyI,IACrB5Q,GAAa,EAAM,GAClB,CAAC2Q,EAAeC,EAAYhB,IAE/B,MAAM9H,GAAyB1iI,EAAAA,EAAAA,KAAaqH,IAC1C,MAAM,KAAEyB,GAASzB,EAAEwV,OAMnB0lH,GAAgBx9G,IAAC,UACZA,EACH,CAACjc,IANgCuH,EAMC0U,EAAEjc,IAL7BuH,QAAQ9X,IADjB,IAAmC8X,CAOjC,IACF4+D,GAAa,EAAK,GACjB,IAEGk1D,GAAwBnkI,EAAAA,EAAAA,KAAY,KACnCyrI,IAIL7Q,GAAa,GACb8Q,EAAgB,CACd5sI,OAAQF,EAAKpJ,GACb24B,OAAQs9G,EACRT,YAAa1I,EACbwJ,gBACA,GACD,CAACL,EAAgBC,EAAiB9sI,EAAKpJ,GAAI8sI,EAAawJ,IAErDG,GAAqBjsI,EAAAA,EAAAA,KAAY,KAChCyrI,IAILC,EAAgB,CACd5sI,OAAQF,EAAKpJ,GACb24B,OAAQs9G,EACRT,YAAa,CAAC,IAEhBa,IAAgC,GAC/B,CAACjtI,EAAKpJ,GAAIq2I,EAAgCJ,EAAgBC,IAEvDZ,GAAuB9qI,EAAAA,EAAAA,KAAaiF,MACpC5F,EAAAA,EAAAA,IAAiBT,KAIjB0rI,GAAwB1rI,EAAKosI,cAI7BpsI,EAAKiyG,WAIDjyG,EAAKosI,YAAa/lI,MACzB,CAACrG,EAAM0rI,IAEJ4B,GAAenyI,EAAAA,EAAAA,KAAQ,KAC3B,GAAIyxI,IAAehB,EACjB,OAGF,GAAIA,EAAmB5E,QACrB,OAAOplI,EAAK,kBAGd,MAAM8qI,EAAiBd,EAAmB1G,iBACtCr0G,EAAU+6G,EAAmB1G,uBAC7BvrI,EAEJ,OAAI+yI,EACK9qI,EAAK,uBAAuBq1B,EAAAA,EAAAA,IAAgBy1G,IAG9C9qI,EAAK,eAAe,GAC1B,CAACgrI,EAAYhB,EAAoB/6G,EAAWjvB,IAEzC2rI,GAA0BnsI,EAAAA,EAAAA,KAAaqH,IAC3C,MAAM,MAAEgJ,GAAUhJ,EAAEwV,OACpBkvH,EAAe17H,GACf4+D,GAAa,EAAK,GACjB,IAEH,GAAKu7D,EAIL,OACE9pI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACw9C,UAAQ,EAACtqE,UAAU,uBAC3BH,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQq8G,EAAmBr8G,OAC3BD,OAAQg+G,EACR5sE,eAAa,KAIjB5+D,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuB0G,IAAI,QAAQ/G,EAAK,uBAEtDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,QAASn8B,QAAQ8oI,EAAY8C,YAC7BxvG,MAAOp1B,EAAKqyB,EAAY,6BAA+B,4BACvD6xG,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAGb7vG,GACCnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,QAASn8B,QAAQ8oI,EAAY8J,cAC7Bx2G,MAAOp1B,EAAK,yBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,gBAC/Bx6H,SAAUoyH,KAIf7vG,GACCnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,QAASn8B,QAAQ8oI,EAAY+J,cAC7Bz2G,MAAOp1B,EAAK,yBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,gBAC/Bx6H,SAAUoyH,KAIhBhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,iBACL6sB,QAASn8B,QAAQ8oI,EAAY1iI,gBAC7Bg2B,MAAOp1B,EAAKqyB,EAAY,0BAA4B,gCACpD6xG,UAAQ,EACR7zH,SAAUi6H,EAAqB,kBAC/Bx6H,SAAUoyH,MAGZ7vG,GACAnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,WACL6sB,QAASn8B,QAAQ8oI,EAAYgK,UAC7B12G,MAAOp1B,EAAK,qBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,YAC/Bx6H,SAAUoyH,KAIhBhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,QAASn8B,QAAQ8oI,EAAY4C,aAC7BtvG,MAAOp1B,EAAK,qBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,eAC/Bx6H,SAAUoyH,MAGZ7vG,GACAnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,cACL6sB,QAASn8B,QAAQ8oI,EAAY6C,aAC7BvvG,MAAOp1B,EAAK,wBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,eAC/Bx6H,SAAUoyH,KAIhBhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,QAASn8B,QAAQ8oI,EAAY2I,WAC7Br1G,MAAOp1B,EAAK,sBACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,aAC/Bx6H,SAAUoyH,KAGdhiI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,aACL6sB,QAASn8B,QAAQ8oI,EAAYiK,YAC7B32G,MAAOp1B,EAAK,2BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,cAC/Bx6H,SAAUoyH,KAGb31G,GACCrsB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,eACL6sB,QAASn8B,QAAQ8oI,EAAY+C,cAC7BzvG,MAAOp1B,EAAK,0BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,gBAC/Bx6H,SAAUoyH,MAId7vG,GACAnyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAK,YACL6sB,QAASn8B,QAAQ8oI,EAAYkK,WAC7B52G,MAAOp1B,EAAK,4BACZkkI,UAAQ,EACR7zH,SAAUi6H,EAAqB,aAC/Bx6H,SAAUoyH,KAKf4H,GACC5pI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAAoB0G,IAAI,QAClC/G,EAAK,kCAIRqyB,GACAnyB,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR33B,GAAG,cACHogC,MAAOp1B,EAAK,iBACZ8P,SAAU67H,EACV97H,MAAOy7H,EACPj7H,SAAUy5H,EACVz/F,UAlTkB,KAsTrB5nB,IAAkBwoH,IAAmBnB,IAAwBkB,GAC5D9qI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,SAAS0L,QAAM,EAACi2B,aAAW,EAACjlC,QAAS0qI,GACjDprI,EAAK,2BAMdE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9C,EACT1sE,QAASijI,EACTlgI,UAAWzD,EAAK,QAChBqQ,SAAUwpD,GAETA,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAIf2qI,GACA9qI,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQmsI,EACRhsI,QAASksI,EACT5lI,KAAK,+CACLuuB,aAAch0B,EAAK,yBACnBi0B,eAAgBw3G,EAChB1lG,sBAAoB,IAGpB,K,gBC/UV,MAoMA,IAAepoC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IACxBy4F,aAAcC,GAAqBn5F,EAAOqxB,OAC5C,QAAEktF,EAAO,iBAAEklB,EAAgB,sBAAE2K,IAA0BpkC,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAW,CAAC,EAC9F+zB,EAAYj0B,IAAQssD,EAAAA,EAAAA,IAActsD,IAChCowB,QAASuoC,GAAoBl5D,EAAO0wB,aAAe,CAAC,EACtD29G,EAAwBruI,EAAO+0C,WAAWs5F,sBAE1C7G,EAAmBjnI,IAASA,EAAKiyG,YAAaE,EAAAA,EAAAA,IAAiBnyG,EAAM,aAErE+tI,EAAsB9G,KAAqBxmI,EAAAA,EAAAA,IAAiBT,SAA+BrG,IAAtBqG,EAAKwlF,mBACnD7rF,IAA1Bm0I,GAAuC9tI,EAAKwlF,cAAgBsoD,GAG7DnqG,MAAO8zB,EAAW,eAClBmB,EAAc,cACdK,EAAa,aACbE,IACEhhD,EAAAA,EAAAA,IAAe1Y,GAAQ4pF,WAE3B,MAAO,CACLwkD,sBAAuBjzI,QAAQoF,GAAQ6tI,GACvC7vB,UACAklB,mBACAtqC,mBACA3kE,YACA0kC,kBACAlB,cACAuhC,YAAapgC,EACbK,gBACAE,eACA8tE,mBACA5iH,cAAe5kB,EAAO4kB,cACtB0pH,sBACD,GAnCevuI,EApMkCnG,IAoBhD,IApBiD,OACrD6G,EAAM,SACN8tI,EAAQ,QACRhwB,EAAO,iBACPklB,EAAgB,iBAChBtqC,EAAgB,UAChB3kE,EAAS,SACTnoB,EAAQ,cACRmtD,EAAa,gBACbN,EAAe,aACfQ,EAAY,YACZ6/B,EAAW,YACXvhC,EAAW,cACXpzC,EAAa,iBACb4iH,EAAgB,sBAChB4G,EAAqB,oBACrBE,EAAmB,QACnBhtI,EAAO,eACPo+D,EAAc,mBACdylE,GACDvrI,EACC,MAAM,SACJgnC,EAAQ,mBAAEipD,EAAkB,gBAAE60C,EAAe,yBAAE8P,IAC7C/sI,EAAAA,EAAAA,MACEU,GAAOC,EAAAA,EAAAA,KAEPi8B,GAAWthC,EAAAA,EAAAA,IAAyB,MAEpC6d,GAAe7d,EAAAA,EAAAA,IAAuB,OAErC0xI,EAAgBC,IAAqBzmI,EAAAA,EAAAA,MAEtC0mI,GAAWjzI,EAAAA,EAAAA,KAAQ,IAChB6yI,GAAY9K,EAAmB9rI,OAAO02B,KAAKo1G,GAAoB,IACrE,CAACA,EAAkB8K,IAEhBn+E,GAAY10D,EAAAA,EAAAA,KAAQ,KAExB,MAAM01B,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KACpC,IAAKsuF,IAAYntF,EACf,MAAO,GAGT,MAAMT,GAAU2oE,EAAAA,EAAAA,IACdilB,EAAQz8G,KAAIC,IAAA,IAAC,OAAE+tB,GAAQ/tB,EAAA,OAAK+tB,CAAM,IAClCsB,EACA+nE,GAGF,OAAOo1C,EAAW59G,EAAQC,QAAQd,IAAY6+G,EAASv3I,SAAS04B,KAAWa,CAAO,GACjF,CAAC4tF,EAASplB,EAAkBo1C,EAAUI,IAEnCh9D,GAAej2E,EAAAA,EAAAA,KAAQ,KAE3B,MAAM01B,GAAYD,EAAAA,EAAAA,MAAYE,MAAMpB,KAC9B3D,GAAY6E,EAAAA,EAAAA,MAAYnB,MAAMC,KAC9B2+G,EAAyBzzI,QAAQ68D,GACjC62E,EAAaD,EAEd11E,GAAkBtnC,EAAAA,EAAAA,IAAkBsnC,EAAiB9nC,EAAW4mC,GAAe,GADhF5H,EAGJ,OAAO1+B,EAAAA,EAAAA,KACLR,EAAAA,GAAAA,IAAO,IACF29G,KACCD,GAAyBl1E,GAAqB,MAC9Ck1E,GAAyBp1E,GAAsB,KAClD5oC,QAAQq5D,IACT,MAAM1lE,EAAO6M,EAAU64D,GACvB,OAAK1lE,IAIGiQ,GAAajQ,EAAKq1E,uBAAwBpmB,EAAAA,EAAAA,IAAUjvD,OACrDgqH,IAAaI,EAASv3I,SAAS6yF,GAAW,IAEnD39D,GACA,EACD,GACA,CAAC8jC,EAAW8I,EAAiBlB,EAAa0B,EAAcF,EAAehlC,EAAW+5G,EAAUI,KAExF1hH,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBjzB,EAAWy3E,EAAcx2E,QAAQ68D,IAE5E2kE,GAAoBh7H,EAAAA,EAAAA,KAAaxK,IACjCo3I,GACFpJ,EAAoBhuI,GAAI,GACxBuoE,EAAgBqiE,EAAAA,GAAAA,sBAEhBrD,IACA99F,EAAS,CAAEzpC,OACb,GACC,CAACunI,EAAiB6P,EAAUpJ,EAAoBzlE,EAAgB9+B,IAE7DqwC,GAAqBtvE,EAAAA,EAAAA,KAAaqH,IACtC6gF,EAAmB,CAAE3lD,MAAOl7B,EAAEwV,OAAOxM,OAAQ,GAC5C,CAAC63E,IACE1yE,GAAgBsX,EAAAA,GAAAA,GAA0B7T,EAAcvO,GAAW/B,IACnE2iB,GAAeA,EAAYpvB,OAAS,GACtC8+H,EAAkB1vG,GAAuB,IAAX3iB,EAAe,EAAIA,GACnD,GACC,oBAAoB,GAEjBwkI,GAAgCntI,EAAAA,EAAAA,KAAY,KAChD+sI,OAAkBx0I,EAAU,GAC3B,IAEG60I,GAAiCptI,EAAAA,EAAAA,KAAY,KACjD6sI,EAAyB,CAAE/tI,SAAQgmC,WAAY2nG,GAAwB,GACtE,CAACA,EAAuB3tI,EAAQ+tI,IA8BnC,OA5BAjyH,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IA2BRe,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACZ+rI,GAbDlsI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBAAqB0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAC5DmI,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACLrsB,MAAOgmD,EACP/lD,SAAUg/D,EACVjiD,YAAa7sB,EAAK,aAStBE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZ8rI,GACCjsI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CAACnpB,KAAK,QAAQ0L,QAAM,EAAChP,QAASksI,GACrC1sI,EAAAA,GAAAA,cAAA,YAAOF,EAAK,uBACZE,EAAAA,GAAAA,cAAColF,GAAAA,EAAQ,CAAClwD,MAAOp1B,EAAK,sBAAuBm1B,QAAS82G,KAExD/rI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBACVL,EAAKisI,EAAwB,+BAAiC,mCAIrE/rI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACZyqB,GAAapvB,OACZwE,EAAAA,GAAAA,cAAC4sB,GAAAA,EAAc,CACbzsB,UAAU,4BACV0sB,MAAOyiD,EACPhiD,WAAYzC,EACZ8hH,gBAAiB7zI,QAAQ68D,GACzB7wD,IAAKyT,EACLmU,UAAW5X,GAEV8V,EAAYnrB,KAAK3K,IAChBkL,SAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACLqL,UAAU,kCAEVK,QAASA,IAAM85H,EAAkBxlI,GACjCw/D,gBAtDgBs4E,EAsDuB93I,EArD9C83I,IAAarqH,GAAkB4iH,EAA+B,CAAC,CACpE/kI,MAAON,EAAK,iCACZgE,KAAM,OACNqgE,QAASA,KACPkoE,EAAkBO,EAAS,SAJ0B/0I,IAuD3CmI,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQ34B,EAAI8pE,eAAa,KAxD1D,IAAgCguE,CA0DnB,KAEA11C,IAAetsE,GAAgBA,EAAYpvB,OAO9CwE,EAAAA,GAAAA,cAACqtB,GAAAA,EAAO,MANRrtB,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACX66D,cAAe,EACftvH,IAAI,gBACJgB,KAAM4sB,EAAY,uBAAyB,uBAOlDgzG,GACCnlI,EAAAA,GAAAA,cAAC6sI,GAAAA,EAAiB,CAChB/tI,OAAQhG,QAAQszI,GAChB3+G,OAAQ2+G,EACRntI,QAASwtI,IAGT,KC1JV,IAAehvI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,IACxBwvB,KAAMmB,EAAW8nE,aAAcC,GAAqBn5F,EAAOqxB,MAC7DktF,GAAUvU,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAS89G,QAGpD,MAAO,CACLA,UACAntF,YACA+nE,mBACA3kE,UANgBj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAOvC,GAZeR,EA7DgDnG,IAS9D,IAT+D,UACnEw3B,EAAS,iBACT+nE,EAAgB,QAChBolB,EAAO,UACP/pF,EAAS,eACTkrC,EAAc,mBACdylE,EAAkB,QAClB7jI,EAAO,SACP+K,GACDzS,GACC2iB,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAM8uD,GAAY10D,EAAAA,EAAAA,KAAQ,KACxB,GAAK6iH,GAAYntF,EAIjB,OAAOkoE,EAAAA,EAAAA,IACLilB,EAAQ3tF,QAAQsrF,IAAYA,EAAOqrB,UAASzlI,KAAIC,IAAA,IAAC,OAAE+tB,GAAQ/tB,EAAA,OAAK+tB,CAAM,IACtEsB,EACA+nE,EACD,GACA,CAAColB,EAASntF,EAAW+nE,IAElBqsC,GAA6B7jI,EAAAA,EAAAA,KAAastI,IAC9C9J,EAAmB8J,GACnBvvE,EAAeqiE,EAAAA,GAAAA,qBAAuC,GACrD,CAACoD,EAAoBzlE,IAExB,OACEr9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU+uG,eAAa,GACnCnhD,EACCA,EAAUtuD,KAAI,CAAC3K,EAAIwvB,IACjBtkB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP1oB,IAAKzP,EACL++H,cAAevvG,EACfnkB,UAAU,kCAEVK,QAASA,IAAM2iI,EAA2BruI,IAE1CkL,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CAACE,OAAQ34B,EAAI8pE,eAAa,OAI9C5+D,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CACX66D,cAAe,EACftvH,IAAI,gBACJgB,KAAM4sB,EAAY,uBAAyB,uBAK/C,K,gBC1CV,SAAS26G,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeC,MAAOC,EAAU,EAAGhrH,KAAMirH,GAAWN,GACjEE,YAAaK,EAAeH,MAAOI,EAAU,EAAGnrH,KAAMorH,GAAWR,EACzE,OAAIE,GAAiBI,EAAsB14H,OAAOs4H,GAAiBt4H,OAAO04H,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,CAClB,CAEA,MAiUA,IAAe5vI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMuiB,KAA6B,IAA3B,OAAE9hB,GAAQ8hB,EACjB,MAAM,QAAE6qD,EAAO,eAAE0iE,IAAmBp3H,EAAAA,EAAAA,IAAe1Y,GAAQs+H,WAAW3kE,SAASl5D,GACzEF,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAGhC,MAAO,CACLigI,gBAAiBtzD,EACjB2iE,uBAAwBD,EACxBvvI,OACAi0B,UANgBj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAOvC,GAXeR,EAjU6BnG,IAS3C,IAT4C,OAChD6G,EAAM,KACNF,EAAI,gBACJmgI,EAAe,uBACfqP,EAAsB,SACtB1jI,EAAQ,UACRmoB,EAAS,QACTlzB,EAAO,eACPo+D,GACD9lE,EACC,MAAM,yBACJo2I,EAAwB,iBACxB19G,EAAgB,uBAChB29G,EAAsB,yBACtBC,EAAwB,iCACxBC,EAAgC,oBAChCC,IACE3uI,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAENiuI,EAA6BC,EAA2BC,IAA8B3rI,EAAAA,EAAAA,MACtF4rI,EAAoBC,EAAkBC,IAAqB9rI,EAAAA,EAAAA,MAC3D+rI,EAAgBC,IAAqB3oI,EAAAA,EAAAA,OACrC22H,EAAoBC,EAAkBC,IAAqBl6H,EAAAA,EAAAA,MAC3DisI,EAAgBC,IAAqB7oI,EAAAA,EAAAA,OAE5CsU,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMyvI,GAAuBr1I,EAAAA,EAAAA,KAAQ,KACnC,GAAKglI,EACL,OAAOA,EACJ9+E,MAAK7/C,IAAA,IAAC,WAAEivI,GAAYjvI,EAAA,OACnBivI,GAAeA,GAAaC,EAAAA,GAAAA,MAAkBC,GAAAA,GAAsB,GAAK,GACzE,GACH,CAACxQ,IACE1iI,GAAcC,EAAAA,EAAAA,MACpB6nC,EAAAA,GAAAA,IAAY,KACV9nC,GAAa,GACZ+yI,EAAuB,SAAO72I,GAEjC,MAAMi3I,GAAmBz1I,EAAAA,EAAAA,KAAQ,IAAM6E,IAAQyqF,EAAAA,EAAAA,IAAgBzqF,IAAO,CAACA,IACjE6wI,EAAgB1Q,GAAiBrvF,MAAKnvC,IAAA,IAAC,YAAEotI,GAAaptI,EAAA,OAAKotI,CAAW,IACtE+B,EAAoBF,EAAoB,GAAEnuG,EAAAA,MAAkBmuG,IAAqBC,GAAe9+D,KAChGg/D,GAAkB51I,EAAAA,EAAAA,KAAQ,KACd6E,GAAMokE,UAAY+7D,EAAkBA,GAAiB9vG,QAAO3wB,IAAA,IAAC,YAAEqvI,GAAarvI,EAAA,OAAMqvI,CAAW,MAC7Fj/E,KAAK8+E,KACpB,CAAC5uI,GAAMokE,UAAW+7D,IAOf6Q,GAAe5vI,EAAAA,EAAAA,KAAayyB,IAChC,MAAM,KACJk+C,EAAI,MAAE7vE,EAAK,gBAAEgyB,EAAe,WAAEu8G,EAAU,WAAEQ,GACxCp9G,EACJ67G,EAAuB,CACrBxvI,SACA6xE,OACA7vE,QACAgyB,kBACAu8G,aACAQ,aACA3P,WAAW,GACX,GACD,CAACphI,EAAQwvI,IAENwB,GAAc9vI,EAAAA,EAAAA,KAAayyB,IAC/Bw8G,EAAkBx8G,GAClBq8G,GAAkB,GACjB,CAACA,IAEE19D,GAAepxE,EAAAA,EAAAA,KAAY,KAC1BgvI,IACLY,EAAaZ,GACbC,OAAkB12I,GAClBw2I,IAAmB,GAClB,CAACA,EAAmBa,EAAcZ,IAE/Be,GAAuB/vI,EAAAA,EAAAA,KAAY,KACvC+9D,EAAeqiE,EAAAA,GAAAA,WAA6B,GAC3C,CAACriE,IAEEiyE,GAAsBhwI,EAAAA,EAAAA,KAAY,KAClCyvI,GACFK,EAAYL,EACd,GACC,CAACK,EAAaL,IAEXQ,GAAyBjwI,EAAAA,EAAAA,KAAY,KACzCwuI,EAAiC,CAAE1vI,WACnC8vI,GAA4B,GAC3B,CAAC9vI,EAAQ8vI,EAA4BJ,IAElC0B,GAAiBlwI,EAAAA,EAAAA,KAAayyB,IAClCg8G,EAAoB,CAAE3vI,SAAQ2zB,WAC9BsrC,EAAeqiE,EAAAA,GAAAA,WAA6B,GAC3C,CAACthI,EAAQi/D,EAAgB0wE,IAEtB0B,GAAenwI,EAAAA,EAAAA,KAAayyB,IAChC87G,EAAyB,CAAEzvI,SAAQ6xE,KAAMl+C,EAAOk+C,MAAO,GACtD,CAAC7xE,EAAQyvI,IAEN6B,GAAcpwI,EAAAA,EAAAA,KAAayyB,IAC/B08G,EAAkB18G,GAClByqG,GAAkB,GACjB,CAACA,IAEE1xB,GAAexrG,EAAAA,EAAAA,KAAY,KAC1BkvI,IACLiB,EAAajB,GACbC,OAAkB52I,GAClB4kI,IAAmB,GAClB,CAACA,EAAmBgT,EAAcjB,IAE/Bx+D,IAAW1wE,EAAAA,EAAAA,KAAa2wE,KAC5B7M,EAAAA,GAAAA,IAAoB6M,GACpBhgD,EAAiB,CACfv6B,QAASoK,EAAK,eACd,GACD,CAACA,EAAMmwB,IAEJ0/G,GAAoB59G,IACxB,MAAM,MACJo7G,EAAQ,EAAC,WAAEgC,EAAU,WAAER,EAAU,YAAE1B,EAAW,UAAE2C,EAAS,UAAEpQ,GACzDztG,EACJ,IAAIxsB,EAAO,GASX,GAPEA,GADGi6H,GAAa2P,GAAchC,EAAQgC,EAC/BrvI,EAAK,UAAWqvI,EAAahC,GAC3BA,EACFrtI,EAAK,eAAgBqtI,GAErBrtI,EAAK,eAGV0/H,EAEF,OADAj6H,GAAS,MAAazF,EAAK,aACpByF,EAOT,GAJIqqI,IACFrqI,GAAS,MAAazF,EAAK,eAAgB8vI,WAG1B/3I,IAAfs3I,GAA4BhC,IAAUgC,EACxC5pI,GAAS,MAAazF,EAAK,2BACtB,GAAI6uI,EAAY,CACrB,MAAMkB,EAAwC,KAAhClB,GAAaC,EAAAA,GAAAA,OAC3BrpI,GAAS,MAEPA,GADEsqI,EAAO,EACD/vI,EAAK,wBAAwBgwI,EAAAA,GAAAA,GAAgBhwI,EAAM+vI,IAEnD/vI,EAAK,qBAEjB,MAAWmtI,IACT1nI,GAAS,MAAazF,EAAK,gBAG7B,OAAOyF,CAAI,EAGPwqI,GAAsBh+G,IAC1B,MAAM,MACJo7G,EAAQ,EAAC,WAAEgC,EAAU,UAAE3P,EAAS,WAAEmP,GAChC58G,EACJ,OAAIytG,EACK,wBAEL2P,GAAchC,EAAQgC,EACjB,yBAELR,GAC4C,KAAhCA,GAAaC,EAAAA,GAAAA,QACf,EACH,uBAGJ,uBAAuB,EAG1BoB,GAAyBj+G,IAC7B,MAAMk+G,EAAU,GA8BhB,OA7BAA,EAAQpsI,KAAK,CACXzD,MAAON,EAAK,QACZgE,KAAM,OACNqgE,QAASA,IAAM6L,GAASj+C,EAAOk+C,QAG5Bl+C,EAAOk7G,aAAgBl7G,EAAOytG,WACjCyQ,EAAQpsI,KAAK,CACXzD,MAAON,EAAK,QACZgE,KAAM,OACNqgE,QAASA,IAjJKpyC,KAClB47G,EAAyB,CAAEvvI,SAAQ2zB,WACnCsrC,EAAeqiE,EAAAA,GAAAA,WAA6B,EA+IzBwQ,CAAWn+G,KAIzBA,EAAOytG,UAQVyQ,EAAQpsI,KAAK,CACXzD,MAAON,EAAK,cACZgE,KAAM,SACNqgE,QAASA,IAAMurE,EAAY39G,GAC3B0T,aAAa,IAXfwqG,EAAQpsI,KAAK,CACXzD,MAAON,EAAK,gBACZgE,KAAM,SACNqgE,QAASA,IAAMirE,EAAYr9G,GAC3B0T,aAAa,IAUVwqG,CAAO,EAGhB,OACEjwI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXp/B,OAAQs/B,GAAAA,EAAAA,OACRpuE,KAAMk0I,EAAAA,IACNhwI,UAAU,iBAEZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAA0BL,EAAZqyB,EAAiB,yBAAiC,qBAE9E68G,GACChvI,EAAAA,GAAAA,cAACqxE,GAAU,CACTvB,WAAYk/D,EACZj/D,SAAW7xE,GAAMokE,eAAkCzqE,EAAtBy3I,EAC7BlvI,MAAyBN,EAAlB5B,GAAMokE,UAAiB,aAAqB,qCAGvDtiE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU+uG,eAAa,GACpClvG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACgE,IAAI,SAASpE,UAAU,cAAcK,QAAS6uI,GAC1DvvI,EAAK,oBAELmvI,IAAoBA,EAAgBzzI,SAAWwE,EAAAA,GAAAA,cAACg5D,GAAAA,EAAY,CAACzzD,KAAK,iBAAiBhB,IAAI,YACzF0qI,GAAiBxvI,KAAKsyB,GACrB/xB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP8xC,YAAa/+D,EAAAA,GAAAA,cAAA,KAAGG,UAAY,mCAAkC4vI,GAAmBh+G,OACjFwgC,cAAc,OACdC,WAAS,EAEThyD,QAASA,IAAMgvI,EAAez9G,GAC9BuiC,eAAgB07E,GAAsBj+G,GACtCxtB,IAAKwtB,EAAOk+C,MAEZjwE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,sBAAsB4xB,EAAO3xB,OAAS2xB,EAAOk+C,MAC7DjwE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B8oI,GAAiB59G,OAIxB/xB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkBoE,IAAI,cAAczE,EAAK,yBAEvD4tI,GAA0B50I,QAAQ40I,EAAuBlyI,SACxDwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU+uG,eAAa,GACpClvG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaoE,IAAI,SAASzE,EAAK,iBAC5CE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPnpB,KAAK,SACL2hC,aAAW,EACXlhC,IAAI,SACJ/D,QAASytI,GAETjuI,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,2BAE/B4tI,GAAwBjuI,KAAKsyB,GAC5B/xB,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP8xC,YAAa/+D,EAAAA,GAAAA,cAAA,KAAGG,UAAY,mCAAkC4vI,GAAmBh+G,OACjFwgC,cAAc,OACdC,WAAS,EAEThyD,QAASA,IAAMgvI,EAAez9G,GAC9BuiC,eAAgB07E,GAAsBj+G,GACtCxtB,IAAKwtB,EAAOk+C,MAEZjwE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAS4xB,EAAO3xB,OAAS2xB,EAAOk+C,MAChDjwE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAW0G,IAAI,QAC5B8oI,GAAiB59G,SAO9B/xB,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQkvI,EACR/uI,QAASivI,EACT9tI,MAAON,EAAK,yBACZyF,KAAMzF,EAAK,4BACX+lC,sBAAoB,EACpB/R,aAAch0B,EAAK,aACnBi0B,eAAgBw7G,IAElBvvI,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQqvI,EACRlvI,QAASovI,EACTjuI,MAAON,EAAK,cACZyF,KAAMzF,EAAK,eACX+lC,sBAAoB,EACpB/R,aAAch0B,EAAK,gBACnBi0B,eAAgB28C,IAElB1wE,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQy9H,EACRt9H,QAASw9H,EACTr8H,MAAON,EAAK,cACZyF,KAAMzF,EAAK,kBACX+lC,sBAAoB,EACpB/R,aAAch0B,EAAK,UACnBi0B,eAAgB+2E,IAEd,KC3VJslC,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACN36G,IAAK,MACL46G,KAAM,QAEFC,GAA6BH,GAAoBC,KA6OvD,IAAe7yI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM,cAAE4wI,IAAkBp6H,EAAAA,EAAAA,IAAe1Y,GAAQs+H,WAAW3kE,SAASl5D,GAErE,MAAO,CACLqyI,gBACD,GANe/yI,EAhO4BnG,IAM1C,IAN2C,OAC/C6G,EAAM,cACNqyI,EAAa,SACbzmI,EAAQ,QACR/K,EAAO,eACPo+D,GACD9lE,EACC,MAAM,uBAAEq2I,EAAsB,iBAAE8C,IAAqBtxI,EAAAA,EAAAA,MAE/CU,GAAOC,EAAAA,EAAAA,MACN4wI,EAAkBC,EAAcC,IAAiBtuI,EAAAA,EAAAA,MACjD6vB,EAAiB0+G,IAAsBlrI,EAAAA,EAAAA,KAAS,IAChDxF,EAAO23F,IAAYnyF,EAAAA,EAAAA,IAAS,KAC5BmrI,EAAkBC,IAAuBprI,EAAAA,EAAAA,IAAiB0V,KAAKC,MAAQi1H,KACvES,EAAsBC,IAA2BtrI,EAAAA,EAAAA,IAAS,cAC1DurI,EAAkBC,IAAuBxrI,EAAAA,EAAAA,IAA6B,KACtEyrI,EAAqBC,IAA0B1rI,EAAAA,EAAAA,IAAS,MACxD2rI,EAAiBC,IAAsB5rI,EAAAA,EAAAA,KAAS,IAEvDsU,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVrE,EAAAA,EAAAA,IAAc8E,IAAwB,IAAtB+xI,GAAiB/xI,EAC/B,GAAI+xI,IAAqBhB,EACzB,GAAKA,EAOE,CACL,MACErwI,MAAOsxI,EAAY,WAAEvC,EAAU,WAAER,EAAYv8G,gBAAiBu/G,GAC5DlB,EAMJ,GALIiB,GAAc35C,EAAS25C,GACvBvC,IACFmC,EAAuBlB,GAAqBr7I,SAASo6I,GAAcA,EAAW5/F,WAAa,UAC3F6hG,EAAoBjC,IAElBR,EAAY,CACd,MAAMiD,GAAchD,EAAAA,GAAAA,MAAkB4B,GACtCU,EAAwB,UACxBF,EAAwD,IAApChtI,KAAK2Y,IAAIgyH,EAAYiD,GAC3C,CACID,GACFb,GAAmB,EAEvB,MAvBE/4C,EAAS,IACTm5C,EAAwB,aACxBI,EAAuB,KACvBN,EAAsC,KAAlBpC,EAAAA,GAAAA,MAAyB4B,IAC7CY,EAAoB,IACpBN,GAAmB,EAkBrB,GACC,CAACL,IAEJ,MAAMoB,GAAwBvyI,EAAAA,EAAAA,KAAaqH,IACzCmqI,EAAmBnqI,EAAEwV,OAAO8Y,QAAQ,GACnC,IAEGmjE,GAAoB94F,EAAAA,EAAAA,KAAaqH,IACrCoxF,EAASpxF,EAAEwV,OAAOxM,MAAM,GACvB,IAEGmiI,GAA+BxyI,EAAAA,EAAAA,KAAaqH,IAChDyqI,EAAoBx8H,OAAOm9H,SAASprI,EAAEwV,OAAOxM,MAAO,IAAI,GACvD,IAEGqiI,GAAyB1yI,EAAAA,EAAAA,KAAa8iB,IAC1C4uH,EAAoB5uH,EAAKgW,WACzBy4G,GAAe,GACd,CAACA,IAEEoB,GAAkB3yI,EAAAA,EAAAA,KAAY,KAClCkyI,GAAmB,GACnB,MAAMrC,EAAqC,WAAxBkC,EAAmCF,EAAmBv8H,OAAOy8H,GAChF,IAAI1C,EACJ,OAAQsC,GACN,IAAK,SACHtC,GAAaC,EAAAA,GAAAA,OAAmBmC,EAAmBz1H,KAAKC,OAAS,IACjE,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACHozH,GAAaC,EAAAA,GAAAA,MAAkByB,GAAoBY,GAAwB,IAC3E,MACF,IAAK,YACHtC,EAAa,EACb,MACF,QACEA,OAAa92I,EAGb44I,EACF7C,EAAuB,CACrB39D,KAAMwgE,EAAcxgE,KACpB7xE,SACAgC,QACAgyB,kBACAu8G,aACAQ,eAGFuB,EAAiB,CACftyI,SACAgC,QACAgyB,kBACAu8G,aACAQ,eAGJ9xE,EAAeqiE,EAAAA,GAAAA,QAA0B,GACxC,CACDthI,EAAQ2yI,EAAkBI,EAAkBvD,EAAwB6C,EACpEC,EAAkBt+G,EAAiB6+G,EAAsBI,EAAqBjxI,EAAOi9D,IAGvF,OACEr9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,qBACZozE,SAAUpzE,EAAK,gCACfm1B,QAAS7C,EACTxiB,SAAUiiI,KAGd7xI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRtsB,UAAU,YACVwsB,YAAa7sB,EAAK,gBAClB6P,MAAOvP,EACPwP,SAAUwoF,IAEZp4F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,kBAEvCE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBL,EAAK,kBACtCE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,gBACL2mC,QAAS,CACP,CACEp/B,MAAO,OACPulB,MAAOp1B,EAAK,QAAS,IAEvB,CACE6P,MAAO,MACPulB,MAAOp1B,EAAK,OAAQ,IAEtB,CACE6P,MAAO,OACPulB,MAAOp1B,EAAK,QAAS,IAEvB,CACE6P,MAAO,YACPulB,MAAOp1B,EAAK,YAEd,CACE6P,MAAO,SACPulB,MAAOp1B,EAAK,oCAGhB8P,SAAUshI,EACVh9D,SAAU+8D,IAEc,WAAzBA,GACCjxI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,eAAeI,QAAM,EAACC,QAASowI,IAC9C5a,EAAAA,GAAAA,IAAel2H,EAAMixI,GAAkB,KAAEx3G,EAAAA,GAAAA,IAAWz5B,EAAMixI,IAG/D/wI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,oBAErCsyB,GACApyB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBL,EAAK,sBACtCE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,eACL2mC,QAAS,IACJqhG,GAAqB3wI,KAAKyyI,IAAC,CAAQviI,MAAOuiI,EAAE3iG,WAAYra,MAAOg9G,MAClE,CACEviI,MAAO,IACPulB,MAAOp1B,EAAK,YAEd,CACE6P,MAAO,SACPulB,MAAOp1B,EAAK,mCAGhB8P,SAAU0hI,EACVp9D,SAAUm9D,IAEa,WAAxBA,GACCrxI,EAAAA,GAAAA,cAAA,SACEG,UAAU,2BACVyB,KAAK,SACLwb,IAAI,IACJT,IAAI,QACJhN,MAAOwhI,EACPvhI,SAAUkiI,IAGd9xI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,mBAGzCE,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,SAAO,EACP1vB,QAASyxI,EACT9hI,SAAUohI,EACVhuI,UAA2BzD,EAAhB2wI,EAAqB,WAAmB,eAEnDzwI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAGjBH,EAAAA,GAAAA,cAACi7B,GAAa,CACZn8B,OAAQ6xI,EACRl6G,cAAY,EACZE,gBAAc,EACd13B,QAAS4xI,EACT/5G,SAAUk7G,EACV17G,WAAYy6G,EACZn6G,kBAAmB92B,EAAK,UAEtB,KCpFV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMC,KAA6B,IAA3B,OAAEQ,GAAQR,EACjB,MAAMM,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAEhC,MAAO,CACL0gG,kBAAkB6I,EAAAA,EAAAA,IAAmBhqG,EAAQS,IAAS0gG,iBACtD9kD,mBAAoBr8C,EAAOq8C,mBAC3B97C,OACD,GAReR,EAjJ+BnG,IAM7C,IAN8C,mBAClDyiD,EAAkB,iBAClB8kD,EAAgB,KAChB5gG,EAAI,SACJ8L,EAAQ,QACR/K,GACD1H,EACC,MAAM,wBAAE46I,IAA4B/yI,EAAAA,EAAAA,MAE9BU,GAAOC,EAAAA,EAAAA,MACNmtE,EAAWqB,IAAgB3oE,EAAAA,EAAAA,KAAS,IACpC+zD,EAAWugE,IAAgBt0H,EAAAA,EAAAA,KAAS,IACpCwsI,EAAuBC,IAA4BzsI,EAAAA,EAAAA,IAAuCk5F,IAEjG5kF,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IAGV,MAAMqzI,GAAmBj5I,EAAAA,EAAAA,KAAQ,IAAM,CAAC,CACtCsW,MAAO,MACPulB,MAAOp1B,EAAK,iBACX,CACD6P,MAAO,OACPulB,MAAOp1B,EAAK,kBACX,CACD6P,MAAO,OACPulB,MAAOp1B,EAAK,kBACV,CAACA,IAECyyI,GAAsBjzI,EAAAA,EAAAA,KAAY,KACjCpB,IACLg8H,GAAa,GAEbiY,EAAwB,CACtB/zI,OAAQF,EAAKpJ,GACbgqG,iBAAkBszC,IAClB,GACD,CAACl0I,EAAMk0I,EAAuBD,KAEjCr2I,EAAAA,EAAAA,KAAU,KACRo+H,GAAa,GACb3rD,GAAa,GACb8jE,EAAyBvzC,EAAiB,GACzC,CAACA,IAEJ,MAAM0zC,GAA2Bn5I,EAAAA,EAAAA,KAC/B,IAAM2gD,GAAoBzrB,QAAO7uB,IAAA,IAAC,WAAEquF,GAAYruF,EAAA,OAAMquF,CAAU,KAChE,CAAC/zC,IAGGy4F,GAA8BnzI,EAAAA,EAAAA,KAAaqQ,IAE7C0iI,EADY,QAAV1iI,EACuB,CAAE/N,KAAM,OACd,SAAV+N,EACgB,CACvB/N,KAAM,OACNm0G,QAAoC,SAA3BjX,GAAkBl9F,KAAkBk9F,EAAiBiX,QAAU,SAGjDl+G,GAE3B02E,GAAa,EAAK,GACjB,CAACuwB,IAEE4zC,GAAuBpzI,EAAAA,EAAAA,KAAaqH,IACxC,IAAKzI,IAASs0I,EAA0B,OAExC,MAAM,KAAEpqI,EAAI,QAAE6sB,GAAYtuB,EAAEqN,cAC5B,GAAoC,SAAhCo+H,GAAuBxwI,KAAiB,CAC1C,MAAMm4C,EAAW,CAAEi0C,SAAU5lF,GAE3BiqI,EADEp9G,EACuB,CACvBrzB,KAAM,OACNm0G,QAAS,IAAIq8B,EAAsBr8B,QAASh8D,IAGrB,CACvBn4C,KAAM,OACNm0G,QAASq8B,EAAsBr8B,QAAQxnF,QAAQokH,KAAWl4F,EAAAA,EAAAA,IAAek4F,EAAO54F,MAGtF,CACAw0B,GAAa,EAAK,GACjB,CAACikE,EAA0Bt0I,EAAMk0I,IAEpC,OACEpyI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAK,uBAERE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACTC,SAAUk+D,GAAuBxwI,MAAQ,OACzCwG,KAAK,YACL2mC,QAASujG,EACT1iI,SAAU6iI,IAEZzyI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBACsB,QAAhCiyI,GAAuBxwI,MAAkB9B,EAAK,0BACd,SAAhCsyI,GAAuBxwI,MAAmB9B,EAAK,4BAC9CsyI,GAAyBtyI,EAAK,0BAGH,SAAhCsyI,GAAuBxwI,MACtB5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAK,uBAEP0yI,GAA0B/yI,KAAII,IAAA,IAAC,SAAEk6C,EAAQ,MAAE35C,GAAOP,EAAA,OACjDG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACP5sB,KAAM2xC,EAASi0C,SACf/4D,QAASm9G,GAAuBr8B,QAAQx2D,MAAM6P,IAAM3U,EAAAA,EAAAA,IAAeV,EAAUqV,KAC7El6B,MACEl1B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAC0vD,GAAAA,EAAmB,CAAC3V,SAAUA,EAAUC,mBAAoBA,IAC5D55C,GAGLwP,SAAU8iI,IAER,MAMd1yI,EAAAA,GAAAA,cAAC+mE,GAAAA,EAAoB,CACnB72C,QAASg9C,EACT1sE,QAAS+xI,EACThvI,UAAWzD,EAAK,QAChBqQ,SAAUwpD,GAETA,EACC35D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGb,KCWV,IAAe1C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAEtB,GAAQsB,EACjB,MAAM,WAAEkzI,IAAev8H,EAAAA,EAAAA,IAAe1Y,GAAQs+H,WAAW3kE,SAASl5D,IAC5D,OAAE2zB,EAAM,UAAE8gH,EAAS,WAAEC,GAAeF,GAAc,CAAC,EACnD10I,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAGhC,MAAO,CACL2zB,SACA8gH,YACAC,aACA3gH,UANgBj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAOvC,GAZeR,EAtJgCnG,IAQ9C,IAR+C,OACnD6G,EAAM,OACN2zB,EAAM,UACN8gH,EAAS,WACTC,EAAU,UACV3gH,EAAS,SACTnoB,EAAQ,QACR/K,GACD1H,EACC,MAAM,iBACJ04B,EAAgB,wBAChB8iH,EAAuB,yBACvBC,EAAwB,SACxBz0G,IACEn/B,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MACP,MACJotI,EAAQ,EAAC,WAAEgC,EAAU,KAAEl/D,EAAI,QAAEgjE,GAC3BlhH,GAAU,CAAC,EACT48G,EAAa58G,GAAQ48G,YAAsD,KAAvC58G,EAAO48G,YAAaC,EAAAA,GAAAA,OAA0BtzH,KAAKC,MACvF23H,GAAcnhH,GAAQ48G,YAAc,IAAKC,EAAAA,GAAAA,MAAmB,GAElE9yI,EAAAA,EAAAA,KAAU,KACJm0E,IACF8iE,EAAwB,CAAE30I,SAAQ6xE,SAClC+iE,EAAyB,CAAE50I,SAAQ6xE,SACrC,GACC,CAAC7xE,EAAQ6xE,EAAM8iE,EAAyBC,IAE3C,MAAMG,GAAoB7zI,EAAAA,EAAAA,KAAY,MACpC8jE,EAAAA,GAAAA,IAAoBrxC,EAAQk+C,MAC5BhgD,EAAiB,CACfv6B,QAASoK,EAAK,eACd,GACD,CAACiyB,EAAQjyB,EAAMmwB,IAiElB,OA/DA/V,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,IA8DRe,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACX4xB,GACA/xB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAK,YAEjCiyB,GACC/xB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,cAAc4xB,EAAO3xB,OAAS2xB,EAAOk+C,MACnDjwE,EAAAA,GAAAA,cAAA,SACEG,UAAU,eACVwP,MAAOoiB,EAAOk+C,KACdvP,UAAQ,EACRlgE,QAAS2yI,IAEXnzI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,YAAYK,QAAS2yI,GAAoBrzI,EAAK,aAC/DhH,QAAQ61I,IACP3uI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACV+yI,EACGpzI,EAAK,eACLA,EAAK,gBAAkB,IAAEk2H,EAAAA,GAAAA,IAAel2H,EAAM6uI,OAAep1G,EAAAA,GAAAA,IAAWz5B,EAAM6uI,QAIvFsE,GACCjzI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAIF,EAAK,mBACTE,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,6CAEVK,QAASA,IAAM+9B,EAAS,CAAEzpC,GAAIm+I,KAE9BjzI,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQwlH,EACRzlH,QAAQrL,EAAAA,GAAAA,IAAoBriB,EAAoB,IAAdiyB,EAAO3P,MAAa,GACtDw8C,eAAa,MA9FPw0E,MACtB,GAAKP,GAAWr3I,SAAUs3I,GAAYt3I,OACtC,OAAKq3I,EAEH7yI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAI6yI,EAAUr3I,OAASsE,EAAK,eAAgBqtI,GAASrtI,EAAK,gBAC1DE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACT0yI,EAAUr3I,SACV2zI,EAAarvI,EAAK,4BAA6BqvI,EAAahC,GAASrtI,EAAK,mBAE3E+yI,EAAUpzI,KAAK4zI,IACd,MAAMC,GAAWnxH,EAAAA,GAAAA,IAAoBriB,EAAsB,IAAhBuzI,EAASjxH,MAAa,GAC3DoL,EAAS6lH,EAASE,eAAkB,GAAED,OAAsBxzI,EAAK,qBAAuBwzI,EAC9F,OACEtzI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,6CAEVK,QAASA,IAAM+9B,EAAS,CAAEzpC,GAAIu+I,EAAS5lH,UAEvCztB,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQ4lH,EAAS5lH,OACjBD,OAAQA,EACRoxC,eAAa,IAEN,MAtBE5+D,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,KA0BvB,EAuEC07H,GAnEcI,MACvB,IAAIzhH,GAAQytG,UAAZ,CACA,IAAKsT,GAAcD,EAAW,OAAO7yI,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,MAC7C,GAAKo7H,GAAYt3I,OACjB,OACEwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAgBF,EAAZqyB,EAAiB,oBAA4B,mBACjDnyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACV2yI,EAAWrzI,KAAKg0I,GACfzzI,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACP9sB,UAAU,6CAEVK,QAASA,IAAM+9B,EAAS,CAAEzpC,GAAI2+I,EAAUhmH,UAExCztB,EAAAA,GAAAA,cAACutB,GAAAA,EAAe,CACdE,OAAQgmH,EAAUhmH,OAClBD,QAAQrL,EAAAA,GAAAA,IAAoBriB,EAAuB,IAAjB2zI,EAAUrxH,MAAa,GACzDw8C,eAAa,QAhBc,CAqB/B,EA8CC40E,KAIH,KC3FV,IAAe/1I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAM+B,KAA6B,IAA3B,OAAE+tB,GAAQ/tB,EAGjB,MAAO,CACLwiB,MAHW1jB,EAAAA,EAAAA,IAAWb,EAAQ8vB,GAI/B,GANe/vB,EA3D2BnG,IAOzC,IAP0C,OAC9Ck2B,EAAM,OACNrvB,EAAM,MACN6zB,EAAK,KACL7P,EAAI,UACJ+P,EAAS,KACTjQ,GACD3qB,EACC,MAAM,SAAEgnC,EAAQ,oBAAEm1G,IAAwBt0I,EAAAA,EAAAA,MAEpCsH,GAAiBq3F,EAAAA,GAAAA,GAAuB,eACxCj+F,GAAOC,EAAAA,EAAAA,KAEP4zI,GAAWx+G,EAAAA,EAAAA,IAAgBjT,GAC3B0xH,EAAuC,KAA1BxxH,GAAOwsH,EAAAA,GAAAA,OAA0BtzH,KAAKC,MAEnDs4H,GAAaC,EAAAA,GAAAA,IAAQ,IAAIx4H,KAAKs4H,KAChCr6G,EAAAA,GAAAA,IAAWz5B,EAAM8zI,IAAaG,EAAAA,GAAAA,IAAgBj0I,EAAM8zI,GAAW,GAAM,GAAO,GAM1EI,GAAsB10I,EAAAA,EAAAA,KAAY,KACtCo0I,EAAoB,CAAEt1I,SAAQqvB,SAAQwmH,YAAY,GAAO,GACxD,CAAC71I,EAAQs1I,EAAqBjmH,IAE3BymH,GAAsB50I,EAAAA,EAAAA,KAAY,KACtCo0I,EAAoB,CAAEt1I,SAAQqvB,SAAQwmH,YAAY,GAAQ,GACzD,CAAC71I,EAAQs1I,EAAqBjmH,IAEjC,OACEztB,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,MAC7B1G,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,QAC7B1G,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,QAASlG,QAftB2zI,KACtB51G,EAAS,CAAEzpC,GAAI24B,GAAS,GAelBztB,EAAAA,GAAAA,cAACiiB,GAAAA,EAAM,CACL1d,IAAKkpB,EACLxxB,KAAK,SACLimB,KAAMA,IAERliB,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,cAC7B1G,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,cAAeitI,GAC9C3zI,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,kBAAmBurB,KAGtDjyB,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,SAAUmtI,IAE3C7zI,EAAAA,GAAAA,cAAA,OAAKG,UAAWuG,EAAe,YAC7B1G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAWuG,EAAe,UAAWlG,QAASwzI,GACvCl0I,EAAZqyB,EAAiB,sBAA8B,sBAElDnyB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAWuG,EAAe,UAAWnG,QAAM,EAACC,QAAS0zI,GAC1Dp0I,EAAK,oBAGN,KCsCV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAMkC,KAA6B,IAA3B,OAAEzB,GAAQyB,EACjB,MAAM3B,GAAOC,EAAAA,EAAAA,IAAWR,EAAQS,GAEhC,MAAO,CACLF,OACAi0B,UAAWj0B,IAAQssD,EAAAA,EAAAA,IAActsD,GAClC,GAPeR,EA7FkCnG,IAMhD,IANiD,KACrD2G,EAAI,OACJE,EAAM,SACN4L,EAAQ,UACRmoB,EAAS,QACTlzB,GACD1H,EACC,MAAM,wBAAE68I,EAAuB,qBAAEtV,IAAyB1/H,EAAAA,EAAAA,OACnDi1I,EAAuBC,EAAqBC,IAAwBhyI,EAAAA,EAAAA,MACpEiyI,EAAuBC,EAAqBC,IAAwBnyI,EAAAA,EAAAA,KAErEzC,GAAOC,EAAAA,EAAAA,MAEbma,EAAAA,GAAAA,GAAe,CACblQ,WACAmQ,OAAQlb,KAGVnD,EAAAA,EAAAA,KAAU,KACHoC,GAAMqjI,eAAiBjjI,EAAAA,EAAAA,IAASF,IACnC0gI,EAAqB,CAAE1gI,UACzB,GACC,CAACF,EAAME,EAAQ0gI,IAElB,MAAM6V,GAA0Br1I,EAAAA,EAAAA,KAAY,KAC1C80I,EAAwB,CAAEh2I,SAAQ61I,YAAY,IAC9CM,GAAsB,GACrB,CAACH,EAAyBh2I,EAAQm2I,IAE/BK,GAA0Bt1I,EAAAA,EAAAA,KAAY,KAC1C80I,EAAwB,CAAEh2I,SAAQ61I,YAAY,IAC9CS,GAAsB,GACrB,CAACN,EAAyBh2I,EAAQs2I,IAErC,OACE10I,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACmqE,GAAAA,EAAY,CACXp/B,OAAQs/B,GAAAA,EAAAA,YACRpuE,KAAM44I,EAAAA,IACN10I,UAAU,iBAEXrH,QAAQoF,GAAMqjI,cAAc/lI,SAC3BwE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,qBAAqBK,QAAS8zI,GAAqB,cACrEt0I,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,qBAAqBK,QAASi0I,EAAqBl0I,QAAM,GAAC,iBAIlFP,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAU+uG,eAAa,GACpClvG,EAAAA,GAAAA,cAAA,KAAGuE,IAAI,SACHrG,GAAMqjI,aAAiCrjI,EAAKqjI,aAAa/lI,OACvDsE,EAAK,eAAgB5B,EAAKqjI,aAAa/lI,QAAUsE,EAAK,oBADnCA,EAAK,aAG5B5B,GAAMqjI,cACNvhI,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACnT,IAAI,YAEiB,IAA/BrG,GAAMqjI,cAAc/lI,QACnBwE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaoE,IAAI,SACfzE,EAAZqyB,EAAiB,iCAAyC,gCAG9Dj0B,GAAMqjI,cAAc9hI,KAAIC,IAAA,IAAC,OAAE+tB,EAAM,MAAEwE,EAAK,KAAE7P,GAAM1iB,EAAA,OAC/CM,EAAAA,GAAAA,cAAC80I,GAAW,CACVrnH,OAAQA,EACRwE,MAAOA,EACP7P,KAAMA,EACN+P,UAAWA,EACX/zB,OAAQA,EACRmG,IAAKkpB,GACL,MAIRztB,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQu1I,EACRp1I,QAASs1I,EACTn0I,MAAM,uBACNmF,KAAK,gDACLwuB,eAAgB4gH,IAElB30I,EAAAA,GAAAA,cAAC6zB,GAAAA,EAAa,CACZ/0B,OAAQ01I,EACRv1I,QAASy1I,EACTt0I,MAAM,uBACNmF,KAAK,gDACLwuB,eAAgB6gH,IAEd,KC4JV,IAAen3I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAGQ,CACLo3I,gBAHqBC,EAAAA,EAAAA,IAA4Br3I,MAFnCD,EA1O0BnG,IAUxC,IAVyC,OAC7C6G,EAAM,cACN++D,EAAa,qBACb0sE,EAAoB,wBACpBF,EAAuB,eACvBtsE,EAAc,mBACdylE,EAAkB,QAClB7jI,EAAO,SACP+K,EAAQ,eACR+qI,GACDx9I,EACC,OAAQ4lE,GACN,KAAKuiE,EAAAA,GAAAA,QACH,OAAQqV,GACN,IAAK,OACH,OACE/0I,EAAAA,GAAAA,cAACi1I,GAAU,CACT1wI,IAAKnG,EACLqvB,OAAQrvB,EACRa,QAASA,EACT+K,SAAUA,IAGhB,IAAK,QACH,OACEhK,EAAAA,GAAAA,cAACk1I,GAAW,CACV3wI,IAAKnG,EACLA,OAAQA,EACRi/D,eAAgBA,EAChBp+D,QAASA,EACT+K,SAAUA,GAAY,CACpB01H,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA3qI,SAASooE,KAGjB,IAAK,UACH,OACEn9D,EAAAA,GAAAA,cAACm1I,GAAa,CACZ5wI,IAAKnG,EACLA,OAAQA,EACRi/D,eAAgBA,EAChBp+D,QAASA,EACT+K,SAAUA,GAAY,CACpB01H,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA3qI,SAASooE,KAKnB,MAGF,KAAKuiE,EAAAA,GAAAA,gBACH,OACE1/H,EAAAA,GAAAA,cAACo1I,GAAqB,CACpBh3I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,WACH,OACE1/H,EAAAA,GAAAA,cAACq1I,GAAgB,CACfj3I,OAAQA,EACRi/D,eAAgBA,EAChBrzD,SAAUA,EACV/K,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,iBACH,OACE1/H,EAAAA,GAAAA,cAACs1I,GAAsB,CACrBl3I,OAAQA,EACRi/D,eAAgBA,EAChBylE,mBAAoBA,EACpB94H,SAAUA,GAAY,CACpB01H,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACA3qI,SAASooE,GACXl+D,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE1/H,EAAAA,GAAAA,cAACu1I,GAAsB,CACrBn3I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,2BACH,OACE1/H,EAAAA,GAAAA,cAACw1I,GAAgC,CAC/Bp3I,OAAQA,EACR0kI,mBAAoBA,EACpBzlE,eAAgBA,EAChBrzD,SAAUA,GAAY,CACpB01H,EAAAA,GAAAA,sBACA3qI,SAASooE,GACXl+D,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,qBACH,OACE1/H,EAAAA,GAAAA,cAACy1I,GAA0B,CACzBr3I,OAAQA,EACRyrI,qBAAsBA,EACtBF,wBAAyBA,EACzBtsE,eAAgBA,EAChBrzD,SAAUA,EACV/K,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,mBACH,OACE1/H,EAAAA,GAAAA,cAAC01I,GAAwB,CACvBt3I,OAAQA,EACRi/D,eAAgBA,EAChBylE,mBAAoBA,EACpB94H,SAAUA,GAAY,CACpB01H,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACA3qI,SAASooE,GACXl+D,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE1/H,EAAAA,GAAAA,cAAC21I,GAAsB,CACrBv3I,OAAQA,EACR0sI,WAAY3tE,IAAkBuiE,EAAAA,GAAAA,mBAC9BqL,eAAgBlB,EAChBF,wBAAyBA,EACzBtsE,eAAgBA,EAChBrzD,SAAUA,EACV/K,QAASA,IAIf,KAAKygI,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE1/H,EAAAA,GAAAA,cAAC41I,GAAkB,CACjBx3I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAGf,KAAKygI,EAAAA,GAAAA,QACH,OACE1/H,EAAAA,GAAAA,cAAC61I,GAAa,CACZz3I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,EACTo+D,eAAgBA,IAGtB,KAAKqiE,EAAAA,GAAAA,WACH,OACE1/H,EAAAA,GAAAA,cAAC81I,GAAY,CACX13I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,EACTo+D,eAAgBA,IAGtB,KAAKqiE,EAAAA,GAAAA,eACH,OACE1/H,EAAAA,GAAAA,cAAC41I,GAAkB,CACjBx3I,OAAQA,EACR8tI,UAAQ,EACRliI,SAAUA,EACV/K,QAASA,EACTo+D,eAAgBA,EAChBylE,mBAAoBA,IAI1B,KAAKpD,EAAAA,GAAAA,UACH,OACE1/H,EAAAA,GAAAA,cAAC+1I,GAAe,CACd33I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAGf,KAAKygI,EAAAA,GAAAA,WACH,OACE1/H,EAAAA,GAAAA,cAACg2I,GAAgB,CACf53I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAGf,KAAKygI,EAAAA,GAAAA,aACH,OACE1/H,EAAAA,GAAAA,cAACi2I,GAAkB,CACjB73I,OAAQA,EACR4L,SAAUA,EACV/K,QAASA,IAKD,KCjRZi3I,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,eAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,aAARA,CAAQ,MAOpB,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAWl9G,QAAQ,MAAO,IACnCu8G,GAAK91E,KAAKy2E,GACLP,GAASG,KAEdJ,GAAIj2E,KAAKy2E,GACJP,GAASK,IAEdR,GAAY/1E,KAAKy2E,IAAeT,GAAYh2E,KAAKy2E,GAC5CP,GAASI,WAEXJ,GAASE,OAClB,CCKA,MAAM75E,GAA2B,CAC/Bm6E,YAAa,GACbC,YAAa,GACbC,KAAM,GACN/5E,MAAO,GACPg6E,YAAa,GACbC,SAAU,GACVvD,SAAU,GACV52E,MAAO,GACP1gC,MAAO,GACP86G,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,CAAC,EACbC,UAAW,EACXC,kBAAmB,IAGfC,GAAgDA,CAAC76E,EAAO7lD,KAC5D,OAAQA,EAAOxV,MACb,IAAK,iBACH,MAAO,IACFq7D,EACH65E,YAAa1/H,EAAO8lD,QACpBy6E,WAAY,IACP16E,EAAM06E,WACTb,iBAAaj/I,IAGnB,IAAK,iBACH,MAAO,IACFolE,EACH85E,YAAa3/H,EAAO8lD,QACpBy6E,WAAY,IACP16E,EAAM06E,WACTZ,iBAAal/I,IAGnB,IAAK,aACH,MAAO,IACFolE,EACH+5E,KAAM5/H,EAAO8lD,QACby6E,WAAY,IACP16E,EAAM06E,WACTX,UAAMn/I,IAGZ,IAAK,cACH,MAAO,IACFolE,EACHA,MAAO7lD,EAAO8lD,QACdy6E,WAAY,IACP16E,EAAM06E,WACT16E,WAAOplE,IAGb,IAAK,gBACH,MAAO,IACFolE,EACHg6E,YAAa7/H,EAAO8lD,QAAQ66E,KAC5BR,eAAgBngI,EAAO8lD,QAAQ86E,YAC/BL,WAAY,IACP16E,EAAM06E,WACTV,iBAAap/I,IAGnB,IAAK,iBACH,MAAO,IACFolE,EACHi6E,SAAU9/H,EAAO8lD,QACjBy6E,WAAY,IACP16E,EAAM06E,WACTT,cAAUr/I,IAGhB,IAAK,iBACH,MAAO,IACFolE,EACH02E,SAAUv8H,EAAO8lD,QACjBy6E,WAAY,IACP16E,EAAM06E,WACThE,cAAU97I,IAGhB,IAAK,cACH,MAAO,IACFolE,EACHF,MAAO3lD,EAAO8lD,QACdy6E,WAAY,IACP16E,EAAM06E,WACT56E,WAAOllE,IAGb,IAAK,cACH,MAAO,IACFolE,EACH5gC,MAAOjlB,EAAO8lD,QACdy6E,WAAY,IACP16E,EAAM06E,WACTt7G,WAAOxkC,IAGb,IAAK,iBACH,MAAO,IAAKolE,EAAOk6E,SAAU//H,EAAO8lD,SACtC,IAAK,mBACH,MAAO,IACFD,EACH45E,WAAYz/H,EAAO8lD,QACnBy6E,WAAY,IACP16E,EAAM06E,WACTd,gBAAYh/I,IAGlB,IAAK,mBACH,MAAO,IACFolE,EACHm6E,WAAYhgI,EAAO8lD,QACnBy6E,WAAY,IACP16E,EAAM06E,WACTP,gBAAYv/I,IAGlB,IAAK,mBACH,MAAO,IACFolE,EACHo6E,OAAQjgI,EAAO8lD,QACfy6E,WAAY,IACP16E,EAAM06E,WACTN,YAAQx/I,IAGd,IAAK,gBACH,MAAO,IACFolE,EACHq6E,IAAKlgI,EAAO8lD,QACZy6E,WAAY,IACP16E,EAAM06E,WACTL,SAAKz/I,IAGX,IAAK,uBACH,MAAO,IACFolE,EACHs6E,eAAgBngI,EAAO8lD,QACvBy6E,WAAY,IACP16E,EAAM06E,WACTJ,oBAAgB1/I,IAGtB,IAAK,mBACH,MAAO,IACFolE,EACHu6E,WAAYpgI,EAAO8lD,QACnBy6E,WAAY,IACP16E,EAAM06E,WACTH,gBAAY3/I,IAGlB,IAAK,iBACH,MAAO,IAAKolE,EAAOw6E,SAAUrgI,EAAO8lD,SACtC,IAAK,wBACH,MAAO,IAAKD,EAAOy6E,gBAAiBtgI,EAAO8lD,SAC7C,IAAK,iBACH,OAAI9lD,EAAO8lD,QAAQgoB,QACV,IACFjoB,KACA7lD,EAAO8lD,QACVq6E,eAAgBngI,EAAO8lD,QAAQgoB,SAG5B,IAAKjoB,KAAU7lD,EAAO8lD,SAC/B,IAAK,gBACH,MAAO,IACFD,EACH06E,WAAY,IACP16E,EAAM06E,cACNvgI,EAAO8lD,UAGhB,IAAK,eACH,MAAO,IACFD,EACH26E,UAAWxgI,EAAO8lD,SAEtB,IAAK,0BACH,MAAO,IACFD,EACH46E,kBAAmBzgI,EAAO8lD,SAE9B,IAAK,aACH,MAAO,IACFP,IAEP,QACE,OAAOM,EAAM,ECpOJ,SAASg7E,GACtBnzI,GACA,IADkCozI,EAAiB38I,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAH5B,KAKvBO,EAAAA,EAAAA,KAAU,KACJkK,EAAAA,IAIJ3J,YAAW,MACT0M,EAAAA,EAAAA,KAAgB,KACdjE,EAAIjK,SAASiiC,OAAO,GACpB,GACDo7G,EAAkB,GACpB,CAACpzI,EAAKozI,GACX,CCHA,MA2CA,IAAez6I,EAAAA,EAAAA,KA3CeiZ,IAC5B,MAAM,GACJ5hB,EAAE,MACF6a,EAAK,MACLulB,EAAK,SACLijH,EAAQ,MACRhnH,EAAK,IACLrsB,EAAG,YACH6nB,EAAW,SACX2N,EAAQ,SACR1qB,EAAQ,SACR7L,GACE2S,EACEwqD,EAAY/vC,GAAS+D,EACrB8lB,GAAgBt0C,EAAAA,GAAAA,GACpB,cACAiJ,GAAS,UACTwhB,GAAS,QACT+vC,GAAa,aACbi3E,GAAY,aACZ,eAGF,OACEn4I,EAAAA,GAAAA,cAAA,OAAKG,UAAW66C,GACdh7C,EAAAA,GAAAA,cAAA,UACEG,UAAU,eACVrL,GAAIA,EACJ6a,MAAOA,GAAS,GAChBC,SAAUA,EACV+c,YAAaA,GAAeuI,EAC5BoF,SAAUA,EACVx1B,IAAKA,GAEJf,GAEFm9D,GAAapsE,GACZkL,EAAAA,GAAAA,cAAA,SAAOshE,QAASxsE,GAAKosE,GAEnB,IC8JV,IAAezjE,EAAAA,EAAAA,KA7LoBlG,IAQ7B,IAR8B,MAClC0lE,EAAK,UACLm7E,EAAS,UACTC,EAAS,SACTC,EAAQ,YACRC,EAAW,YACXl9G,EAAW,SACX+vC,GACD7zE,EAEC,MAAMykC,GAAWthC,EAAAA,EAAAA,IAAyB,MAEpC89I,GAAW99I,EAAAA,EAAAA,IAAyB,MAEpC+9I,GAAmB/9I,EAAAA,EAAAA,IAA0B,OAEnDoB,EAAAA,EAAAA,KAAU,KACJ28I,EAAiB59I,SAChB49I,EAAiB59I,QAAQ8U,QAAUstD,EAAMg6E,cAC5CwB,EAAiB59I,QAAQ8U,MAAQstD,EAAMg6E,YACzC,GACC,CAACh6E,EAAMg6E,cAEV,MAAMn3I,GAAOC,EAAAA,EAAAA,KAEbk4I,GAAuBj8G,GAEvB,MAAM08G,GAAuBp5I,EAAAA,EAAAA,KAAaqH,IACxCykE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC5D,CAACy7D,IAEEutE,GAAuBr5I,EAAAA,EAAAA,KAAaqH,IACxCykE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC5D,CAACy7D,IAEEwtE,GAAmBt5I,EAAAA,EAAAA,KAAaqH,IACpCykE,EAAS,CAAExpE,KAAM,aAAcs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GACxD,CAACy7D,IAEEytE,GAAoBv5I,EAAAA,EAAAA,KAAaqH,IACrCykE,EAAS,CAAExpE,KAAM,cAAes7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GACzD,CAACy7D,IAEE0tE,GAAsBx5I,EAAAA,EAAAA,KAAaqH,IACvCykE,EAAS,CAAExpE,KAAM,gBAAiBs7D,QAAS7hC,EAAY2T,MAAMk2C,GAAYA,EAAQ6yD,OAASpxI,EAAEwV,OAAOxM,SAAS,GAC3G,CAAC0rB,EAAa+vC,IAEX2tE,GAAuBz5I,EAAAA,EAAAA,KAAaqH,IACxCykE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC5D,CAACy7D,IAEE4tE,GAAuB15I,EAAAA,EAAAA,KAAaqH,IACxCykE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC5D,CAACy7D,IAEE6tE,GAAoB35I,EAAAA,EAAAA,KAAaqH,IACrCykE,EAAS,CAAExpE,KAAM,cAAes7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GACzD,CAACy7D,IAEEpuC,GAAoB19B,EAAAA,EAAAA,KAAaqH,IACrC,IAAI,MAAEgJ,GAAUhJ,EAAEwV,OAClBxM,EAAS,IAAGA,EAAMgqB,QAAQ,MAAO,MAC7B6+G,EAAS39I,UACX29I,EAAS39I,QAAQ8U,MAAQA,GAE3By7D,EAAS,CAAExpE,KAAM,cAAes7D,QAASvtD,GAAQ,GAChD,CAACy7D,IAEE8tE,GAAuB55I,EAAAA,EAAAA,KAAaqH,IACxCykE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC5D,CAACy7D,KAEE,WAAEusE,GAAe16E,EACvB,OACEj9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAAA,YACGu4I,EACCv4I,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,2BACVE,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAKk3B,EACL9G,MAAOp1B,EAAK,sCACZ8P,SAAU8oI,EACV/oI,MAAOstD,EAAM65E,YACbt8G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWb,cAEpB92I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,sCACZ8P,SAAU+oI,EACVhpI,MAAOstD,EAAM85E,YACbv8G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWZ,cAEpB/2I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,kCACZ8P,SAAUgpI,EACVjpI,MAAOstD,EAAM+5E,KACbx8G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWX,OAEpBh3I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,mCACZ8P,SAAUipI,EACVlpI,MAAOstD,EAAMA,MACbziC,UAAU,OACVrJ,MAAOwmH,EAAW16E,QAEpBj9D,EAAAA,GAAAA,cAACm5I,GAAM,CACLjkH,MAAOp1B,EAAK,0BACZ6sB,YAAa7sB,EAAK,0BAClB8P,SAAUkpI,EACVnpI,MAAOstD,EAAMg6E,YACbkB,SAAUr/I,SAAQ,GAClBhE,GAAG,mBACHq8B,MAAOwmH,EAAWV,YAClBnyI,IAAK2zI,EACLn+G,SAAU,GAETe,EAAY57B,KAAIC,IAAA,IAAC,YAAEs4I,EAAW,KAAE5vI,EAAI,KAAE2vI,GAAMr4I,EAAA,OAC3CM,EAAAA,GAAAA,cAAA,UACE2P,MAAOooI,EACP53I,UAAU,cACV+zE,SAAU6jE,IAAS96E,EAAMg6E,aAExBe,GAAe5vI,EACT,KAIbpI,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,iCACZ8P,SAAUmpI,EACVppI,MAAOstD,EAAMi6E,SACb18G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWT,iBAGpBr/I,EACFygJ,GAAYF,GAAaC,EACzBr4I,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iCACRjI,EACFygJ,GACAt4I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,uBACZ8P,SAAUopI,EACVrpI,MAAOstD,EAAM02E,SACbn5G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWhE,WAGpByE,GACAp4I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,mCACZ8P,SAAUqpI,EACVtpI,MAAOstD,EAAMF,MACbviC,UAAU,QACVF,SAAU,EACVnJ,MAAOwmH,EAAW56E,QAGpBs7E,GACAr4I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,8BACZ8P,SAAUotB,EACVrtB,MAAOstD,EAAM5gC,MACb7B,UAAU,MACVF,SAAU,EACVnJ,MAAOwmH,EAAWt7G,MAClBv3B,IAAK0zI,IAGTx4I,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,uBACZozE,SAAUpzE,EAAK,2BACfm1B,QAASn8B,QAAQmkE,EAAMw6E,UACvBn9G,SAAU,EACV1qB,SAAUspI,KAGV,ICtJV,IAAez7I,EAAAA,EAAAA,KAxCgBlG,IAKzB,IAL0B,MAC9B0lE,EAAK,gBACLm8E,EAAe,SACfzoG,EAAQ,SACRy6B,GACD7zE,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MAEbjE,EAAAA,EAAAA,KAAU,KACHs9I,GAAoBA,EAAgB59I,SAAUyhE,EAAMk6E,UAGzD/rE,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASk8E,EAAgB,GAAGtkJ,IAAK,GACnE,CAACskJ,EAAiBn8E,EAAMk6E,SAAU/rE,IAErC,MAAMiuE,GAAuB/5I,EAAAA,EAAAA,KAAaqQ,IACxCy7D,EAAS,CAAExpE,KAAM,iBAAkBs7D,QAASvtD,GAAQ,GACnD,CAACy7D,IAEEr8B,GAAU11C,EAAAA,EAAAA,KAAQ,IAAO+/I,EAAgB35I,KAAIC,IAAA,IAAG5K,GAAI6a,EAAOvP,MAAO80B,EAAK,OAAEwb,GAAQhxC,EAAA,MAAM,CAC3Fw1B,QACAg+C,UAAUziC,EAAAA,GAAAA,GAAeC,EAAQC,EAAU7wC,EAAKw5B,MAChD3pB,QACD,KAAK,CAACypI,EAAiBzoG,EAAU7wC,EAAKw5B,OAEvC,OACEt5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,SAAIF,EAAK,0BACTE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,mBACL2mC,QAASA,EACTn/B,SAAUypI,EACVnlE,SAAUjX,EAAMk6E,YAGhB,ICzDV,IAAgB,KAAO,uBAAuB,YAAc,uBAAuB,mBAAmB,uBAAuB,gBAAkB,uBAAuB,KAAO,uBAAuB,iBAAiB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,oBAAsB,uBAAuB,aAAa,uBAAuB,UAAY,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,kBAAoB,uBAAuB,wBAAwB,uBAAuB,mBAAqB,uBAAuB,SAAW,uBAAuB,SAAW,uBAAuB,gBAAkB,uBAAuB,eAAiB,uBAAuB,eAAe,uBAAuB,YAAc,uBAAuB,SAAW,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,gCAAgC,uBAAuB,0BAA4B,uBAAuB,+BAA+B,uBAAuB,yBAA2B,uBAAuB,eAAe,uBAAuB,YAAc,wBC8NtwC,IAAe15I,EAAAA,EAAAA,KA/KgBlG,IAezB,IAf0B,KAC9B2G,EAAI,QACJo7I,EAAO,OACPC,EAAM,eACNC,EAAc,aACdC,EAAY,SACZ9oG,EAAQ,WACR+oG,EAAU,cACVC,EAAa,SACbvuE,EAAQ,YACRwuE,EAAW,UACXhC,EAAS,YACTW,EAAW,mBACXsB,EAAkB,iBAClBC,GACDviJ,EACC,MAAM,eAAEwiJ,IAAmB36I,EAAAA,EAAAA,MAErBU,GAAOC,EAAAA,EAAAA,KACPi6I,EAAgBlhJ,QAAQsyE,IAExB,MACJzzE,EAAK,MAAEyI,EAAK,KAAEmF,EAAI,YAAE00I,EAAW,kBAAEC,EAAiB,oBAAEC,EAAmB,aAAEC,GACvEd,GAAW,CAAC,GACV,cACJe,EAAa,gBACbC,EAAe,gBACfC,EAAe,KACfnyI,EAAI,MACJi0B,EAAK,eACLm+G,GACGf,GAAgB,CAAC,EAEhBgB,GAAW9gJ,EAAAA,EAAAA,IAAS+gJ,EAAAA,EAAAA,IAAmB/iJ,IAEvCgjJ,GAAkBr7I,EAAAA,EAAAA,KAAas7I,IACnCxvE,EAAU,CAAExpE,KAAM,eAAgBs7D,QAASk9E,EAAep2I,KAAKoZ,IAAIw9H,EAAMR,GAAgBQ,GAAO,GAC/F,CAACxvE,EAAUgvE,IAERS,GAA2Bv7I,EAAAA,EAAAA,KAAY,KAC3Cy6I,EAAe,CAAEe,KAAMhB,GAAkBt+I,OAASu/I,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,aAA0B,GACvG,CAACjB,GAAkBt+I,OAAQu+I,IAExBiB,GAA6B17I,EAAAA,EAAAA,KAAY,KAC7Cy6I,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,cAA2B,GACjD,CAAChB,IAEEkB,GAA4B37I,EAAAA,EAAAA,KAAY,KAC5Cy6I,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,UAAuB,GAC7C,CAAChB,IAyDJ,OACE/5I,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,MACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,aACbolJ,GAAYz6I,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,gBAAwBtB,IAAK0mJ,EAAU7iI,IAAI,MACtE6iI,GAAY9iJ,GACZqI,EAAAA,GAAAA,cAACwmG,GAAAA,EAAQ,CACP1rG,MAAOnD,EAAMmF,YAAYhC,MACzBK,OAAQxD,EAAMmF,YAAY3B,OAC1BgF,UAAW9K,GAAAA,gBACX6lJ,kBAAgB,IAGpBl7I,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,MACd2K,EAAAA,GAAAA,cAAA,MAAIG,UAAW9K,GAAAA,eAAuB+K,GACrCmF,GAAQvF,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,sBAA6BoL,EAAAA,GAAAA,GAAW8E,EAAM,CAAC,KAAM,QAAS,aAG3FvF,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,WACbkkJ,GAAUA,EAAO95I,KAAKw5G,GACrBkiC,GAAkBr7I,EAAKw5B,KAAM2/E,EAAK/jF,MAAO+jF,EAAKvoE,OAAQC,KAEvD6oG,GAAkBA,EAAe/5I,KAAKw5G,GACrCkiC,GAAkBr7I,EAAKw5B,KAAM2/E,EAAK/jF,MAAO+jF,EAAKvoE,OAAQC,KAEvDwpG,GAAuBA,EAAoB3+I,OAAS,GA7EvDwE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,eACd2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,oBACb+K,GAEHJ,EAAAA,GAAAA,cAAA,YACGywC,EAAAA,GAAAA,GAAemnG,EAAYjnG,EAAU7wC,EAAKw5B,QAG/Ct5B,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,UACb8kJ,EAAqB16I,KAAK27I,GACzBp7I,EAAAA,GAAAA,cAAA,OACEuE,IAAK62I,EACLj7I,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,SAAiB+lJ,IAAQxD,GAAaviJ,GAAAA,iBAChEmL,QAAS4qE,EAAW,IAAMuvE,EAAgBS,IAAQxD,EAAY,EAAIwD,QAAOvjJ,IAExE44C,EAAAA,GAAAA,GAAe2qG,EAAKzqG,EAAU7wC,EAAKw5B,MAAM,aA8DhCzhC,IAAf6hJ,GACCyB,GAAkBr7I,EAAKw5B,KAAMx5B,EAAK,wBAAyB45I,EAAY/oG,GAAU,IAGrF3wC,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,aACbgmJ,GAAmB,CAClBj7I,MAAOi6I,GAAiBP,IAAmB,GAAG15I,MAC9C80B,MAAOp1B,EAAK,yBACZgE,KAAM,OACNtD,QAASw5I,EAAgBa,OAA2BhjJ,IAErDyiJ,GAAmBe,GAAmB,CACrCj7I,MAAOk6I,EACPplH,MAAOp1B,EAAK,2BACZw7I,YAAY50I,EAAAA,GAAAA,GAAerR,GAAAA,SAAiBA,GAAOilJ,EAAgB5uH,mBAEnE6sH,IAAgByB,IAAkBqB,GAAmB,CACrDj7I,MAAOm6I,EACPrlH,MAAOp1B,EAAK,0BACZgE,KAAM,WACNtD,QAASw5I,EAAgBgB,OAA6BnjJ,IAEvDuQ,GAAQizI,GAAmB,CAC1Bj7I,MAAOgI,EACP8sB,MAAOp1B,EAAK,uBACZgE,KAAM,SAEPu4B,GAASg/G,GAAmB,CAC3Bj7I,MAAOi8B,EACPnH,MAAOp1B,EAAK,8BACZgE,KAAM,WAEN+1I,IAAuBG,IAAkBqB,GAAmB,CAC5Dj7I,MAAOo6I,EACPtlH,MAAOp1B,EAAK,iCACZgE,KAAM,QACNtD,QAASw5I,EAAgBiB,OAA4BpjJ,IAEtDoiJ,IA5EYpyI,EA4EaqyI,EA1E5Bl6I,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAnBN,SAAuBrtB,EAAaoZ,GAClC,MACMs6H,EADaz7I,EAAK,iCAAkC5B,GAAMkC,OAC7Bm4D,MAAM,KACzC,OACEv4D,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGu7I,EAAgB,GACjBv7I,EAAAA,GAAAA,cAACsqD,GAAAA,EAAQ,CACPziD,IAAKA,EACLtC,KAAMg2I,EAAgB,GACtBt6H,MAAOA,IAERs6H,EAAgB/vG,MAAM,GAG7B,CAKagwG,CAAc3zI,EAAK/H,EAAKmhB,OAC/B7Y,KAAK,eACL6sB,QAASn8B,QAAQ6gJ,GACjBx5I,UAAW9K,GAAAA,YACXilC,SAAU,EACVlF,QAASwkH,OARf,IAAmB/xI,CA8EX,IAMV,SAASszI,GACPppF,EAAgC3xD,EAAeuP,EAAeghC,GAC9D,IADgF8qG,EAAIlgJ,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,IAAAA,UAAA,GAEpF,OACEyE,EAAAA,GAAAA,cAAA,OAAKG,WAAWuG,EAAAA,GAAAA,GAAerR,GAAAA,cAAsBomJ,GAAQpmJ,GAAAA,oBAC3D2K,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,oBACb+K,GAEHJ,EAAAA,GAAAA,cAAA,YACGywC,EAAAA,GAAAA,GAAe9gC,EAAOghC,EAAUohB,IAIzC,CAEA,SAASspF,GAAkB37I,GAYxB,IAZyB,MAC1BU,EAAK,MACL80B,EAAK,KACLpxB,EAAI,WACJw3I,EAAU,QACV96I,GAODd,EACC,OACEM,EAAAA,GAAAA,cAACitB,GAAAA,EAAQ,CACPulC,UAAW15D,QAAQsH,GAAS80B,IAAU90B,GACtC0D,KAAMA,EACN2mE,UAAWjqE,EACXA,QAASA,GAER86I,GAAct7I,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GAAe,OAAQ40I,KACpDt7I,EAAAA,GAAAA,cAAA,OAAKG,UAAW9K,GAAAA,2BACb+K,GAAS80B,GAEX90B,GAAS80B,IAAU90B,GAClBJ,EAAAA,GAAAA,cAAA,KAAGG,UAAW9K,GAAAA,0BACX6/B,GAKX,CCvQA,MAmCA,IAAez3B,EAAAA,EAAAA,KA3BoBlG,IAAgC,IAA/B,MAAEoY,EAAK,MAAEwhB,EAAK,SAAEvhB,GAAUrY,EAC5D,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPu0C,GAAeh1C,EAAAA,EAAAA,KAAaqH,IAChC,MAAMw6E,EAAWx6E,EAAEwV,OAAOxM,MAEtBA,EAAM+rI,SAAS,MAAQ/rI,EAAMnU,OAAS2lF,EAAS3lF,OACjDoU,EAASuxE,GAETvxE,ECzBC,SAA0BwlG,GAE/B,MAAMz/D,GADNy/D,EAAQA,EAAMz7E,QAAQ,SAAU,IAAI6R,MAAM,EAAG,IACzBoK,MAAM,WAO1B,OANID,IAAQ,IAAM/gC,OAAO+gC,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,IAAQ,IAA0B,IAApBA,EAAM,GAAGn6C,SAAiBm6C,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAM3/B,KAAK,KAAO,EACnC,CDee2lI,CAAiBh1I,EAAEwV,OAAOxM,OACrC,GACC,CAACC,EAAUD,IAEd,OACE3P,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,yBACZ8P,SAAU0kC,EACV3kC,MAAOA,EACPwhB,MAAOA,EACPqJ,UAAU,UACVF,SAAU,EACV6P,UA7BmB,EA8BnBmoB,2BAAyB,GACzB,I,0HE6BN,IAAe70D,EAAAA,EAAAA,KA1CkBlG,IAAgC,IAA/B,MAAEoY,EAAK,MAAEwhB,EAAK,SAAEvhB,GAAUrY,EAC1D,MAAMuI,GAAOC,EAAAA,EAAAA,KAEP67I,GAAgBlhJ,EAAAA,EAAAA,IAAyB,MAE/Cu9I,GAAuB2D,GAEvB,MAAOC,EAAUC,IAAel2I,EAAAA,EAAAA,IAAiB0wI,GAASE,UAC1D16I,EAAAA,EAAAA,KAAU,KACR,MAAMigJ,EAAcnF,GAAejnI,GACnCmsI,EAAYC,EAAY,GAEvB,IAEH,MAAMznG,GAAeh1C,EAAAA,EAAAA,KAAaqH,IAChC,MAAMw6E,ED7BH,SAA0Bi0B,GAE/B,MAAMz/D,GADNy/D,EAAQA,EAAMz7E,QAAQ,SAAU,KACZic,MAAM,WAC1B,OAAOD,EAAQA,EAAM3/B,KAAK,KAAO,EACnC,CCyBqBgmI,CAAiBr1I,EAAEwV,OAAOxM,OACrCosI,EAAcnF,GAAejwI,EAAEwV,OAAOxM,OAC5CmsI,EAAYC,GACZnsI,EAASuxE,EAAS,GACjB,CAACvxE,IAEEqsI,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKvF,GAASI,WACZ,OAAO12I,EAAAA,GAAAA,cAAA,OAAKjM,IAAKmoJ,GAAoBtkI,IAAI,KAC3C,KAAK0+H,GAASG,KACZ,OAAOz2I,EAAAA,GAAAA,cAAA,OAAKjM,IAAKooJ,GAAcvkI,IAAI,KACrC,KAAK0+H,GAASK,IACZ,OAAO32I,EAAAA,GAAAA,cAAA,OAAKjM,IAAKqoJ,GAAaxkI,IAAI,KACpC,QACE,OAEN,CAlCmBykI,CAAYR,GAE7B,OACE77I,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aACbH,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACR3nB,IAAK82I,EACL1mH,MAAOp1B,EAAK,qBACZ8P,SAAU0kC,EACV3kC,MAAOA,EACP6qB,UAAU,UACVr6B,UAAW07I,EAAW,kBAAoB,GAC1C1qH,MAAOA,EACPmJ,SAAU,EACV6P,UA1CuB,GA2CvBmoB,2BAAyB,IAE3BtyD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,eAAe87I,GAC3B,IC0GV,IAAex+I,EAAAA,EAAAA,KA9ImBlG,IAQ5B,IAR6B,MACjC0lE,EAAK,mBACLq/E,EAAkB,mBAClBC,EAAkB,YAClBC,EAAW,QACXC,EAAO,YACPphH,EAAW,SACX+vC,GACD7zE,EAEC,MAAMkhJ,GAAmB/9I,EAAAA,EAAAA,IAA0B,OAEnDoB,EAAAA,EAAAA,KAAU,KACJ28I,EAAiB59I,SAChB49I,EAAiB59I,QAAQ8U,QAAUstD,EAAMs6E,iBAC5CkB,EAAiB59I,QAAQ8U,MAAQstD,EAAMs6E,eACzC,GACC,CAACt6E,EAAMs6E,iBAEV,MAAMmF,GAAyBp9I,EAAAA,EAAAA,KAAaqQ,IAC1Cy7D,EAAS,CAAExpE,KAAM,mBAAoBs7D,QAASvtD,GAAQ,GACrD,CAACy7D,IAEEuxE,GAAyBr9I,EAAAA,EAAAA,KAAaqH,IAC1CykE,EAAS,CAAExpE,KAAM,mBAAoBs7D,QAASv2D,EAAEwV,OAAOxM,MAAMitI,eAAgB,GAC5E,CAACxxE,IAEEyxE,GAAqBv9I,EAAAA,EAAAA,KAAaqQ,IACtCy7D,EAAS,CAAExpE,KAAM,mBAAoBs7D,QAASvtD,GAAQ,GACrD,CAACy7D,IAEE0xE,GAAkBx9I,EAAAA,EAAAA,KAAaqH,IACnC,MAAMw6E,EAAWx6E,EAAEwV,OAAOxM,MAAMgqB,QAAQ,UAAW,IACnDyxC,EAAS,CAAExpE,KAAM,gBAAiBs7D,QAASikB,GAAW,GACrD,CAAC/V,IAEE0tE,GAAsBx5I,EAAAA,EAAAA,KAAaqH,IACvCykE,EAAS,CAAExpE,KAAM,uBAAwBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAClE,CAACy7D,IAEE2xE,GAA8Bz9I,EAAAA,EAAAA,KAAaqH,IAC/CykE,EAAS,CAAExpE,KAAM,mBAAoBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GAC9D,CAACy7D,IAEE4xE,GAA8B19I,EAAAA,EAAAA,KAAaqH,IAC/CykE,EAAS,CAAExpE,KAAM,wBAAyBs7D,QAASv2D,EAAEwV,OAAOxM,OAAQ,GACnE,CAACy7D,IAEEtrE,GAAOC,EAAAA,EAAAA,MAEP,WAAE43I,EAAa,CAAC,GAAM16E,EAE5B,OACEj9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACVE,EAAAA,GAAAA,cAACi9I,GAAS,CACRrtI,SAAU8sI,EACV/sI,MAAOstD,EAAM45E,WACb1lH,MAAOwmH,EAAWd,aAElB0F,GACAv8I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,8CACZ8P,SAAU+sI,EACVhtI,MAAOstD,EAAMm6E,WACb58G,UAAU,OACVF,SAAU,EACVnJ,MAAOwmH,EAAWP,aAGtBp3I,EAAAA,GAAAA,cAAA,WAASG,UAAU,iBACjBH,EAAAA,GAAAA,cAACk9I,GAAW,CACVvtI,MAAOstD,EAAMo6E,OACbznI,SAAUitI,EACV1rH,MAAOwmH,EAAWN,SAEpBr3I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,yBACZ8P,SAAUktI,EACVntI,MAAOstD,EAAMq6E,IACb98G,UAAU,UACV2P,UAAW,EACX7P,SAAU,EACVnJ,MAAOwmH,EAAWL,IAClBhlF,2BAAyB,KAG3BkqF,GAAeC,EACfz8I,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BACRjI,EACF2kJ,GACAx8I,EAAAA,GAAAA,cAACm5I,GAAM,CACLjkH,MAAOp1B,EAAK,0BACZ6sB,YAAa7sB,EAAK,0BAClB8P,SAAUkpI,EACVnpI,MAAOstD,EAAMs6E,eACbY,SAAUr/I,SAAQ,GAClBhE,GAAG,kBACHq8B,MAAOwmH,EAAWJ,eAClBj9G,SAAU,EACVx1B,IAAK2zI,GAGHp9G,EAAY57B,KAAIC,IAAA,IAAC,YAAEs4I,EAAW,KAAE5vI,GAAM1I,EAAA,OACpCM,EAAAA,GAAAA,cAAA,UACE2P,MAAOqoI,EACP73I,UAAU,cACV+zE,SAAU8jE,IAAgB/6E,EAAMs6E,gBAE/BS,GAAe5vI,EACT,KAKfq0I,GACAz8I,EAAAA,GAAAA,cAACysB,GAAAA,EAAS,CACRyI,MAAOp1B,EAAK,iCACZ8P,SAAUmtI,EACVptI,MAAOstD,EAAMu6E,WACbh9G,UAAU,OACVF,SAAU,EACV6P,UAAW,GACXhZ,MAAOwmH,EAAWH,aAGtBx3I,EAAAA,GAAAA,cAACg1B,GAAAA,EAAQ,CACPE,MAAOp1B,EAAK,qCACZm1B,UAASqnH,GAAqBr/E,EAAMy6E,gBACpCp9G,SAAU,EACV1qB,SAAUotI,EACV7sI,UAAWmsI,IAEbt8I,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACVL,EAAKw8I,EAAqB,gCAAkC,uBAG7D,ICpGV,IAAe7+I,EAAAA,EAAAA,KA3CsBlG,IAAkC,IAAjC,IAAEsQ,EAAG,WAAEs1I,EAAU,QAAEl+I,GAAS1H,EAChE,MAAM,iBAAE+mC,IAAqBl/B,EAAAA,EAAAA,MAEvBU,GAAOC,EAAAA,EAAAA,KAEPmjC,GAAgB5jC,EAAAA,EAAAA,KAAa6e,IACjC,IACE,MAAM7U,EAAOq5B,KAAKQ,MAAMhlB,EAAM7U,OACxB,UAAEi3B,EAAS,UAAEC,GAAcl3B,EAEjC,GAAkB,yBAAdi3B,EACF,OAGF,IAAK48G,EAAY,CACf,MAAMz8G,EAAUC,EAAAA,IAAkBH,EAAUI,UAC5CtC,EAAiB,CAAEz2B,IAAK64B,GAC1B,CAEAzhC,GAEA,CADA,MAAOjI,GACP,IAED,CAACiI,EAASk+I,EAAY7+G,IAOzB,OALAxiC,EAAAA,EAAAA,KAAU,KACRM,OAAOmK,iBAAiB,UAAW28B,GAC5B,IAAM9mC,OAAOoK,oBAAoB,UAAW08B,KAClD,CAACA,IAGFljC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,UACEjM,IAAK8T,EACLzH,MAAON,EAAK,kCACZ6lC,MAAM,UACND,QAAQ,gFACRvlC,UAAU,4BAER,ICLV,IAAe1C,EAAAA,EAAAA,KAtC+BlG,IAKxC,IALyC,MAC7C0lE,EAAK,iBACL68E,EAAgB,SAChB1uE,EAAQ,eACRgyE,GACD7lJ,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,KAEPgvC,GAAU11C,EAAAA,EAAAA,KAAQ,IACfygJ,GAAkBt+I,OACrBs+I,EAAiBr6I,KAAIC,IAAA,IAAC,GAAE5K,EAAE,MAAEsL,GAAOV,EAAA,MAAM,CAAEw1B,MAAO90B,EAAOuP,MAAO7a,EAAI,IACpE+vD,GAAAA,GACH,CAACi1F,IAEElqI,GAAWtQ,EAAAA,EAAAA,KAAaqQ,IAC5By7D,EAAS,CAAExpE,KAAM,0BAA2Bs7D,QAASvtD,GAAQ,GAC5D,CAACy7D,IAEJ,OACEprE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBAEVE,EAAAA,GAAAA,cAACi0E,GAAAA,EAAU,CACT7rE,KAAK,oBACL2mC,QAASA,EACTmlC,SAAUjX,EAAM46E,kBAChBjoI,SAAUA,IAGZ5P,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACC,QAAS48I,GACrBt9I,EAAK,kCAGN,ICWV,IAAerC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,QAAEqgC,IAAY3nB,EAAAA,EAAAA,IAAe1Y,GACnC,MAAO,CACLwzB,MAAO6M,EAAQ7M,OAAOz7B,QACtB2nJ,aAAc1/I,EAAOstF,cAAcnuB,KACnCg9E,iBAAkB97G,EAAQ87G,iBAC3B,GANiBp8I,EAtC+BnG,IAO7C,IAP8C,SAClDyS,EAAQ,MACRmnB,EAAK,MACL8rC,EAAK,iBACL68E,EAAgB,aAChBuD,EAAY,iBACZC,GACD/lJ,EACC,MAAM,kBAAEgmJ,IAAsBn+I,EAAAA,EAAAA,MAExBU,GAAOC,EAAAA,EAAAA,MACNypF,EAAoBC,IAAyB7jF,EAAAA,EAAAA,KAAS,GACvD43I,GAAWnkJ,EAAAA,EAAAA,KAAQ,IAChBygJ,GAAkBt+I,QAAUyhE,EAAM46E,kBACrCiC,EAAiB9qG,MAAKtvC,IAAA,IAAC,GAAE5K,GAAI4K,EAAA,OAAK5K,IAAOmoE,EAAM46E,iBAAiB,KAAGz3I,WACnEvI,GACH,CAACiiJ,EAAkB78E,EAAM46E,oBAE5B,OACE73I,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAC4pF,GAAAA,EAAc,CAACC,OAAK,EAACC,kBAAmBN,IAEzCxpF,EAAAA,GAAAA,cAAC+pF,GAAAA,EAAY,CACX54D,MAAOA,EAAQrxB,EAAKqxB,QAASt5B,EAC7BilE,KAAMugF,EACNr1G,YAAaloC,EAAK,6BAA8B09I,GAChD7wH,YAAa7sB,EAAK,YAClBupF,WAAYk0D,EACZE,kBAAkB,EAClBzzD,iBAAkBhgF,EAClB8/E,kBAAmBN,EACnBS,2BAA4BR,EAC5Bi0D,cAAeJ,IAEb,KCzBJK,GAAmB,SACnBC,GAAkB,cAClBC,GAAsB,IAAIz9F,IAAI,CAACu9F,GAAkBC,KAsiBvD,IAAengJ,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJm9I,EAAI,gBACJ1B,EAAe,UACf0E,EAAS,mBACTxB,EAAkB,QAClBhD,EAAO,iBACPyE,EAAgB,eAChBC,EAAc,aACdC,EAAY,gBACZC,EAAe,MACf/sH,EAAK,kBACLgtH,EAAiB,aACjBC,EAAY,UACZC,EAAS,kBACTC,EAAiB,uBACjBC,EAAsB,iBACtBzE,EAAgB,kBAChB0E,EAAiB,gBACjBC,IACEpoI,EAAAA,EAAAA,IAAe1Y,GAAQqgC,QAErB9/B,EAAOkgJ,GAAgB,WAAYA,GAAejgJ,EAAAA,EAAAA,IAAWR,EAAQygJ,EAAahgJ,aAAUvG,EAC5F6mJ,EAAkB5lJ,QAAQwgJ,KAAa0E,IAAmBH,GAAoBx8F,IAAI28F,MAClF,mBAAEzB,EAAkB,YAAEC,EAAW,QAAEC,GAAawB,GAAgB,CAAC,GACjE,gBACJU,EAAe,2BACfC,EAA0B,iBAC1BC,EAAgB,iBAChBC,EAAgB,0BAChBC,EAAyB,0BACzBC,EAAyB,SACzBruG,EAAQ,OACR4oG,GACGwE,GAAoB,CAAC,EAE1B,MAAO,CACLjD,OACA58I,OACAk7I,kBACA0E,YACAxB,qBACA0B,iBACAE,kBACAS,kBACAC,6BACAC,mBACAC,mBACAC,4BACAC,4BACAruG,WACA4oG,SACAmF,kBACApF,UACAiD,qBACAC,cACAC,UACAtrH,QACAgtH,oBACA9iH,YAAa19B,EAAO09B,YAAY4jH,QAChCZ,YACAxE,mBAAoB/gJ,QAAQsgJ,GAAiB59I,QAC7C0jJ,iBAAkBX,GAAwBjmB,MAC1C6mB,SAAUb,GAAmBxpJ,GAC7BglJ,mBACAsF,mBAAoBZ,GAAmBa,WACvCZ,kBACD,GApEe/gJ,EA/f+CnG,IAiC7D,IAjC8D,OAClEuH,EAAM,QACNG,EAAO,KACP67I,EAAI,KACJ58I,EAAI,gBACJk7I,EAAe,UACf0E,EAAS,mBACTxB,EAAkB,gBAClBqC,EAAe,2BACfC,EAA0B,iBAC1BC,EAAgB,iBAChBC,EAAgB,0BAChBC,EAAyB,0BACzBC,EAAyB,SACzBruG,EAAQ,gBACRutG,EAAe,gBACfQ,EAAe,QACfpF,EAAO,eACP0E,EAAc,OACdzE,EAAM,mBACNgD,EAAkB,YAClBC,EAAW,QACXC,EAAO,kBACP0B,EAAiB,MACjBhtH,EAAK,YACLkK,EAAW,mBACXw+G,EAAkB,UAClBwE,EAAS,iBACTa,EAAgB,SAChBC,EAAQ,iBACRrF,EAAgB,mBAChBsF,EAAkB,gBAClBX,GACDlnJ,EACC,MAAM,iBACJ+nJ,EAAgB,sBAChBC,EAAqB,gBACrBC,EAAe,eACfzF,EAAc,oBACd0F,EAAmB,kBACnBlC,EAAiB,wBACjBmC,IACEtgJ,EAAAA,EAAAA,MAEEU,GAAOC,EAAAA,EAAAA,MAEN2xB,EAAaC,EAAWC,IAAcrvB,EAAAA,EAAAA,MACtCo9I,EAAcC,IdsHdxrD,EAAAA,GAAAA,GAAW0jD,GAASn7E,KcrHpBhD,EAAWugE,KAAgBt0H,EAAAA,EAAAA,KAAS,IACpC+zI,GAAekG,KAAoBj6I,EAAAA,EAAAA,KAAS,IAC5Ck6I,GAAeC,KAAoBn6I,EAAAA,EAAAA,IAAS,IAE7Co6I,GAAkBlF,IAASC,EAAAA,GAAAA,eAE3BkF,IAAU3gJ,EAAAA,EAAAA,KAAa4gJ,IAC3BnG,EAAe,CAAEe,KAAMoF,GAAW,GACjC,CAACnG,KAEJj+I,EAAAA,EAAAA,KAAU,KACJgD,IACFihJ,GAAiB,IACjBT,IACA3tH,IACF,GACC,CAAC7yB,EAAQwgJ,EAAkB3tH,KAG9B71B,EAAAA,EAAAA,KAAU,MACHgD,GAAU4yB,GACbE,GACF,GACC,CAACA,EAAYF,EAAa5yB,KAE7BhD,EAAAA,EAAAA,KAAU,WACKjE,IAATijJ,GAAsB3pH,IACxB+oG,IAAa,EACf,GACC,CAAC4gB,EAAM3pH,KAEVr1B,EAAAA,EAAAA,KAAU,KACJq1B,GAAOglG,OACTypB,EAAgB,CACdh+I,KAAM,gBACNs7D,QAAS,CACP,CAAC/rC,EAAMglG,OAAQhlG,EAAMz7B,UAG3B,GACC,CAACy7B,EAAOyuH,KAEX9jJ,EAAAA,EAAAA,KAAU,KACR,GAAIgiJ,EAAW,CACb,MACE11I,KAAMurI,EAAQ,MAAEt3G,EAAK,MAAE0gC,EAAK,gBAAEw9E,GAC5BuD,GACE,YACJ7G,KAAgBkJ,GACd5F,GAAmB,CAAC,EAClB6F,EAAkBnJ,GAAe57G,EAAY2T,MAAKtvC,IAAA,IAAC,KAAEq4I,GAAMr4I,EAAA,OAAKq4I,IAASd,CAAW,IAAGe,YAC7F4H,EAAgB,CACdh+I,KAAM,iBACNs7D,QAAS,CACPy2E,WACAt3G,MAAOA,GAA6B,MAApBA,EAAMgkH,OAAO,GACxB,IAAGhkH,IACJA,EACJ0gC,WACIqjF,GAAmB,CACrBl7D,QAASk7D,EACTnJ,iBACGkJ,KAIX,IACC,CAACrC,EAAW8B,EAAiBvkH,KAEhCv/B,EAAAA,EAAAA,KAAU,KACJg+I,GAAkBt+I,QACpBokJ,EAAgB,CACdh+I,KAAM,0BACNs7D,QAAS48E,EAAiB,GAAGhlJ,IAEjC,GACC,CAAC8qJ,EAAiB9F,IAErB,MAAMwG,IAAwBhhJ,EAAAA,EAAAA,KAAY,KACxCi+I,GAAmB,GAClB,CAACA,IAEE7D,IAAargJ,EAAAA,EAAAA,KAAQ,IACrByhJ,IAASC,EAAAA,GAAAA,SACJ,EA4cb,WAKE,IAJAxB,EAAeh+I,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAG,GAClB69I,EAA6C79I,UAAAC,OAAA,EAAAD,UAAA,QAAA1D,EAC7C0oJ,EAAsBhlJ,UAAAC,OAAA,EAAAD,UAAA,QAAA1D,EACtB+/I,EAAiBr8I,UAAAC,OAAA,EAAAD,UAAA,QAAA1D,EAEjB,MAAM2hJ,EAAiBJ,EACnBoH,GAAkBpH,EAAiBmH,GACnC,GACJ,IAAI1gE,EAAQ+3D,EACZ,MAAM6I,EAAclH,EAAOl0F,OAAOm0F,GAAkB,IAIpD,OAHA35D,EAAQ4gE,EAAY70H,QAAO,CAACC,EAAK60H,IACxB70H,EAAM60H,EAAIhwG,QAChBmvC,GACIA,CACT,CAxdW8gE,CAAcpH,EAAQH,EAAiBuG,EAAaxI,SAAUwI,EAAa/H,YACjF,CAACkD,EAAMvB,EAAQH,EAAiBuG,EAAaxI,SAAUwI,EAAa/H,YAEjE6B,IAAepgJ,EAAAA,EAAAA,KAAQ,KAC3B,GAAIyhJ,IAASC,EAAAA,GAAAA,SAGb,OAmdJ,SAAyB99E,EAAkBm8E,EAA+CkB,GACxF,MAAMsG,Ef7oBD,SAA4B/J,GACjC,MAAMgF,EAAWjF,GAAeC,GAChC,OAAON,GAAMsF,IAAuB,EACtC,Ce0oBuBgF,CAAmB5jF,EAAM45E,YACxCwD,EAAgBuG,GAAgB3jF,EAAM45E,WAAc,GAAE+J,MAAiB3jF,EAAM45E,WAAWrrG,OAAO,UAAO3zC,EACtG0iJ,EAAkBt9E,EAAM65E,YACzB,GAAE75E,EAAM65E,gBAAgB75E,EAAM+5E,SAAS/5E,EAAMg6E,mBAC9Cp/I,GACE,MAAEwkC,EAAOs3G,SAAUvrI,GAAS60D,EAE5Bu9E,GADiBpB,EAAkB0H,GAAmB1H,EAAiBn8E,EAAMk6E,eAAYt/I,IACxDuI,MACvC,MAAO,CACLi6I,gBACAC,kBACAC,kBACAnyI,OACAi0B,QACAm+G,iBAEJ,CApeWuG,CAAgBpB,EAAcvG,EAAiB4E,GAAkB,GAAG,GAC1E,CAAClD,EAAM6E,EAAcvG,EAAiB4E,IAEnCgD,IAAqB1hJ,EAAAA,EAAAA,KAAY,KACrC2gJ,GAAQlF,EAAAA,GAAAA,YAAwB,GAC/B,CAACkF,KAEEgB,IAA0B3hJ,EAAAA,EAAAA,KAAY,KAC1Ci+I,GAAmB,GAClB,CAACA,IAiHE2D,IAAkB5hJ,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAEm4I,GAAakI,EACfwB,EA0WV,SAAwBxB,GACtB,MAAM,YACJ7I,EAAW,YACXC,EAAW,KACXC,EAAI,MACJ/5E,EAAK,YACLg6E,EAAW,SACXC,EACAvD,SAAUvrI,EAAI,MACdi0B,EAAK,MACL0gC,GACE4iF,EAWJ,MAAO,CACLv3I,OACAi0B,QACA0gC,QACAw9E,gBAbsB,CACtBzD,cACAC,cACAC,OACA/5E,QACAg6E,cACAC,YASJ,CAtYwBkK,CAAezB,GACnCJ,EAAsB,CAAE4B,cAAa1J,YAAW,GAC/C,CAAC8H,EAAuBI,IAErB0B,IAAkB/hJ,EAAAA,EAAAA,KAAY,KAClC,MAAMgiJ,EA+YV,SAAwB3B,GACtB,MAAM,WACJ9I,EAAU,WAAEO,EAAU,OAAEC,EAAM,IAAEC,EAAG,eAAEC,EAAc,WAAEC,GACnDmI,GACG4B,EAAaC,GAAcnK,EAAO9+E,MAAM,KAW/C,MAAO,CACLjvD,KAXW,CACXutI,aACAO,aACAmK,cACAC,aACAlK,MACApyD,QAASqyD,EACTkK,IAAKjK,GAMT,CAjawBkK,CAAe/B,GACnCF,EAAoB,CAClB6B,eACA,GACD,CAAC7B,EAAqBE,IAEnBgC,IAAWriJ,EAAAA,EAAAA,KAAY,KAC3BkgJ,EAAgB,CACdoC,iBAAkBjC,EAAaxI,SAC/BO,gBAAiBiI,EAAajI,gBAC9BG,kBAAmB8H,EAAa9H,kBAChCD,UAAW+H,EAAa/H,WACxB,GACD,CAAC4H,EAAiBG,IAEfr3F,IAAoBhpD,EAAAA,EAAAA,KAAY,KACpC,OAAQw7I,GACN,KAAKC,EAAAA,GAAAA,aACH7gB,IAAa,GACbgnB,KACA,MAEF,KAAKnG,EAAAA,GAAAA,SACHkF,GAAQlF,EAAAA,GAAAA,UACR,MAEF,KAAKA,EAAAA,GAAAA,cACHkF,GAAQlF,EAAAA,GAAAA,iBACR,MAEF,KAAKA,EAAAA,GAAAA,gBACH,GAAsB,KAAlB+E,GACF,OAGF5lB,IAAa,GACbwlB,EAAwB,CAAE7iF,SAAUijF,KACpC,MAEF,KAAK/E,EAAAA,GAAAA,YACH7gB,IAAa,GACbmnB,KACAzB,EAAgB,CAAEh+I,KAAM,0BAA2Bs7D,QAAS,KAC5D,MAEF,KAAK69E,EAAAA,GAAAA,SAAsB,CACzB,GAAI+C,IAAcO,IAAcsB,EAAaxI,SAG3C,OAFAjd,IAAa,QACbgnB,KAIF,GACEvB,EAAa9H,qBACRuH,GAAsBA,GAAuB9jI,KAAKC,MAAQ,IAvUvC,GA0UxB,YADA0kI,GAAQlF,EAAAA,GAAAA,iBAIV,IACG4E,EAAa9H,oBAEXmG,IAAmBL,KAAqBwB,GACrCnB,IAAmBJ,KAAoBsB,GAI7C,YADAe,GAAQlF,EAAAA,GAAAA,aAIV,MAAM,MAAE1+G,EAAK,MAAE0gC,EAAK,SAAE42E,GAAagM,EAC7BkC,EAA2B/C,IAAqB/hF,GAChD8hF,IAAqBxiH,GACrBsiH,IAAoBhL,EAE1B,GAAKiL,IAA+BP,GAAcwD,EAEhD,YADA5B,GAAQlF,EAAAA,GAAAA,cAIV,GAAI6D,IAA+Be,EAAaxI,SAE9C,YADA8I,GAAQlF,EAAAA,GAAAA,UAIV7gB,IAAa,GACbynB,KACA,KACF,EAAC,GAEF,CACD7C,EAAkBH,EAAiBE,EAAkBD,EAA4BZ,EAAgBoB,EACjGQ,EAAiBD,EAActB,EAAWP,EAAWuD,GAAiBM,GAAU1B,GAASf,EAAkBpE,EAC3GqE,EAAUW,GAAeJ,EAAyBwB,MAGpDplJ,EAAAA,EAAAA,KAAU,IACDg/I,IAASC,EAAAA,GAAAA,iBACZ9tF,EAAAA,GAAAA,GAAyB,CAAE/sD,QAASooD,UACpCzwD,GAEN,CAACywD,GAAmBwyF,IAEpB,MAAMh5D,IAAmBxiF,EAAAA,EAAAA,KAAY,KACnCsgJ,EAAgB,CACdh+I,KAAM,eAERi+I,IAAiB,GACjB5gJ,GAAS,GACR,CAACA,EAAS2gJ,IAEPv7G,IAAkB/kC,EAAAA,EAAAA,KAAY,KAClC2gJ,GAAQnF,IAASC,EAAAA,GAAAA,gBAA8BA,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,SAAqB,GAC/F,CAACkF,GAASnF,IAEPgH,IAAczoJ,EAAAA,EAAAA,KAAQ,KAC1B,OAAQyhJ,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAOj7I,EAAK,mBACd,KAAKi7I,EAAAA,GAAAA,aACH,OAAOj7I,EAAK,uBACd,KAAKi7I,EAAAA,GAAAA,SACH,OAAOj7I,EAAK,yBACd,KAAKi7I,EAAAA,GAAAA,cACH,OAAOj7I,EAAK,yBACd,KAAKi7I,EAAAA,GAAAA,gBACH,OAAOj7I,EAAK,gCACd,KAAKi7I,EAAAA,GAAAA,YACH,OAAOj7I,EAAK,mBACd,KAAKi7I,EAAAA,GAAAA,eACH,OAAOj7I,EAAK,kCACd,QACE,MAAO,GAAG,GAEb,CAACg7I,EAAMh7I,IAEJogC,GAAa46G,IAASC,EAAAA,GAAAA,SACxBj7I,EAAK,qBAAqB2wC,EAAAA,GAAAA,GAAeipG,GAAY/oG,EAAW7wC,EAAKw5B,OACrEx5B,EAAK,QAwBT,GAAI4+I,EACF,OACE1+I,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,QACVrB,OAAQ4yB,EACRzyB,QAAS2yB,EACTrH,oBAAqBu3D,IAErB9hF,EAAAA,GAAAA,cAAA,SAAG,0EAC2EA,EAAAA,GAAAA,cAAA,WAAM,iDAGpFA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASoxB,GAER9xB,EAAK,SAOhB,MAAMiiJ,GA9CN,WACE,GAAIpoF,EACF,OAAO,EAGT,OAAQmhF,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAOjiJ,QAAQwgJ,GAASW,cAAgBN,IAE1C,KAAKoB,EAAAA,GAAAA,YACH,OAAOjiJ,QACuB,KAA5B6mJ,EAAa9I,YACT0F,GAAkD,KAA5BoD,EAAavI,YACf,KAArBuI,EAAarI,KACW,KAAxBqI,EAAatI,QAGpB,QACE,OAAO,EAEb,CA0ByB2K,GAEzB,OACEhiJ,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,WAAWuG,EAAAA,GAAAA,GAAe,eAAgB4yI,GAASW,aAAe,aAClEn7I,OAAQ4yB,EACRzyB,QAAS2yB,EACTrH,oBAAqBu3D,IAErB9hF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAAS0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,eACVG,MAAM,cACNgD,OAAK,EACLrH,KAAK,UACLuE,QAASs6I,IAASC,EAAAA,GAAAA,SAAuBnpH,EAAayS,GACtD9gC,UAAU,SAEVvD,EAAAA,GAAAA,cAAA,KAAGG,WAAWuG,EAAAA,GAAAA,GACZ,OAAQo0I,IAASC,EAAAA,GAAAA,SAAuB,aAAe,sBAI3D/6I,EAAAA,GAAAA,cAAA,UAAK8hJ,UAEGjqJ,IAATijJ,EACC96I,EAAAA,GAAAA,cAACwpB,EAAAA,EAAU,CAACphB,KAAK,QAAQqhB,UAAWqxH,GAClC96I,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBApTvB,SAA4B8hJ,GAC1B,OAAQA,GACN,KAAKlH,EAAAA,GAAAA,SACH,OACE/6I,EAAAA,GAAAA,cAACkiJ,GAAQ,CACPhkJ,KAAMA,EACNq7I,OAAQA,EACRnuE,SAAUw0E,EACVpG,eAAgBmG,EAAaxI,UAAYiC,EACrCoH,GAAkBpH,EAAiBuG,EAAaxI,eAChDt/I,EACJ6hJ,WAAYA,GACZJ,QAASA,EACTG,aAAcA,GACd9oG,SAAUA,EACVkpG,mBAAoBA,EACpBjC,UAAW+H,EAAa/H,UACxBW,YAAaz/I,QAAQ8lJ,GACrB9E,iBAAkBA,EAClBH,cAAeA,GACfC,YAAaiG,KAGnB,KAAK9E,EAAAA,GAAAA,cACH,OACE/6I,EAAAA,GAAAA,cAACmiJ,GAAuB,CACtBllF,MAAO0iF,EACP7F,iBAAkBA,EAClB1uE,SAAUw0E,EACVxC,eAAgB4D,KAGtB,KAAKjG,EAAAA,GAAAA,gBACH,OACE/6I,EAAAA,GAAAA,cAACoiJ,GAAe,CACdnlF,MAAO0iF,EACP7F,iBAAkBA,EAClBwD,iBAAkByC,GAClB/1I,SAAUi4I,IAAgBnH,IAGhC,KAAKC,EAAAA,GAAAA,YACH,OACE/6I,EAAAA,GAAAA,cAACqiJ,GAAW,CACVplF,MAAO0iF,EACPv0E,SAAUw0E,EACVtD,mBAAoBxjJ,SAASolJ,GAAmB5B,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACTphH,YAAaA,IAGnB,KAAK0/G,EAAAA,GAAAA,aACH,OACE/6I,EAAAA,GAAAA,cAACsiJ,GAAY,CACXrlF,MAAO0iF,EACPv0E,SAAUw0E,EACVrH,YAAaz/I,QAAQ8lJ,GACrBxG,UAAWt/I,QAAQgmJ,GAAoBE,GACvC3G,UAAWv/I,QAAQ+lJ,GAAoBE,GACvCzG,SAAUx/I,QAAQ6lJ,GAClBtjH,YAAaA,IAGnB,KAAK0/G,EAAAA,GAAAA,SACH,OACE/6I,EAAAA,GAAAA,cAACuiJ,GAAQ,CACPtlF,MAAO0iF,EACPv0E,SAAUw0E,EACVxG,gBAAiBA,GAAmB,GACpCzoG,SAAUA,IAGhB,KAAKoqG,EAAAA,GAAAA,eACH,OACE/6I,EAAAA,GAAAA,cAACwiJ,GAAc,CACb36I,IAAKs2I,EACLhB,WAAYsB,EACZx/I,QAAS2yB,IAGf,QACE,OAEN,CAgOW6wH,CAAmB3H,KAIxB96I,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAC0X,GAAAA,EAAO,CAACpX,MAAM,UAGlB0/I,IACChgJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLuB,KAAK,SACLpB,QAAS8nD,GACTn4C,SAAU4xI,GACVpoF,UAAWA,GAEVz5B,KAIN/O,IAAUA,EAAMglG,OAjWrB,WACE,GAAKhlG,EAGL,OACEnxB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,QACVrB,OAAQhG,QAAQq4B,GAChBlyB,QAASqhJ,IAETtgJ,EAAAA,GAAAA,cAAA,UAAKmxB,EAAM6W,aAAe,SAC1BhoC,EAAAA,GAAAA,cAAA,SAAImxB,EAAM6W,aAAe,SACzBhoC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASygJ,IAERnhJ,EAAK,QAKhB,CA2U8B4iJ,GACpB,KA4EZ,SAAS5B,GAAmB1H,EAAmCuJ,GAC7D,OAAOvJ,EAAgBpqG,MAAKnvC,IAAA,IAAC,GAAE/K,GAAI+K,EAAA,OAAK/K,IAAO6tJ,CAAQ,GACzD,CAEA,SAASnC,GAAkBpH,EAAmCmH,GAE5D,OADeO,GAAmB1H,EAAiBmH,IACpChH,MACjB,CCjnBA,MA4EA,IAAe97I,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEilJ,IAAYvsI,EAAAA,EAAAA,IAAe1Y,GAAQqgC,SACrC,SACJ2S,EAAQ,OACR4oG,EAAM,KACNhwF,EAAI,YACJs5F,EAAW,iBACXC,EAAgB,eAChBtJ,EAAc,eACdgB,EAAc,MACd7iJ,EAAK,KACL4N,EAAI,MACJnF,EAAK,UACLw3I,GACGgL,GAAW,CAAC,EAEjB,MAAO,CACLjyG,WACA4oG,SACAhwF,OACAquF,YACAiL,cACAC,mBACAtJ,iBACAgB,iBACA7iJ,QACA4N,OACAnF,QACD,GA7Be1C,EA5E4BnG,IAc1C,IAd2C,OAC/CuH,EAAM,QACNG,EAAO,OACPs6I,EAAM,eACNC,EAAc,UACd5B,EAAS,YACTiL,EAAW,SACXlyG,EAAQ,KACR4Y,EAAI,MACJ5xD,EAAK,KACL4N,EAAI,MACJnF,EAAK,iBACL0iJ,EAAgB,eAChBtI,GACDjjJ,EACC,MAAMuI,GAAOC,EAAAA,EAAAA,MAEN2xB,EAAaC,EAAWC,IAAcrvB,EAAAA,EAAAA,MAE7CzG,EAAAA,EAAAA,KAAU,KACJgD,GACF6yB,GACF,GACC,CAAC7yB,EAAQ6yB,IAEZ,MAAM8nH,GAAepgJ,EAAAA,EAAAA,KAAQ,IAoF/B,SAAyBghJ,EACvB9wF,EAKAixF,GACA,IAAKjxF,EACH,MAAO,CAAE8wF,iBAEX,MAAM,gBAAEE,GAAoBhxF,EACtBw5F,EAAcxI,GAAiBzD,YAChC,GAAEyD,EAAgBzD,gBAAgByD,EAAgBvD,SAASuD,EAAgBtD,mBAC5Ep/I,GACE,MAAEwkC,EAAK,KAAEj0B,GAASmhD,EACxB,MAAO,CACL8wF,gBACAE,gBAAiBwI,EACjB36I,OACAi0B,QACAm+G,iBAEJ,CAzGWuG,CAAgB+B,EAAkBv5F,EAAMixF,IAC9C,CAACjxF,EAAMixF,EAAgBsI,IAEpBxJ,GAAUjgJ,EAAAA,EAAAA,KAAQ,KACf,CACL1B,QACA4N,KAAMA,EACNnF,MAAOA,EACPswC,OAAQmyG,EACRlyG,SAAUA,KAEX,CAACA,EAAUh5C,EAAO4N,EAAMnF,EAAOyiJ,IAElC,OACE7iJ,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,oCACVrB,OAAQ4yB,EACRzyB,QAAS2yB,EACTrH,oBAAqBtrB,GAErBe,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAAS0G,IAAK/G,EAAKmhB,MAAQ,WAAQppB,GAChDmI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,eACVG,MAAM,cACNgD,OAAK,EACLrH,KAAK,UACLuE,QAASoxB,EACTruB,UAAU,SAEVvD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,UAAI,IAAEF,EAAK,kBAAkB,MAE/BE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAACkiJ,GAAQ,CACP3I,OAAQA,EACRC,eAAgBA,EAChBE,WAAYmJ,EACZjL,UAAWA,EACX0B,QAASA,EACTG,aAAcA,EACd9oG,SAAUA,MAIV,I,oHC9FZ,MACMqyG,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAoCjD,GAAezlJ,EAAAA,EAAAA,KAlCsBlG,IAAkC,IAAjC,kBAAEuyF,EAAiB,MAAED,GAAOtyF,EAChE,MAAO4rJ,EAAqBC,IAAyB7gJ,EAAAA,EAAAA,IAAQ,IACtD8gJ,EAAaC,IAAiB/gJ,EAAAA,EAAAA,IAAQ,IACvC,SAAEC,IAAaC,EAAAA,EAAAA,MAEf8gJ,EAAa/gJ,EAAWghJ,EAAAA,IAA2BC,EAAAA,KAEzD3oI,EAAAA,EAAAA,GAAWwoI,EAZkB,KAa7B,MAAMI,GAAwBpkJ,EAAAA,EAAAA,IAAY8jJ,EAAuB,CAACA,IAElE,OACEpjJ,EAAAA,GAAAA,cAAA,OAAKlL,GAAG,SAASqL,UAAW0pF,EAAQ,MAAQ,KACxCs5D,GACAnjJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAEjBH,EAAAA,GAAAA,cAAC8qC,EAAAA,EAAe,CACd7uC,KAAM4tF,EAAQkB,EAAAA,IAAsBw4D,EACpCpjJ,UAAWkjJ,EAAc,SAAW,QACpCt4G,OAAQs/B,EAAAA,EAAAA,YACRs5E,YAAaX,EACb93G,QAAM,EACN7I,OAAQqhH,IAEV1jJ,EAAAA,GAAAA,cAAC8qC,EAAAA,EAAe,CACd7uC,KAAM4tF,EAAQkB,EAAAA,IAAsBw4D,EACpCpjJ,UAAWkjJ,EAAc,QAAU,SACnCt4G,OAAQs/B,EAAAA,EAAAA,WACRs5E,YAAa75D,EAAoBm5D,EAAsBC,EACvDh4G,QAAM,IAEJ,G,wEClCV,MAkEA,GAAeztC,EAAAA,EAAAA,KAlEsBlG,IAM/B,IANgC,MACpC6I,EAAQ,8BAA6B,SACrC+P,EAAQ,WACRmxH,EAAU,qBACV57D,EAAoB,SACpB91D,GACDrY,EACC,MAAOmqF,EAAcC,IAAmB/7E,EAAAA,EAAAA,OACjCg+I,EAAgBC,IAAqBj+I,EAAAA,EAAAA,IAA6B8/D,IAEzE5pE,EAAAA,EAAAA,KAAU,KACR+nJ,EAAkBn+E,EAAqB,GACtC,CAACA,IAaJ,MAAMkc,GAAmBtiF,EAAAA,EAAAA,KAAauiF,IACpCF,OAAgB9pF,GAChB+X,EAASiyE,GAEL+hE,GAAkBA,IAAmBl+E,GACvCo+E,IAAIC,gBAAgBH,GAEtBC,EAAkBC,IAAIE,gBAAgBniE,GAAY,GACjD,CAAC+hE,EAAgBl+E,EAAsB91D,IAEpCkyE,GAAmBxiF,EAAAA,EAAAA,KAAY,KACnCqiF,OAAgB9pF,EAAU,GACzB,IAEGosJ,GAAiBv9I,EAAAA,EAAAA,GACrBk9I,GAAkB,SAClBzzI,GAAY,WACZmxH,GAAc,kBAGhB,OACEthI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,SACEG,UAAW8jJ,EACX5pH,KAAK,SACLC,SAAU,EACVl6B,MAAOA,GAEPJ,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLgO,SAzCR,SAA0BuO,GACxB,MAAMhC,EAASgC,EAAMhC,OAEhBA,GAAQwU,QAAQ,KAIrBgxD,EAAgBxlE,EAAOwU,MAAM,IAC7BxU,EAAOxM,MAAQ,GACjB,EAiCQoyE,OAAO,0BAET/hF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yBACZyjJ,GAAkB5jJ,EAAAA,GAAAA,cAAA,OAAKjM,IAAK6vJ,EAAgBhsI,IAAI,YAEnD5X,EAAAA,GAAAA,cAACgiF,EAAAA,EAAS,CAACC,KAAMP,EAAcziF,QAAS6iF,EAAkBlyE,SAAUgyE,IAChE,G,0DC7EH,MAAMt5E,EAActE,KAAKoZ,IAAIyjE,UAAUqjE,qBAAuB,EAAG,GAExE,IAAIC,EAKW,SAAS18I,IAWtB,OAVK08I,IACHA,EAAY,IAAI36G,MAAMlhC,GAAamhC,UAAK5xC,GAAW4H,KACjD,KACE,MAAMyJ,EAAS,IAAIk7I,OAAO,IAAIN,IAAI,oBAElC,MAAO,CAAE56I,SAAQhB,WADCm8I,EAAAA,EAAAA,GAAgCn7I,GACtB,KAK3Bi7I,CACT,C","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/currentTimeSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/main/hooks/useLeftHeaderButtonRtlForumTransition.ts","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = ARE_WEBCODECS_SUPPORTED && !IS_MOBILE ? 80 : 40;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import React, {\n  useRef, useState, useCallback, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  isActive?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst SeekLine: React.FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  url,\n  isActive,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  }, [setPreviewTime]);\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isLockedRef.current && !isSeeking) {\n      setSelectedTime(getCurrentTime());\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, 500);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  }, [onSeek, setIsSeeking]);\n\n  const handleSeekStart = useCallback(() => {\n    setIsSeeking(true);\n  }, [setIsSeeking]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  }, [isLooped, setCurrentTime]);\n\n  const handleEnded = useCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [isLooped, setCurrentTime, toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  }, [clickXThreshold, getControlsVisible, setControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  }, [handleClose, mediaIdRef, chatId, isMobile, threadId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIdsRef]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            user={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          user={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon', 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  }, [containerRef, idPrefix]);\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useCallback(() => {\n    onClick(reaction);\n  }, [onClick, reaction]);\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [\n    clearRecentCustomEmoji, clearRecentReactions, clearRecentStickers, closeConfirmModal, isEmoji, isReactionPicker,\n  ]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  }, [itemSize, margin, windowWidth]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleReactionSelect = useCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  }, [onReactionSelect]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    'no-selection',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { useCallback, memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[userId];\n\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={user} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !userReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${userId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <PrivateChatInfo\n                        userId={userId}\n                        noStatusOrTyping\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n    } else {\n      openLimitReachedModal({\n        limit: 'chatlistInvites',\n      });\n    }\n  }, [\n    invites, state.folderId, state.isTouched, maxInviteLinks, isCreating, onSaveFolder, onShareFolder, lang,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(inviteLink);\n  }, [copyLink, inviteLink]);\n\n  const handleShare = useCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  }, [inviteLink]);\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  }, [folderId, onReset, url]);\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  }, [lang]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (!folderId || !url) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  }, [folderId, selectedIds, url]);\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={isLoading ? lang('Loading') : url!}\n        onRevoke={handleRevoke}\n        isDisabled={isDisabled}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [hasCurrentUserFullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUser={currentUser}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const currentUserFullInfo = selectUserFullInfo(global, global.currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        user={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          user={user}\n          chat={chat}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import { useRef } from '../../../../lib/teact/teact';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useForceUpdate from '../../../../hooks/useForceUpdate';\n\nexport default function useLeftHeaderButtonRtlForumTransition(shouldHideSearch?: boolean) {\n  const forceUpdate = useForceUpdate();\n  const shouldDisableDropdownMenuTransitionRef = useRef(shouldHideSearch);\n  const prevShouldHideSearch = usePrevious(shouldHideSearch);\n\n  function handleDropdownMenuTransitionEnd() {\n    shouldDisableDropdownMenuTransitionRef.current = Boolean(shouldHideSearch);\n    forceUpdate();\n  }\n\n  if (shouldHideSearch === false && prevShouldHideSearch !== shouldHideSearch) {\n    shouldDisableDropdownMenuTransitionRef.current = false;\n  }\n\n  return { shouldDisableDropdownMenuTransitionRef, handleDropdownMenuTransitionEnd };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  }, [onShowMore]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', lang.isRtl && 'isRtl')} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, targetHref, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition_slide-active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  }, [isDesktop, isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  }, [onReactionPickerOpen]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && seenByDatesCount\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, seenByDatesCount],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                seenByDatesCount === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (seenByDatesCount\n                    ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleReactionPickerOpen = useCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  }, [message.chatId, message.id]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  const handleSponsorInfo = useCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  }, [message.additionalInfo, message.sponsorInfo]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded, shouldUpdateStickerSetOrder]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeMuteModal = useCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleUnmuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  }, [chatId, closeMenu, updateChatMutedState]);\n\n  const handleMuteClick = useCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, 'no-selection', isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useCallback(() => menuRef.current, []);\n  const getLayout = useCallback(() => ({ withPortal: true, isDense: true }), []);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleClick = useCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  }, [handleUserSelect]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, 'no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (lastSyncTime && isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, lastSyncTime, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const handleOpenWebview = useCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  }, [botId, switchWebview]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              chat={chat}\n              user={user}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { isChatChannel } from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          chat={senderChat}\n          user={senderUser}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","ARE_WEBCODECS_SUPPORTED","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","duration","bufferedRanges","isReady","posterSize","isActive","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","r","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","userReactions","reactor","seenByUser","FullNameTitle","peer","withEmojiStatus","addedDate","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","avatarSize","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","lastSyncTime","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","rightIcon","onClickLabel","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","shouldHideSearch","prevShouldHideSearch","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","userFullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","setIsMuteModalOpen","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","contentEditable","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","fullInfo","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName","hardwareConcurrency","instances","Worker","createConnector"],"sourceRoot":""}